<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_7_链接</title>
    <link href="/2024/08/28/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/"/>
    <url>/2024/08/28/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>​ <strong>链接(linking)</strong> 是将各种代码和数据部分收集起来并组合成为一个单一文件的过程，这个文件可**被加载(或被拷贝)<strong>到存储器并执行。链接可以执行于</strong>编译时(compile time)<strong>，也就是在源代码被翻译成机器代码时;也可以执行于</strong>加载时(loadtime)<strong>，也就是在程序被</strong>加载器(loader)<strong>加载到存储器并执行时;甚至执行于</strong>运行时(run time)<strong>，由应用程序来执行。在早期的计算机系统中，链接是手动执行的。在现代系统中，链接是由叫做</strong>链接器(linker)<strong>的程序自动执行的。<br>​链接器在软件开发中扮演着一个关键的角色，因为它们使得</strong>分离编译(separate compilation)**成为可能。我们不用将一个大型的应用程序组织为一个巨大的源文件，而是可以把它分解为更小、更好管理的模块，可以独立地修改和编译这些模块。当我们改变这些模块中的一个时，只需简单地重新编译它，并重新链接应用，而不必重新编译其他文件。</p><h1 id="1-编译器驱动程序"><a href="#1-编译器驱动程序" class="headerlink" title="1.编译器驱动程序"></a>1.编译器驱动程序</h1><p>​大多数编译系统都提供了一个<strong>编译器驱动（Compiler Driver）</strong>，它可以根据用户需求调用<strong>语言预处理器（Language Preprocessor）</strong>、编译器、汇编器和链接器等。例如要在 GNU 编译系统中构建下列程序，我们可以 使用命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gcc -<span class="hljs-number">02</span> -<span class="hljs-selector-tag">g</span> -o <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> swap.c<br></code></pre></td></tr></table></figure><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/c5dbec50679efcb44fdf4986480d2b7d.png"></p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/8686ddb2b4177e202d5493a7cdd4a93c.png"></p><p>​上图概括了驱动程序在将示例程序从ASCI码源文件翻译成可执行目标文件时的行为。(如果你想看看这些步骤，用-v选项来运行GCC)</p><p>驱动程序首先运行C预处理器(cpp)，它将C源程序 main.c翻译成一个 <strong>ASCII码的中间文件</strong> main.i.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cpp <span class="hljs-selector-attr">[other arguments]</span> <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> /tmp/<span class="hljs-selector-tag">main</span>.i<br></code></pre></td></tr></table></figure><p>接下来，驱动程序运行C编译器(cc1)，它将main.i翻译成一个<strong>ASCI 汇编语言文件</strong>main.s.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cc1 /tmp/<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.i</span> <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -<span class="hljs-number">02</span> <span class="hljs-selector-attr">[other arguments]</span> -o /tmp/<span class="hljs-selector-tag">main</span>.s<br></code></pre></td></tr></table></figure><p>然后，驱动程序运行汇编器(as)，它将main.s翻译成一个**可重定位目标文件(relocatable object file)**main.o .</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">as <span class="hljs-selector-attr">[other arguments]</span> -o /tmp/<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> /tmp/<span class="hljs-selector-tag">main</span>.s<br></code></pre></td></tr></table></figure><p>驱动程序经过相同的过程生成swap.0。最后，它运行链接器程序1d，将main.o和swap.o以及一些必要的系统目标文件组合起来，创建一个**可执行目标文件(executable object file)**p .</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ld -o <span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[system object files and args]</span>/tmp/<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> /tmp/swap.o<br></code></pre></td></tr></table></figure><p>要运行可执行文件户，我们在命令行上输人它的名字:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./p<br></code></pre></td></tr></table></figure><p>外壳调用操作系统中一个叫做<strong>加载器的函数，它拷贝可执行文件p中的代码和数据到存储器</strong>，然后将控制转移到这个程序的开头，</p><h1 id="2-静态链接"><a href="#2-静态链接" class="headerlink" title="2.静态链接"></a>2.静态链接</h1><p>​<strong>静态链接器(Static Linker)<strong>将</strong>可重定位目标文件</strong>和<strong>命令行参数</strong>作为输入，生成完全链接的可执行目标文件。<strong>可重定位目标文件</strong>由各种代码和数据组成，指令、初始化的全局变量和未初始化的变量分别处于不同部分。</p><p>链接器需要完成两个主要任务：</p><ul><li><strong>符号解析（Symbol Resolution）</strong>：目标文件定义并引用符号，每个符号对应一个函数、全局变量或静态变量（即使用<code>static</code>声明的任何变量）。符号解析的目的是将每个符号引用与一个符号定义相关联；</li><li><strong>重定位（Relocation）</strong>：编译器和汇编器生成的代码和数据段是从地址 0 开始的，链接器会重定位所有的符号定义并修改其对应的符号引用。</li></ul><p>注意：<strong>目标文件只是字节块的集合</strong>，其中可能包含代码、数据或指导链接器和加载器的数据结构。链接器将各个块连接在一起，确定整个块的运行时位置，并修改代码和数据块中的不同位置。编译器和汇编器在生成目标文件时已经完成了大部分工作，因而链接器对目标机器的了解甚少。</p><h1 id="3-目标文件"><a href="#3-目标文件" class="headerlink" title="3.目标文件"></a>3.目标文件</h1><p>目标文件（Object File）有三种形式：</p><ul><li><strong>可重定位目标文件</strong>：包含二进制代码和数据，可以在编译时与其他可重定位目标文件组合以创建可执行目标文件；</li><li><strong>可执行目标文件</strong>：包含二进制代码和数据形式，可直接被复制到内存中执行；</li><li><strong>共享目标文件</strong>：一种<strong>特殊类型的可重定位目标文件</strong>，可以在加载时或运行时被加载到内存中并动态链接。</li></ul><h1 id="4-可重定位目标文件"><a href="#4-可重定位目标文件" class="headerlink" title="4.可重定位目标文件"></a>4.可重定位目标文件</h1><p>​典型的 ELF（Executable and Linkable Format）可重定位目标文件格式如下图所示：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/494e335da73a3b07ea5e1507763be10b.png"></p><ul><li><p><strong>ELF 头（ELF Header）</strong>：开头是一个<strong>表征系统字长（Word Size）</strong>和<strong>字节顺序（Byte Ordering）</strong>的 16 字节序列。其余部分包括 ELF 头的大小、目标文件的类型（如可重定位、可执行或共享）、机器类型（如 x86-64）、<strong>节头表（Section Header Table）</strong>的文件偏移量以及其中**条目(entry)**的大小和数量；</p></li><li><p>节头表：描述了目标文件中每个 Section 的位置和大小；</p></li><li><p>Section：位于 ELF 头和节头表之间，包括：</p><ul><li>.text：编译后程序的机器码；</li><li>.rodata：只读数据，例如<code>printf</code>中的格式字符串，Switch 语句的跳转表等；</li><li>.data：<strong>已初始化的全局变量和静态变量</strong>。非静态局部变量在运行时位于栈中，不会出现在 .data 或 .bss 中；</li><li>.bss：<strong>未初始化的静态变量，以及初始化为 0 的全局变量和静态变量</strong>。<strong>此 Section 只是一个占位符，在目标文件中不占用实际空间</strong>，因此可以提升空间效率。这些变量在运行时被分配到内存中，初始值为零；</li><li>.symtab ：一个保存了在<strong>程序中被定义和引用的函数和全局变量信息</strong>的符号表（Symbol Table）。与编译器中的符号表不同，.symtab 中的符号表不包含任何局部变量；</li><li>.rel.text：当链接器将目标文件与其他文件组合时，.text 中的许多位置都需要被修改，而 .rel.text 中则保存了与之相关的重定位信息。通常，任何调用外部函数或引用全局变量的指令都需要被修改，而调用局部函数的指令则不变。可执行目标文件一般不需要重定位信息，因此这部分可以省略；</li><li>.rel.data：被引用或定义的任何全局变量的重定位信息。通常，所有初始值为全局变量地址或外部定义函数地址的已初始化全局变量都需要被修改；</li><li>.debug：调试符号表，仅在使用<code>-g</code>选项调用编译器驱动时出现；</li><li>.line：原始程序中行号与 .text 中机器代码指令之间的映射关系，仅在使用<code>-g</code>选项调用编译器驱动时出现；</li><li>.strtab：一个以<code>NULL</code>结尾，包含 .symtab 和 .debug 中的符号表以及 Section 名称的字符串序列。</li></ul></li></ul><h1 id="5-符号和符号表"><a href="#5-符号和符号表" class="headerlink" title="5.符号和符号表"></a>5.符号和符号表</h1><p>​每个目标文件都有一个符号表，其中包含了该文件所定义和引用的符号信息。符号有以下三种：</p><ul><li><strong>全局符号（Global Symbols）</strong>：由该文件定义并且可以被其他文件引用的符号；</li><li><strong>外部符号（Externals）</strong>：被该文件引用但由其他文件定义的符号；</li><li><strong>局部符号（Local Symbols）</strong>：由该文件定义且无法被其他文件引用的符号，即使用<code>static</code>声明的函数和变量。</li></ul><p>​注意：非静态局部变量在运行时位于栈中，与链接器无关。而静态局部变量则保存在 .data 或 .bss 中，编译器会在符号表中为其创建名称唯一的局部符号。例如同一文件中的两个函数都定义了静态局部变量<code>x</code>：</p><div class="note note-secondary">            <p><strong>给C语言初学者建议:利用 static 属性隐藏变量和函数名字</strong></p><p>C程序员使用 static属性在模块内部隐藏变量和函数声明，就像你在Java和C++中使用public 和 private 声明一样。C源代码文件扮演模块的角色。任何声明带有 static属性的全局变量或者函数都是模块私有的。类似地，任何声明为不带static属性的全局变量和函数都是公共的，可以被其他模块访问。尽可能用 static属性来保护你的变量和函数是很好的编程习惯。</p>          </div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">f</span>()</span><br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">g</span>()</span><br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>​那么编译器可能将<code>x.1</code>作为函数<code>f()</code>中的变量符号，将<code>x.2</code>作为函数<code>g()</code>中的变量符号发送给汇编器。<strong>汇编器使用接收到的<code>.s</code>文件中的符号构建符号表</strong>，其中每个条目的数据结构为：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/cd1122519cf50a75b23b03a187d9abf8.png"></p><ul><li><code>name</code>：符号名在字符串表 .strtab 中的偏移量；</li><li><code>value</code>：对于可重定位目标文件是符号在其 Section 中的偏移量，对于可执行目标文件是符号的运行时地址；</li><li><code>size</code>：符号的大小；</li><li><code>type</code>：符号的类型；</li><li><code>binding</code>：符号是局部的还是全局的；</li><li><code>section</code>：符号所在的 Section 在节头表中的索引。</li></ul><p>值得一提的是，有三个伪 Section 在节头表中没有条目：</p><ul><li>ABS：不应重定位的符号；</li><li>UNDEF：在此文件中引用但在其他文件中定义的符号；</li><li>COMMON：未初始化的全局符号</li></ul><p>上述三个 Section 仅存在于可重定位目标文件，在可执行目标文件中并不存在。我们可以使用 <a href="https://man7.org/linux/man-pages/man1/readelf.1.html">READELF</a> 工具阅读目标文件中的内容，<a href="#1.%E7%BC%96%E8%AF%91%E5%99%A8%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F">main.c</a> 生成的目标文件符号表条目如下：</p><p>![619376e7c3e3ec1d76562438dc21c413](C:\Users\Administrator\Documents\Tencent Files\3454523412\nt_qq\nt_data\Pic\2024-08\Ori\619376e7c3e3ec1d76562438dc21c413.png)</p><p>​READELF 通过整数索引 Ndx 标识每个 Section，1 表示 .text，3 表示 .data。全局符号<code>main</code>和<code>array</code>分别位于上述两个 Section 首部，因此其偏移量<code>value</code>均为 0。外部符号<code>sum</code>未在本文件中定义，位于 UNDEF。</p><p>​在这个例子中，我们看到一个关于全局符号buf定义的条目，它是一个位于.data节中偏移为零(即value)处的8字节目标。其后跟随着的是全局符号main的定义，它是个位于.text节中偏移为零处的17字节函数。最后一个条目来自对外部符号swap的引用READELF用一个整数索引来标识每个节。Ndx&#x3D;1表示.text节，而Ndx&#x3D;3表示.data节。</p><h1 id="6-符号解析"><a href="#6-符号解析" class="headerlink" title="6.符号解析"></a>6.符号解析</h1><p>​链接器将每个符号引用与符号表中的符号定义相关联以完成<strong>符号解析（Symbol Resolution）</strong>。当编译器遇到未在当前文件中定义的符号时，它会假设该符号已在其他文件中定义，然后生成对应的符号表条目。如果链接器无法在任何输入文件中找到该符号的定义，那么它就会终止链接。</p><p>不同文件可能定义了相同名称的全局符号。对于这种情况，链接器要么直接报错，要么选取其中之一。</p><div class="note note-secondary">            <p><strong>对 C++和 Java 中链接器符号的毁坏(mangling)</strong><br>    C++和Java都允许重载方法，这些方法在源代码中有相同的名字，却有不同的参数列表。那么链接器是如何区别这些不同的重载函数之间的差异呢?C++和Java 中能使用重载函数，是因为编译器将每个唯一的方法和参数列表组合编码成一个对链接器来说唯一的名字。这种编码过程叫做**毁坏(mangling)<strong>，而相反的过程叫做</strong>恢复(demangling)**。</p><p>​C++ 和 Java ，使用<strong>兼容</strong>的毁坏策略。允许重载名称相同但参数列表不同的方法。编译器会将每个方法和参数列表组合为一个唯一的名称，这样链接器就可以区分它们。例如，<code>Foo::bar(int, long)</code>会被编码为<code>bar__3Fooil</code>。其中，3 代表类名 Foo 的字符数，i 和 l 则分别代表参数列表中的<code>int</code>和<code>long</code>。</p>          </div><h2 id="6-1-解析名称重复的符号"><a href="#6-1-解析名称重复的符号" class="headerlink" title="6.1 解析名称重复的符号"></a>6.1 解析名称重复的符号</h2><p>​Linux 编译系统会在编译时将全局符号分为两种类型：函数和已初始化的全局变量是<strong>强符号（strong）</strong>，未初始化的全局变量是<strong>弱符号（weak）</strong>。汇编器将符号的强弱信息隐式地编码到目标文件的符号表中。</p><p>链接器解析名称重复的符号的规则为：</p><ul><li>不允许多个强符号名称重复；</li><li>若一个强符号和多个弱符号名称重复，选择强符号；</li><li>若多个弱符号名称重复，从中任选其一。</li></ul><div class="note note-secondary">            <p>注意：最新版本的 GCC（如 GCC 10）默认使用标识位<code>-fno-common</code>，因此若程序包含多个名称重复的弱符号将引发链接错误</p>          </div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* foo3.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> x = <span class="hljs-number">15213</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    f();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/* bar3.c */</span><br><span class="hljs-built_in">int</span> x;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span>()</span><br>&#123;<br>    x = <span class="hljs-number">15212</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​示例程序中，文件<code>bar3.c</code>中的函数<code>f</code>是强符号，文件<code>foo3.c</code>中的函数<code>f</code>是弱符号，因此主函数的输出<code>x</code>的值为 15212。</p><p>​上文提到，未初始化的全局变量保存在 COMMON 中，而未初始化的静态变量，以及初始化为 0 的全局变量和静态变量保存在 .bss 中。这是因为前者是弱符号，编译器无法知晓其他文件中是否定义了相同名称的变量，必须将其分配到 COMMON 中并随后由链接器处理。已初始化为 0 的全局变量是强符号，根据第二条解析规则，该变量一定是唯一的，因此编译器可以安心地把它放到 .bss 中。静态变量无法被其他文件引用，自然也无需担心名称重复的问题。</p><h2 id="6-2-与静态库相链接"><a href="#6-2-与静态库相链接" class="headerlink" title="6.2 与静态库相链接"></a>6.2 与静态库相链接</h2><p>​<strong>编译系统将一些相关的目标模块打包到一个文件中，该文件被称为<em>静态库（Static Library</em>）</strong>。在构建可执行目标文件时，链接器<strong>仅复制</strong>静态库中被应用程序引用的<strong>目标模块</strong>，从而减小了磁盘和内存中可执行文件的大小。静态库为我们提供了 I&#x2F;O、字符串操作和数学运算等标准函数。</p><p>​在 Linux 系统中，静态库以特定的文件格式（后缀为<code>.a</code>）存储在磁盘上。应用程序可以在命令行中指定文件名来使用静态库中定义的任何函数（实际上，C 编译器驱动总是将<code>libc.a</code>传递给链接器），如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">linux&gt; gcc main.c /usr/lib/libm.a /usr/lib/libc.a<br></code></pre></td></tr></table></figure><p>​在Unix系统中，静态库以一种称为存档(archive)的特殊文件格式存放在磁盘中。存档文件是一组连接起来的可重定位目标文件的集合，有一个头部用来描述每个成员目标文件的大小和位置。存档文件名由后缀.a标识。为了使我们对库的讨论更加形象具体，假设我们想在一个叫做 1ibvector.a的静态库中提供下图中的向量例程。</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/7fc9b0388a3eb5f45da37c592fd4f439.png"></p><p>我们使用 AR 命令将下列程序打包为静态库文件<code>libvector.a</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">linux&gt; gcc -c addvec<span class="hljs-selector-class">.c</span> multvec<span class="hljs-selector-class">.c</span><br>linux&gt; ar rcs libvector<span class="hljs-selector-class">.a</span> addvec<span class="hljs-selector-class">.o</span> multvec.o<br></code></pre></td></tr></table></figure><p>接下来再编写一个程序<code>main2.c</code>调用该静态库，头文件<code>vector.h</code>定义了库文件中的函数原型：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/5fa82c697df7838df12800b6d2b7ba3e.png"></p><p>最后使用如下命令编译并链接main2.o和libvector.a：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">linux&gt; gcc -c main2.c<br>linux&gt; gcc -<span class="hljs-type">static</span> -o p2 main2.o ./libvector.a<br></code></pre></td></tr></table></figure><p><strong><code>-static</code>参数表示链接器应当构建一个完全链接的可执行目标文件</strong>，该文件可以被加载到内存中运行而无需进一步地链接。完整的链接流程如下图所示：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/baa40568b0803a179e778c83047e5c7d.png"></p><h2 id="6-3-静态库的符号解析"><a href="#6-3-静态库的符号解析" class="headerlink" title="6.3 静态库的符号解析"></a>6.3 静态库的符号解析</h2><p>​符号解析时，链接器会按照从左到右的顺序依次扫描命令行中的目标文件和静态库。在这个过程中，E 为可重定位目标文件的集合，U 为被引用但还未找到定义的符号，D 为已扫描过的文件定义的符号，开始时三者均为空。</p><ul><li>若命令行中的输入文件为可重定位目标文件，则链接器将其添加到 E 中并更新 U 和 D 中的符号；</li><li>若命令行中的输入文件为静态库，则链接器会将 U 中的符号与该静态库中定义的符号相匹配。匹配成功的模块会被添加到 E 中，随后链接器更新 U 和 D 中的符号。当 U 和 D 中的符号不再改变时，匹配结束，任何不在 E 中的静态库模块都将被直接丢弃；</li><li>若扫描全部完成时 U 为空，则链接器合并并重定位 E 中所有的目标文件以构建可执行文件。否则，链接器将报错并终止。</li></ul><p>链接器的这种行为限制了命令行中的文件顺序。如果定义符号的静态库出现在引用该符号的目标文件之前，链接就会失败。</p><h1 id="7-重定位"><a href="#7-重定位" class="headerlink" title="7.重定位"></a>7.重定位</h1><p>符号解析完成后，链接器会将代码中的每个符号引用与一个符号定义相关联。接下来，链接器开始对目标文件重定位：</p><ul><li>重定位 Section 和符号定义：链接器将所有输入模块中相同类型的 Section 合并为一个新的聚合 Section，然后将运行时地址分配给每个 Section 和符号；</li><li>在 Section 内重定位符号引用：链接器修改代码和数据段中的每个符号引用，使其指向正确的运行时地址。为了执行这一步，它依赖于<strong>重定位条目（Relocation Entry）</strong>这种数据结构。</li></ul><h2 id="7-1重定位条目"><a href="#7-1重定位条目" class="headerlink" title="7.1重定位条目"></a>7.1重定位条目</h2><p>​汇编器在生成目标文件时，并不知晓代码、数据和引用的外部符号在内存中的最终位置。它只会为每个引用生成一个重定位条目（Relocation Entry），指导链接器如何修改它们。上文提到，代码的重定位条目放在 .rel.text 中，数据的重定位条目则放在 .rel.data 中。</p><p>ELF 重定位条目的数据结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">long</span> offset;    <span class="hljs-comment">/* Offset of the reference to relocate */</span><br>    <span class="hljs-type">long</span> type:<span class="hljs-number">32</span>,   <span class="hljs-comment">/* Relocation type */</span><br>         symbol:<span class="hljs-number">32</span>; <span class="hljs-comment">/* Symbol table index */</span><br>    <span class="hljs-type">long</span> addend;    <span class="hljs-comment">/* Constant part of relocation expression */</span><br>&#125; Elf64_Rela;<br></code></pre></td></tr></table></figure><p><code>offset</code>是被修改的引用在其 Section 中的偏移量；<code>symbol</code>是引用指向的符号在符号表中的索引；<code>type</code>告知链接器如何修改引用；<code>addend</code>是一个有符号常量，某些类型的重定位使用它来偏置被修改的引用值。</p><p>最基本的两种重定位类型为：</p><ul><li>R_X86_64_PC32：使用 32 位 PC 相对地址重定位引用。当 CPU 执行一条使用 PC 相对地址的指令时，它会将指令中的目标地址与 PC 当前值（即下一条指令在内存中的地址）相加得到有效地址（在 <a href="https://koktlzz.github.io/posts/machine-level-representation-of-programs-note/#%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4">跳转指令</a> 一节中我们讨论过这一问题）；</li><li>R_X86_64_32：使用 32 位绝对地址重定位引用。CPU 直接使用指令中的目标地址作为有效地址，无需进一步地修改。</li></ul><h2 id="7-2-重定位符号引用"><a href="#7-2-重定位符号引用" class="headerlink" title="7.2 重定位符号引用"></a>7.2 重定位符号引用</h2><p>链接器的重定位算法的伪代码如图所示：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/d447b5578bb67aa0b5fe84c54ea52858.png"></p><p>​</p><p>​链接器遍历每个 Section（<code>s</code>）中的每个重定位条目（<code>r</code>）。为了使描述具体化，假设每个节(Section)s是一个字节数组，每个重定位条目r是一个类型为Elf32_Rela的结构体。另外，还设当算法运行时，链接器已经为每个节(用ADDR(S)表示)和每个符号都选择了运行时地址(用ADDR(r.symbol)表示)。第3行计算的是需要被重定位的4字节引用的数组s中的地址（<code>*refptr</code>是指令中的目标地址）。如果这个引用使用的是PC相对寻址，那么它就用第5<del>9行来重定位。如果该引用使用的是绝对寻址，它就通过第 11</del> 13 行来重定位。</p><p>我们使用命令<code>objdump -dx main.o</code>得到汇编器为 <a href="#1.%E7%BC%96%E8%AF%91%E5%99%A8%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F">main.c</a> 生成的机器码和重定位条目：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/64d46db6560dbda755c64d50acaea0d1.png"></p><h3 id="7-2-1-PC相对地址重定位"><a href="#7-2-1-PC相对地址重定位" class="headerlink" title="7.2.1 PC相对地址重定位"></a>7.2.1 PC相对地址重定位</h3><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/004701c6a73489a46cb86d6e2e9b5982.png"></p><p>​从这个列表中，我们看到ca11指令开始于节偏移0x6处，由1个字节的操作码0xe8和随后的 32位引用0xfffffffc(十进制-4)组成，它是以小端法字节顺序存储的。我们还看到下一行显示的是这个引用的重定位条目。(回想一下，重定位条目和指令实际上是存放在目标文件的不同节中的。OBJDUMP工具为了方便将它们显示在一起。)重定位条目r由3个字段组成:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">r.offset</span> = <span class="hljs-number">0</span>x7<br><span class="hljs-attr">r.symbol</span> = swap<br><span class="hljs-attr">r.type</span>   = R_X<span class="hljs-number">86_64_</span>PC32<br><span class="hljs-attr">r.addend</span> = -<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>​</p><p>​这些字段告诉链接器修改开始于偏移量0x7.处的32位PC相对引用，使得在运行时它指向swap()。现在，假设链接器已经确定:  ADDR(s)&#x3D;ADDR(.text)&#x3D;0x80483b4  和   ADDR(r.symbol)&#x3D;ADDR(swap)&#x3D;0x80483c8。那么首先我们可以计算得到该引用的运行时地址为：（第七行）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">refaddr = ADDR(s)  + r<span class="hljs-number">.</span>offset<br>= <span class="hljs-number">0x80483b4</span> + <span class="hljs-number">0x7</span><br>        = <span class="hljs-number">0x80483bb</span><br></code></pre></td></tr></table></figure><p>然后，它将引用从当前值(-4)修改为0x9，使得它在运行时指向swap()(第8行):</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">*refptr = (<span class="hljs-name">unsigned</span>) (<span class="hljs-name">ADDR</span>(<span class="hljs-name">r</span>.symbol) + r.addend - refaddr)<br>        = (<span class="hljs-name">unsigned</span>) (<span class="hljs-number">0</span>x80483c8       + (<span class="hljs-name">-4</span>)     - <span class="hljs-number">0</span>x80483bb)<br>        = (<span class="hljs-name">unsigned</span>) (<span class="hljs-number">0</span>x9)<br></code></pre></td></tr></table></figure><p>在得到的可执行目标文件中，ca11指令有如下的重定位的形式:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">80483ba</span>:  e8 <span class="hljs-number">09</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>         ca11  <span class="hljs-number">80483</span>c8 &lt;swap&gt;swap();<br></code></pre></td></tr></table></figure><p>在运行时，ca11指令将存放在地址0x80483ba处。当CPU执行ca11指令时，PC的值为0x80483bf，即紧随在ca11指令之后的指令的地址。为了执行这条指令，CPU执行以下的步骤:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.push PC onto stack<br><span class="hljs-attribute">2</span>.PC&lt;-PC+<span class="hljs-number">0</span>x9=<span class="hljs-number">0</span>x80483bf+<span class="hljs-number">0</span>x9=<span class="hljs-number">0</span>x80483c8<br></code></pre></td></tr></table></figure><p>因此，要执行的下一条指令就是 swap 程序的第一条指令.</p><div class="note note-secondary">            <p>你可能想知道为什么汇编器会将ca11指令中的引用的初始值设置为-4。汇编器用这个值作为偏移量，是因为PC总是指向当前指令的<strong>下一条指令</strong>。在有不同指令大小和编码方式的不同的机器上，该机器的汇编器会使用不同的偏移量。这是一个很有用的技巧，它允许链接器透明地重定位引用，很幸运地不用知道某一台机器的指令编码。</p>          </div><h3 id="7-2-2-重定位绝对引用"><a href="#7-2-2-重定位绝对引用" class="headerlink" title="7.2.2 重定位绝对引用"></a>7.2.2 重定位绝对引用</h3><p>回想图7-1中我们的示例程序，swap.o模块将全局指针bufp0初始化为指向全局数组buf的第一个元素的地址:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int *bufpO <span class="hljs-punctuation">=</span><span class="hljs-meta">&amp;buf[0];</span><br></code></pre></td></tr></table></figure><p>该引用的重定位条目是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">r.offset = <span class="hljs-number">0x0</span><br>r.symbol = buf<br>r.type   = R_X86_64_32<br>r.addend = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>因为bufp0是一个已初始化的数据目标，那么它将被存放在可重定位目标模块swap.o的.data节中。因为它被初始化为一个全局数组的地址，所以它需要被重定位。下面是 swap.o中。data节的反汇编列表:</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/fe0d062a26dbdf47994c1694f99f3d34.png"></p><p>我们看到.data节包含一个32位引用，bufp0指针的值为0x0。重定位条目告诉链接器这是一个 32位绝对引用，开始于偏移0处，必须重定位使得它指向符号buf。现在，假设链接器已经确定:</p><p>ADDR(r.symbol)&#x3D;ADDR(buf)&#x3D;0x8049454，那么首先我们可以计算得到该引用的运行时地址为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">*refptr = (<span class="hljs-type">unsigned</span>) (ADDR(r.symbol) + *refptr)<br>        = (<span class="hljs-type">unsigned</span>) (<span class="hljs-number">0x8049454</span>      + <span class="hljs-number">0</span>)<br>        = (<span class="hljs-type">unsigned</span>) (<span class="hljs-number">0x8049454</span>)<br></code></pre></td></tr></table></figure><p>在得到的可执行目标文件中，引用有下面的重定位形式:</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/5f970249487f23287b62ef56bdb8ad2e.png"></p><p>总而言之，链接器决定在运行时变量bufp0将放置在存储器地址0x804945c处，并且被初始化为0x8049454，这个值就是buf数组的运行时地址。</p><h1 id="8-可执行目标文件"><a href="#8-可执行目标文件" class="headerlink" title="8.可执行目标文件"></a>8.可执行目标文件</h1><p>ELF 可执行目标文件的结构如下：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/839cb440a8e32a0044485b652368eff6.png"></p><p>​ELF 头描述了文件的整体格式，并包含了程序在运行时执行的第一条指令的地址。.init 定义了一个名为<code>_init</code>的函数，它将被程序的初始化代码所调用。其余 Section 与可重定位目标文件类似，只不过它们已被重定位到运行时的内存地址。正因如此，该文件中没有 .rel.text 和 .rel.data。</p><p>​ELF可执行文件被设计得很容易加载到存储器，可执行文件的**连续的片(chunk)<strong>被映射到连续的存储器段。</strong>段头部表(segment header table)**描述了这种映射关系。下图 展示了可执行文件 p的段头部表，是由OBJDUMP 显示的。</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/bc91362eb5f5fde40acfa2e586f8f7c6.png"></p><p>​从段头部表中，我们会看到根据可执行目标文件的内容初始化两个存储器段。</p><p>​第一个段(代码段)对齐到一个4KB(2”)的边界，有读&#x2F;执行许可，开始于存储器地址 0x08048000处，总共的存储器大小是0x448字节，并且被初始化为可执行目标文件的头0x448 个字节，其中包括ELF头部、段头部表以及.init、.text和.rodata节。<br>​第二个段(数据段)被对齐到一个4KB的边界，有读&#x2F;写许可开始于存储器地址 0x08049448处，总的存储器大小为0x104字节，并用从文件偏移 0x448处开始的 0xe8个字节初始化，在这种情况下，偏移0x448处正是.data节的开始。该段中剩下的字节对应于运行时将被初始化为零的.bss数据。</p><p>对于每个内存段，链接器必须选择一个起始地址 vaddr，使得：</p><p>​<em>vaddr</em> <em>mod</em> <em>align</em>&#x3D; <em>off</em> <em>mod</em> <em>align</em></p><p>其中，off 是该内存段中第一个 Section 在目标文件中的偏移量，align 是程序头表中指定的对齐方式。这种对齐要求是一种优化，它可以使目标文件被更加有效地加载到内存中。</p><h1 id="9-加载可执行目标"><a href="#9-加载可执行目标" class="headerlink" title="9.加载可执行目标"></a>9.加载可执行目标</h1><p>下图展示了 Linux 程序的运行时内存结构：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/f5b0f8944ad577db9c0399d5a96b7a27.png"></p><p>​加载器首先根据程序头表将可执行目标文件中的块复制到内存中的代码和数据段，然后跳转到<strong>程序入口</strong>，即<code>_start_</code>函数（在系统目标文件<code>crt1.o</code>中定义）的地址。该函数再调用<code>libc.so</code>中定义的系统启动函数<code>__libc_start_main</code>，由它初始化执行环境，之后在从.text和.init节中调用了初始化例程后，启动代码调用atexit例程，这个程序附加了一系列在应用程序正常中止时应该调用的程序。exit函数运行atexit注册的函数，然后通过调用_exit将控制返回给操作系统。接着，启动代码调用应用程序的 main 程序，它会开始执行我们的C代码。在应用程序返回之后，启动代码调用exit 程序，它将控制返回给操作系统调用用户级的主函数并处理其返回。</p><div class="note note-secondary">            <p>​加载器实际上是如何工作的?<br>​我们对于加载的描述从概念上来说是准确的，但也不完全准确。为了理解加载实际上是如何工作的，你必须理解进程、虚拟存储器和存储器映射的概念，这些我们还没有加以讨论。在后面的第8 章和第9章中遇到这些概念时，我们将重新回到加载的问题上，并逐渐向你揭开它的神秘面纱。<br>​对于不够有耐心的读者，下面是关于加载实际上是如何工作的一个概述:Unix 系统中的每个程序都运行在一个进程上下文中，有自己的虚拟地址空间。当外壳运行一个程序时，父外壳进程生成一个子进程，它是父进程的一个复制品。子进程通过 execve 系统调用启动加载器。加载器删除子进程现有的虚拟存储器段，并创建一组新的代码、数据、堆和栈段。新的栈和堆段被初始化为零。通过将虚拟地址空间中的页映射到可执行文件的页大小的片(chunk)，新的代码和数据段被初始化为可执行文件的内容。最后，加载器跳转到start地址，它最终会调用应用程序的main函数。除了一些头部信息，在加载过程中没有任何从磁盘到存储器的数据拷贝。直到 CPU引用一个被映射的虚拟页才会进行拷贝，此时，操作系统利用它的页面调度机制自动将页面从磁盘传送到存储器。</p>          </div><h1 id="10-动态链接共享库"><a href="#10-动态链接共享库" class="headerlink" title="10.动态链接共享库"></a>10.动态链接共享库</h1><p>​静态库会被定期维护和更新，因此程序员需要知晓其变动并将重新链接程序。此外，几乎所有 C 程序都会使用一些标准 I&#x2F;O 函数，例如<code>printf</code>。这些函数的代码将在运行时被复制到每个进程的代码段中，从而导致严重的内存浪费。</p><p>​<strong>共享库（Shared Libraries）</strong>可以解决上述静态库的缺点。它是一种可以在<strong>加载时或运行时于任意内存地址加载并与程序链接的目标模块</strong>，该过程被称为<strong>动态链接（Dynamic Linking）</strong>。共享库在 Linux 系统中以<code>.so</code>为后缀，而在 Windows 系统中则被称为 DLL（Dynamic Linking Libraries）。</p><p>​在任意文件系统中，每个共享库都只有一个<code>.so</code>文件。与静态库不同的是，该文件中的代码和数据可以被引用该库的所有可执行文件共享，而不需要复制到可执行文件中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* $begin main2 */</span><br><span class="hljs-comment">/* main2.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;vector.h&quot;</span></span><br><br><span class="hljs-type">int</span> x[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> y[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> z[<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">addvec</span>(x, y, z, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;z = [%d %d]\n&quot;</span>, z[<span class="hljs-number">0</span>], z[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* $end main2 */</span><br></code></pre></td></tr></table></figure><p> 动态链接过程如下图所示：</p><p> <img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/5b972378b0fdee43bd8cda4aa7b126b2.png"></p><p>我们使用如下指令将 addvec.c 和 multvec.c 构建为共享库文件<code>libvector.so</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">linux&gt; gcc -shared -fpic -o libvector.so addvec.c multvec.c<br></code></pre></td></tr></table></figure><p>其中，<code>-fpic</code>指示编译器生成 <strong>与位置无关代码（Position-Independent Code</strong>），而<code>-shared</code>则指示链接器创建共享目标文件。一旦共享库文件创建成功，就可以将其链接到示例程序中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">inux&gt; gcc -o prog2l main2.c ./libvector.so<br></code></pre></td></tr></table></figure><p>我们需要明确的是，<code>libvector.so</code>的任意代码和数据都没有被复制到可执行文件<code>prog2l</code>中。链接器只会复制一些重定位和符号表信息，它们将在加载时用于解析引用了共享库的符号。</p><p>加载器随后读取可执行文件中包含的动态链接器路径，加载并运行它。动态链接器也是一个共享库文件，如 Linux 系统的<code>ld-linux.so</code>。它通过执行以下重定位操作来完成链接：</p><ul><li>将<code>libc.so</code>的代码和数据重定位到某个内存段；</li><li>将<code>libvector.so</code>中的代码和数据重定位到另一个内存段；</li><li>将<code>prog2l</code>中所有引用了共享库的符号重定位。</li></ul><p>最终，动态链接器将控制权转移给应用程序，共享库的位置不会在程序执行期间改变。</p><h1 id="11-从应用程序中加载和链接共享库"><a href="#11-从应用程序中加载和链接共享库" class="headerlink" title="11.从应用程序中加载和链接共享库"></a>11.从应用程序中加载和链接共享库</h1><p>​应用程序还可以在运行时请求动态链接器加载和链接共享库，其应用场景包括：Windows 应用程序的开发人员使用共享库来分发软件更新；现代 Web 服务器使用<strong>动态链接有效地更新或添加功能</strong>。</p><p>Linux 系统为应用程序提供了一些简单接口以实现上述功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag)</span>;<br><span class="hljs-comment">// Returns: pointer to handle if OK, NULL on error</span><br></code></pre></td></tr></table></figure><p>函数<code>dlopen</code>加载并链接共享库文件<code>filename</code>，参数<code>flag</code>可以是<code>RTLD_GLOBAL</code>、<code>RTLD_NOW</code>和<code>RTLD_LAZY</code>中的一个或多个（详见 <a href="https://man7.org/linux/man-pages/man3/dlopen.3.html">dlopen</a>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlsym</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle, <span class="hljs-type">char</span> *symbol)</span>;<br><span class="hljs-comment">// Returns: pointer to symbol if OK, NULL on error</span><br></code></pre></td></tr></table></figure><p>类似的接口函数还有 <a href="https://man7.org/linux/man-pages/man3/dlsym.3.html">dlsym</a>、<a href="https://man7.org/linux/man-pages/man3/dlclose.3.html">dlclose</a> 和 <a href="https://man7.org/linux/man-pages/man3/dlerror.3.html">dlerror</a>。<a href="http://csapp.cs.cmu.edu/2e/ics2/code/link/dll.c">示例程序</a> 展示了应用程序是如何调用它们来动态链接共享库的。</p><div class="note note-secondary">            <p>​共享库和 Java 本地接口</p><p>​Java定义了一个标准调用规则，叫做Java本地接口(Java Native Interface，JNI)，它允许Java程序调用“本地的”C和C++函数。JNI的基本思想是将本地C函数，如foo，编译到共享库中，如foo.so。当一个正在运行的Java程序试图调用画数fo0时，Java解释程序利用dlopen 接口(或者与其类似的接口)动态链接和加载 foo.so，然后再调用 foo。</p>          </div><h1 id="12-与位置无关代码"><a href="#12-与位置无关代码" class="headerlink" title="12.与位置无关代码"></a>12.与位置无关代码</h1><p>​现代系统在编译共享库时会生成一种无需重定位即可被加载到内存中任意位置的代码，即与位置无关代码（Position-Independent Code，PIC），这样共享库就能被多个正在运行的进程同时引用。</p><h2 id="7-12-1-PIC数据引用"><a href="#7-12-1-PIC数据引用" class="headerlink" title="7.12.1 PIC数据引用"></a>7.12.1 PIC数据引用</h2><p>​编译器在 PIC 数据段的开头创建了一个全局偏移量表（Global Offset Table，GOT），其中的每个条目都对应一个被目标模块引用的全局符号。编译器还会为这些条目生成重定位记录。加载时，动态链接器重定位每个 GOT 条目，使其包含被引用符号的绝对地址。每个引用了全局符号的目标模块都有自己的 GOT。</p><p>下图展示了示例共享库<code>libvector.so</code>中的 GOT：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/20220331211838.png"></p><p>​无论我们在何处加载共享模块，其数据段与代码段之间的距离始终相同。因此，代码段中的<code>addl</code>与数据段中的 GOT[3] 之间的偏移量是一个运行时常量。当函数<code>addvec</code>引用全局变量<code>addcnt</code>时，先通过<code>0x2008b9(%rip)</code>计算得到 GOT[3] 的地址，然后从中读取加载时被动态链接器赋予的<code>addcnt</code>的绝对地址。</p><h2 id="7-12-2-PIC函数调用"><a href="#7-12-2-PIC函数调用" class="headerlink" title="7.12.2 PIC函数调用"></a>7.12.2 PIC函数调用</h2><p>​PIC 函数调用的运行时地址是在该函数第一次被调用时确定的，这种技术被称为延迟绑定（Lazy Binding）。当应用程序导入了一个包含成百上千个函数的共享库（如<code>libc.so</code>），却只调用其中一小部分的函数时，这种技术可以大大减少加载时不必要的重定位操作。</p><p>​延迟绑定是通过 GOT 和过程链接表（Procedure Linkage Table，PLT）共同实现的。只要目标模块调用了共享库中定义的函数，那么它就有自己的 GOT 和 PLT。上文提到，GOT 是数据段的一部分，而 PLT 则是代码段的一部分。</p><p>GOT 和 PLT 在运行时协同工作解析函数地址的过程如下图所示：</p><p><img src="/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/20220401173947.png"></p><p>​可执行文件中每个对共享库函数的调用都与 PLT 数组中的条目对应。其中，PLT[0] 是跳转到动态链接器的特殊条目，PLT[1] 对应系统启动函数<code>__libc_start_main</code>。从 PLT[2] 开始的条目对应用户代码调用的函数，如图中的<code>addvec</code>。</p><p>​当与 PLT 一起使用时，GOT [0] 和 GOT[1] 包含了动态连接器在解析函数地址时所需的信息，GOT[2] 是动态链接器的入口点。其余的每个条目均对应于一个在运行时需要被解析地址的调用函数，以及一个 PLT 条目。例如，GOT[4] 和 PLT[2] 与<code>addvec</code>对应。</p><p>程序第一次调用<code>addvec</code>并解析其地址的过程如上图（a）所示：</p><ol><li>PLT[2] 是该函数的入口，程序首先调用它；</li><li>PLT[2] 中的第一条指令间接跳转到 GOT[4]。由于最初每个 GOT 条目都指向对应 PLT 条目中的第二条指令，因此控制权将转移到 PLT[2] 中的第二条指令；</li><li>PLT[2] 中的第二条指令将<code>addvec</code>的 ID 0x1 压入栈中，第三条指令跳转到 PLT[0]；</li><li>PLT[0] 中的第一条指令将 *GOT[1] 压入栈中，第二条指令通过 GOT[2] 间接跳转到动态链接器。动态链接器根据被压入栈中的两个条目确定<code>addvec</code>的运行时地址并用它覆盖 GOT[4]，最终将控制权转移给<code>addvec</code>。</li></ol><p>程序再次调用<code>addvec</code>的过程如上图（b）所示：</p><ol><li>程序依然首先调用 PLT[2]；</li><li>此时 GOT[4] 指向了<code>addvec</code>，因此控制权将被直接转移到该函数。</li></ol><h1 id="13-库插入"><a href="#13-库插入" class="headerlink" title="13.库插入"></a>13.库插入</h1><p>​<strong>库插入（Library Interpositioning</strong>）能够拦截程序对共享库函数的调用，并执行用户自定义的代码。基于这项技术，我们可以计算库函数的调用次数，验证并跟踪其输入和输出的值，甚至将其替换为完全不同的函数。</p><p>库插入的基本思想是创建一个与库函数原型相同的包装函数，然后“欺骗”系统调用包装函数而非库函数。通常，包装函数会执行自己的逻辑，调用库函数并将其返回值传递给调用者。</p><p>库插入可以在编译时、链接时以及运行时使用。</p><h1 id="14-处理目标文件的工具"><a href="#14-处理目标文件的工具" class="headerlink" title="14.处理目标文件的工具"></a>14.处理目标文件的工具</h1><p>​在 Linux 系统中有大量可用的工具可以帮助你理解和处理目标文件。特别地，GNU bimutils<br>包尤其有帮助，而且可以运行在每个 Linux 平台上。</p><ul><li>AR:创建静态库，插入、删除、列出和提取成员。</li><li>STRINGS:列出一个目标文件中所有可打印的字符串。</li><li>STRIP:从目标文件中删除符号表信息。</li><li>NM:列出一个目标文件的符号表中定义的符号，</li><li>SIZE:列出目标文件中节的名字和大小。</li><li>READELF:显示一个目标文件的完整结构，包括ELF头中编码的所有信息。包含SIZE 和</li><li>NM 的功能。</li><li>OBJDUMP:所有二进制工具之母。能够显示一个目标文件中所有的信息。它最大的作用</li><li>是反汇编.text节中的二进制指令。</li></ul><p>Unix 系统为操作共享库还提供了LDD程序:</p><ul><li>LDD:列出一个可执行文件在运行时所需要的共享库</li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_6_存储器层次结构</title>
    <link href="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/"/>
    <url>/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>​<strong>存储器系统(memory system)</strong> 是一个具有不同容量、成本和访问时间的存储设备的层次结构。CPU寄存器保存着最常用的数据。靠近CPU的小的、快速的 <strong>高速缓存存储器(cache memory)</strong> 作为一部分存储在相对慢速的 <strong>主存储器(main memory，简称主存)</strong> 中的数据和指令的缓冲区域。主存暂时存放存储在容量较大的、慢速磁盘上的数据，而这些磁盘常常又作为存储在通过网络连接的其他机器的磁盘或磁带上的数据的缓冲区域。</p><p>​这里就是计算机系统中一个基本而持久的思想:如果你理解了系统是如何将数据在存储器层次结构中上上下下移动的，那么你就可以编写你的应用程序，使得它们的数据项存储在层次结构中较高的地方，在那里CPU能更快地访问到它们。</p><p>​这个思想围绕着计算机程序的一个称为 <strong>局部性(locality)</strong> 的基本属性。具有良好局部性的程序倾向于一次又一次地访问相同的数据项集合，或是倾向于访问邻近的数据项集合。具有良好局部性的程序比局部性差的程序更多地倾向于从存储器层次结构中较高层次处访问数据项，因此运行得更快。例如，不同的矩阵乘法核心程序执行相同数量的算术操作，但是有不同程度的局部性，它们的运行时间可以相差20倍!。我们向你展示如何分析C程序的局部性，而且我们还介绍改进你的程序中局部性的技术。你还会学到一种描绘某台机器上存储器层次结构的性能的有趣方法，称为 <strong>“存储器山”(memory mountain)</strong> ，它给出的读访问时间是局部性的一个数。</p><p>执行指令时访问数据所需的周期数：</p><ol><li>CPU寄存器：0个周期</li><li>L1L3高速缓存：475个周期</li><li>主存：上百个周期</li><li>磁盘：几千万个周期</li></ol><h1 id="1-存储技术"><a href="#1-存储技术" class="headerlink" title="1.存储技术"></a>1.存储技术</h1><p><strong>几种基本的存储技术</strong></p><ol><li><strong>随机访问存储器</strong>，分为两类：</li><li><ol><li><strong>RAM</strong>，同时也是<strong>易失性存储器</strong>，也分为两类：</li><li><ol><li><strong>SRAM</strong>：静态随机访问存储器，速度快，价格高。多用来作为高速缓存存储器。</li><li><strong>DRAM</strong>：动态随机访问存储器，速度慢，价格低。多用来作为主存和图形系统的帧缓冲器</li></ol></li><li><strong>ROM</strong>，同时也是<strong>非易失性存储器</strong>。<strong>闪存</strong>属于 ROM，<strong>固态硬盘</strong>就是基于闪存开发而来。</li></ol></li><li>机械硬盘</li><li>固态硬盘（SSD）</li></ol><h2 id="1-1-随机访问存储器"><a href="#1-1-随机访问存储器" class="headerlink" title="1.1 随机访问存储器"></a>1.1 随机访问存储器</h2><p>​随机访问存储器(Random-Access Memory，RAM)分为两类:静态的和动态的。静态RAM(SRAM)比动态RAM(DRAM)更快，但也贵得多。SRAM用来作为高速缓存存储器，既可以在CPU芯片上，也可以在片下。DRAM用来作为主存以及图形系统的帧缓冲区。典型地，一个桌面系统的SRAM不会超过几兆字节，但是DRAM却有几百或几千兆字节。</p><h3 id="1-静态-RAM（SRAM）"><a href="#1-静态-RAM（SRAM）" class="headerlink" title="1.静态 RAM（SRAM）"></a>1.静态 RAM（SRAM）</h3><p>SRAM 将每个位存储在一个双稳态的存储器单元内。每个单元由六个晶体管组成。</p><p>双稳态即该电路无限期地稳定保持在两个不同的电压状态。</p><p>对于 SRAM，只要有电，就永远地保持它的值。即使有干扰，当干扰消除，电路也会恢复到稳定</p><h3 id="2-动态-RAM（DRAM）"><a href="#2-动态-RAM（DRAM）" class="headerlink" title="2.动态 RAM（DRAM）"></a>2.动态 RAM（<strong>DRAM</strong>）</h3><p>DRAM 将每个位存储为对一个电容的充电。每个 DRAM 单元由一个电容和一个访问晶体管组成。</p><p>DRAM 对干扰非常敏感。当电容的电压被扰乱后，就永远不会恢复了</p><h3 id="3-SRAM和DRAM的区别"><a href="#3-SRAM和DRAM的区别" class="headerlink" title="3.SRAM和DRAM的区别"></a><strong>3.SRAM和DRAM的区别</strong></h3><p>只要有电源，SRAM是持续的。与DRAM不同，不需要刷新。SRAM的存取比DRAM快。SRAM对诸如光和电噪声之类的干扰不敏感。其代价是SRAM电池比DRAM电池使用更多的晶体管，因此密度更低，价格更贵，消耗更多电力。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/f0bdbfd58ae7b34da811ae7aac5560ef.png"></p><h3 id="4-传统的DRAM"><a href="#4-传统的DRAM" class="headerlink" title="4.传统的DRAM"></a>4.传统的DRAM</h3><p>​DRAM芯片中的单元(位)被分成d个*<em>超单元(supercell)*<em>，每个超单元都由w个DRAM单元组成，w 一般为 8。一个</em>dw*的 DRAM 总共存储了</em>dw*位信息。当从 DRAM 中读取数据时，一次可以读取一个超单元的数据（可以近似的将超单元理解为一个字节）。信息通过称为**引脚(pin)**的外部连接器流入和流出芯片。每个引脚携带一个1位的信号。</p><p>DRAM 中的超单元按行列组织，DRAM 中还包含一个行缓冲区。</p><p><strong>内存控制器</strong> <strong>依次</strong> 将行地址和列地址发送给 DRAM，DRAM 将对应的超单元的内容发回给内存控制器以实现读取数据。行地址和列地址共享相同的 DRAM 芯片地址引脚<br><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/q4HjUwednvJBWAK.png"></p><p><strong>从 DRAM 中读取超单元的步骤：</strong></p><ol><li>内存控制器发来行地址 i，DRAM 将整个第 i 行复制到内部的行缓冲区。称为<strong>RAS(Row Access Strobe，行访问选通脉冲)请求</strong>。</li><li>内存控制器发来列地址 j，DRAM 从行缓冲区中复制出超单元 (i,j) 并发送给内存控制器。<strong>称为CAS(Column<br>Access Strobe，列访问选通脉冲)请求</strong>。</li></ol><ul><li>注意：RAS和CAS请求共享相同的 DRAM 地址引脚。</li></ul><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/byWis1uH8FIBPkR.png"></p><h3 id="5-内存模块"><a href="#5-内存模块" class="headerlink" title="5.内存模块"></a>5.内存模块</h3><p>​许多 DRAM 芯片封装在<strong>内存模块</strong>中，插到主板的扩展槽上。常用的是<strong>双列直插内存模块 (DIMM)，以 64 位为块与内存控制器交换数据</strong>。</p><p>​比如一个内存模块包含 8 个 DRAM 芯片，每个 DRAM 包含 8M 个超单元，每个超单元存储一个字节（8bit）。<strong>使用 8 个 DRAM 芯片上相同地址处的超单元来表示一个 64 位字</strong>，DRAM 0 存储第一个字节，DRAM 1 存储第 2 个字节，依此类推。</p><p>​要取出内存地址 A 处的一个字，内存控制器先将 A 转换为一个超单元地址 (i,j)，然后内存模块将 i,j 广播到每个 DRAM。作为响应，每个 DRAM 输出它的 (i,j) 超单元的 8 位内容，合并成一个 64 位字，再返回给内存控制器。</p><p><strong>主存由多个内存模块连接到内存控制器聚合成。</strong></p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/iGR7WzclrCwB1Dv.png"></p><p>接下来，设r表示一个DRAM阵列中的行数，c表示列数，b.r表示行寻址所需的位数,b.c表示列寻址所需的位数。对于下面每个DRAM，确定2的幂数的阵列维数，使得max(b.r，b.c)最小，max(b.r，b.c)是对阵列的行或列寻址所需的位数中较大的值。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/4AKBRfjX6mgVU2H.png"></p><h3 id="6-增强的DRAM"><a href="#6-增强的DRAM" class="headerlink" title="6.增强的DRAM"></a>6.增强的DRAM</h3><p>有一些经过优化的 DRAM：</p><ol><li>**快页模式 DRAM (FPM DRAM)**：当连续访问位于同一行的超单元时，第二次以后，FPM DRAM 可以直接从行缓冲区获取数据。</li><li>**扩展数据输出 DRAM (EDO DRAM)**：FPM DRAM 的一个增强的形式，更快一些。</li><li>*<em>同步 DRAM (*</em>**SDRAM****)**：常规的、FPM 和 EDO 都是异步的。从效果而言，SDRAM 可以比异步存储器更快地输出它的超单元的内容。</li><li>**双倍数据速率同步 DRAM(DDR SDRAM)**：对 SDRAM 的一种增强，使速度翻倍。不同的 DDR SDRAM 以提高有效带宽的很小的预留缓冲区的大小来划分：DDR(2位)、DDR2(4位)、DDR3(8位)。位越多速度越快，近乎翻倍。</li><li>**视频 RAM (VRAM)**：用在图形系统的帧缓冲区中，其思想与 FPM DRAM 类似。VRAM 允许对内存进行并行地读和写。因此系统可以在写下一次更新的新值时（写），用帧缓冲区的像素刷屏幕（读）。</li></ol><h3 id="7-非易失性存储器"><a href="#7-非易失性存储器" class="headerlink" title="7.非易失性存储器"></a><strong>7.非易失性存储器</strong></h3><p>​DRAM 和 SRAM 会在断电后丢失信息，因此是易失性存储器。<strong>ROM</strong> 是非易失性存储器，在断电后仍保存着信息。</p><p>ROM 是只读存储器，但是实际上有些 ROM 既可以读也可以写。</p><p><strong>几种常见的非易失性存储器：</strong></p><ol><li>**可编程 ROM (PROM)**：只能被编程一次。</li><li>**可擦写可编程 ROM (EPROM)**：可以被擦除和重编程上千次。</li><li>**电子可擦除 PROM (EEPROM)**：类似于 EPROM，但是可以被重编程十万次。</li><li><strong>闪存</strong>：基于 EEPROM 的一种存储技术。闪存无处不在，<strong>固态硬盘就是一种基于闪存的磁盘驱动器</strong>。</li></ol><p>存储在 ROM 设备中的程序通常称为**固件(frmware)**。当一个计算机系统通电以后，它会运行存储在 ROM 中的固件。一些系统在固件中提供了少量基本的输入和输出函数–例如，PC的 **BIOS(基本输人&#x2F;输出系统)**例程。复杂的设备，像图形卡和磁盘驱动控制器，也依赖固件翻译来自CPU的IO(输入&#x2F;输出)请求。</p><h3 id="8-访问主存"><a href="#8-访问主存" class="headerlink" title="8.访问主存"></a>8.访问主存</h3><p>​数据流通过称为**总线(bus)<strong>的共享电子电路在处理器和DRAM主存之间来来回回。每次 CPU和主存之间的数据传送都是通过一系列步骤来完成的，这些步骤称为</strong>总线事务(bustransaction)**。</p><ul><li><p>**读事务(read transaction)**从主存传送数据到CPU。</p></li><li><p>**写事务(write transaction)**从CPU 传送数据到主存。</p></li></ul><p>总线是一组并行的导线，能携带地址、数据和控制信号。</p><p><strong>系统总线</strong>连接 CPU 和 IO 桥接器，<strong>内存总线</strong>连接 IO 桥接器和主存。IO 桥同时也连接着 <strong>I&#x2F;O 总线</strong>。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/a3dcf3bc826d53044f98037023c53acb.png"></p><p><strong>读事务</strong>的三个步骤：</p><ol><li>CPU 将地址 A 放到内存总线上。</li><li>主存从总线读出 A，取出字 x，然后将 x 放到总线上。</li><li>CPU 从总线读出字 x，并将它复制到相应寄存器中</li></ol><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/339f2d400708f6d104959422ba43df8b.png"></p><p><strong>写事务</strong>的三个步骤：</p><ol><li>CPU 将地址 A 放到内存总线。主存读出这个地址，并等待数据字。</li><li>CPU 将数据字 y 放到总线上。</li><li>主存从总线读数据字 y，并将它存储在地址 A。</li></ol><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/3ac92a496f20898fcec5902f146c054c.png"></p><h2 id="1-2-磁盘存储"><a href="#1-2-磁盘存储" class="headerlink" title="1.2 磁盘存储"></a>1.2 磁盘存储</h2><h3 id="1-磁盘构造"><a href="#1-磁盘构造" class="headerlink" title="1. 磁盘构造"></a><strong>1. 磁盘构造</strong></h3><p>略</p><h3 id="2-磁盘容量"><a href="#2-磁盘容量" class="headerlink" title="2. 磁盘容量"></a><strong>2. 磁盘容量</strong></h3><p>略</p><h3 id="3-磁盘操作"><a href="#3-磁盘操作" class="headerlink" title="3. 磁盘操作"></a><strong>3. 磁盘操作</strong></h3><p>略</p><h3 id="4-逻辑磁盘块"><a href="#4-逻辑磁盘块" class="headerlink" title="4.逻辑磁盘块"></a>4.<strong>逻辑磁盘块</strong></h3><p>略</p><h3 id="5-连接I-O设备"><a href="#5-连接I-O设备" class="headerlink" title="5. 连接I&#x2F;O设备"></a>5. 连接I&#x2F;O设备</h3><p>系统总线与内存总线都是与 CPU 相关的，而 IO 总线与 CPU 无关。</p><p>Intel 的<strong>外部设备互连总线（PCI）</strong>就是一种 IO 总线（广播总线）。</p><p>IO 总线速度相比于系统总线和内存总线慢，但是可以容纳种类繁多的第三方 IO 设备。</p><p>连接到 IO 总线的<strong>三种设备</strong>：</p><ol><li><strong>通用串行总线（USB）</strong>：USB 总线是一个广泛使用的<strong>标准</strong>，连接各种 IO 设备，包括键盘、鼠标等。</li><li><strong>显卡&#x2F;显示适配器：</strong>负责代表 CPU 在显示器上画像素。</li><li><strong>主机总线适配器：</strong>连接磁盘。常总的磁盘接口是 <strong>SCSI 和 SATA</strong>。其中 SCSI 比 SATA 更快也更贵。</li></ol><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/200afce0c40dc9a454550bfbddf9a422.png"></p><h3 id="6-访问磁盘"><a href="#6-访问磁盘" class="headerlink" title="6.访问磁盘"></a><strong>6.访问磁盘</strong></h3><p>​CPU 使用**内存映射 I&#x2F;O (memory-mapped I&#x2F;O)**来向 I&#x2F;O 设备发射命令。在使用内存映射 IO 的系统中，地址空间中有一块地址是专为与 IO 设备通信保留的，每个这样的地址称为一个 IO 端口。当一个设备连接到总线时，它与一个或多个端口相关联。</p><p>假设磁盘控制器映射到端口 0xa0，<strong>读一个磁盘扇区的步骤如下：</strong></p><ol><li>CPU 依次发送命令字、逻辑块号、目的内存地址三条指令到 地址 0xa0，发起一个磁盘读。因为磁盘读的时间很长，所以此后 CPU 会转去执行其他工作。</li></ol><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/4ed158cbd6bc3b547461648ceb26ecb1.png"></p><ol start="2"><li>磁盘收到读命令后，将逻辑块号翻译成一个扇区地址，读取该扇区的内容，并将内容直接传送到主存，不需要经过 CPU (这称为直接内存访问(DMA))。</li></ol><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/488d9c3f16fa663d4c66dea5efee22ff.png"></p><ol start="3"><li>DMA 传送完成后，即磁盘扇区的内容安全地存储在主存中后，磁盘控制器给 CPU 发送一个中断信号(Interrupt)来通知 CPU。</li></ol><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/80aaa6c0f95d1b6f78b66f070350437e.png"></p><h2 id="1-3-固态硬盘"><a href="#1-3-固态硬盘" class="headerlink" title="1.3 固态硬盘"></a>1.3 <strong>固态硬盘</strong></h2><p><strong>固态硬盘 (SSD)</strong> 是一种基于闪存的存储技术。</p><p>一个固态硬盘中封装了一个<strong>闪存翻译层</strong>和多个闪存芯片。闪存翻译层是一个硬件&#x2F;固件设备，功能类似磁盘控制器，将对逻辑块的请求翻译成对底层物理设备的访问。</p><p>一个闪存由 B 个块的序列组成，每个块由 P 页组成，页的大小为 512byte~4kb。数据以页为单位进行读写。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/458f772f9bb9c637418d692c7c532c57.png"></p><p>对于 SSD 来说，<strong>读比写快</strong>。因为只有在一页所属的块整个被擦除后，才能写这一页。重复写十万次后，块就会磨损，因此固态硬盘寿命较低。</p><p><strong>随机写 SSD 很慢的两个原因：</strong></p><ol><li>擦除块需要相对较长的时间。</li><li>如果写操作试图修改一个已经有数据的页，那么这个块中所有带有用数据的页都必须复制到一个新的块，然后才能向该页写数据。</li></ol><p><strong>SSD 相比于旋转磁盘的优点：</strong>由半导体存储器构成，没有移动部件，所以更结实，随机访问也更快，能耗更低。</p><p><strong>缺点</strong>：更容易磨损，不过现在的 SSD 已经可以用很多年了。</p><p>基于闪存（flash memory）的存储技术</p><h2 id="1-4-存储技术趋势"><a href="#1-4-存储技术趋势" class="headerlink" title="1.4 存储技术趋势"></a>1.4 存储技术趋势</h2><p><strong>性能上：</strong>SRAM &gt; DRAM &gt; SSD &gt; 旋转磁盘</p><p><strong>发展速度上</strong>：增加密度(降低成本) &gt; 降低访问时间</p><p>DRAM 和 磁盘的性能滞后于 CPU 的性能提升速度，两者之间的差距越来越大。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/7719fde4c6dafec46ee9c426c508f0a2.png"></p><h1 id="2-局部性"><a href="#2-局部性" class="headerlink" title="2.局部性"></a>2.局部性</h1><p>​实际上弥补CPU和内存之间差距的关键，是程序的局部性。一个编写良好的计算机程序常常具有良好的**局部性(locality)<strong>。也就是说，它们倾向于引用邻近于其他最近引用过的数据项的数据项，或者最近引用过的数据项本身。这种倾向性，被称为</strong>局部性原理(principle of locality)**，是一个持久的概念，对硬件和软件系统的设计和性能都有着极大的影响。</p><p>​局部性是程序的一个基本属性。具有良好局部性的程序倾向于**重复地访问相同的数据 (时间局部性 temporal locality)<strong>，或倾向于</strong>访问邻近的数据 (空间局部性 spatial locality)**，因此运行更快。</p><p><strong>局部性有两种形式</strong>：时间局部性和空间局部性。</p><p>现代计算机系统的各个层次，从硬件到操作系统到应用程序都利用了局部性。</p><h2 id="2-1-对程序数据引用的局部性"><a href="#2-1-对程序数据引用的局部性" class="headerlink" title="2.1 对程序数据引用的局部性"></a><strong>2.1 对程序数据引用的局部性</strong></h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">N</span>; ++i) &#123;<br><span class="hljs-built_in">sum</span> += v[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>上例中，sum 具有好的时间局部性，向量 v 具有好的空间局部性。</p><p>这里对向量 v 中元素的访问是顺序访问的，称为<strong>步长为 1 的引用模式</strong>。在空间局部性上，步长为 1 的引用模式是最好的。</p><h2 id="2-2-取指令的局部性"><a href="#2-2-取指令的局部性" class="headerlink" title="2.2 取指令的局部性"></a><strong>2.2 取指令的局部性</strong></h2><p>​程序指令存放在内存中，CPU 需要读这些指令，因此取指令也有局部性。比如 for 循环中的指令具有好的时间局部性和空间局部性。</p><h2 id="2-3-局部性小结"><a href="#2-3-局部性小结" class="headerlink" title="2.3 局部性小结"></a><strong>2.3 局部性小结</strong></h2><p><strong>评价局部性的简单原则：</strong></p><ol><li>重复引用相同变量的程序有好的时间局部性。</li><li>对于步长为 k 的引用模式的程序，k 越小，空间局部性越好。</li><li>对于取指令来说，循环有好的时间和空间局部性。循环体越小，循环迭代次数越多，局部性越好。</li></ol><h1 id="3-存储器层次结构"><a href="#3-存储器层次结构" class="headerlink" title="3.存储器层次结构"></a>3.存储器层次结构</h1><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/9a5f7056a064b85cd13ef10cd7b59960.png"></p><h2 id="3-1-在存储器层次结构中的缓存"><a href="#3-1-在存储器层次结构中的缓存" class="headerlink" title="3.1 在存储器层次结构中的缓存"></a>3.1 在存储器层次结构中的缓存</h2><p>一般而言，高速缓存(cache)是一个小而快速的存储设备。使用高速缓存的过程称为缓存(caching)。</p><p><strong>存储器层次结构的中心思想</strong>：对于每个 k，位于 k 层的更快更小的存储设备作为位于 k+1 层的更大更慢的存储设备的缓存。换句话说，层次结构中的每一次都缓存来自较低一层的数据对象。</p><p><strong>缓存的具体实现：</strong>数据总是以**块(block)**大小为传送单元(transfer unit)在第 k 层和第 k+1 层之间来回拷贝的。虽然在层次结构中任何一对相邻的层次之间块大小是固定的，但是其他的层次对之间可以用不同的块大小。</p><p>一般而言，层次结构较低的层(离 CPU 较远)的设备访问时间较长，因此为了补偿这些较长的访问时间，倾向于使用较大的块</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/968eef5426637935d231b7a7d020e33b.png"></p><p><strong>1. 缓存命中</strong></p><p>当需要 k+1 层的某个数据对象 d 时，如果 d 恰好缓存在 k 层中，就称为缓存命中</p><p><strong>2. 缓存不命中</strong></p><p>缓存不命中时，第 k 层的缓存从 第 k+1 层缓存中取出包含 d 的块。</p><p>如果第 k 层缓存已经满了，需要根据<strong>替换策略</strong>选择一个块进行覆盖 (替换)，未满的话需要根据放置策略来选择一个块放置。</p><p><strong>3. 缓存不命中的种类</strong></p><ol><li><strong>冷不命中</strong>：一个空的缓存称为<strong>冷缓存</strong>，冷缓存必然不命中，称为冷不命中。</li><li><strong>冲突不命中：</strong>常用的放置策略是将 k+1 层的某个块限制放置在 k 层块的一个小的子集中。比如 k+1 层的块 1,5,9,13 映射到 k 层的块 0。这会带来冲突不命中。</li><li><strong>容量不命中</strong>：当访问的工作集的大小超过缓存的大小时，会发生容量不命中。即缓存太小了，不能缓存整个工作集。</li></ol><p><strong>4. 缓存管理</strong></p><p>寄存器文件的缓存由编译器管理，L1,L2,L3 的缓存由内置在缓存中的硬件逻辑管理，DRAM 主存作为缓存由操作系统和 CPU 上的地址翻译硬件共同管理。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/fe4b962f01599eefb4a138a7d24ad91f.png"></p><h2 id="3-2-存储器层次结构概念小结"><a href="#3-2-存储器层次结构概念小结" class="headerlink" title="3.2 存储器层次结构概念小结"></a>3.2 存储器层次结构概念小结</h2><p>存储器层次结构行之有效，因为较慢的设备比较快的设备更便宜，还因为程序偏向于展示局部性：</p><ul><li>利用时间局部性，同一数据对象可能会被多次使用</li><li>利用空间局部性，块通常包含有多个数据对象</li></ul><h1 id="4-高速缓存存储器"><a href="#4-高速缓存存储器" class="headerlink" title="4.高速缓存存储器"></a>4.高速缓存存储器</h1><p>L1 高速缓存的访问速度约为 4 个时钟周期，L2 约 10 个周期，L3 约 50 个周期。</p><p>当 CPU 执行一条读内存字 w 的指令，它首先向 L1 高速缓存请求这个字，如果 L1 没有就向 L2，依此而下。</p><h2 id="4-1-通用的高速缓存存储结构"><a href="#4-1-通用的高速缓存存储结构" class="headerlink" title="4.1 通用的高速缓存存储结构"></a>4.1 通用的高速缓存存储结构</h2><p>假设一个计算机系统中的存储器地址有 m 位，形成 M &#x3D;2^m 个不同的地址。m 个地址为划分为 <strong>t 个标记位</strong>，<strong>s 个组索引位</strong>，<strong>b 个块偏移位</strong>。</p><p>高速缓存被组织成 S&#x3D;2^s 个<strong>高速缓存组</strong>，每个组包含 E 个<strong>高速缓存行</strong>，<strong>每个行为一个数据块</strong>，包含一个<strong>有效位</strong>，t&#x3D;m-(b+s) 个<strong>标记位</strong>，和 B&#x3D;2^b 字节的<strong>数据块</strong>。高速缓存的容量 &#x3D; S * E * B。</p><p><strong>高速缓存可以通过简单地检查地址位来找到所请求的字。</strong></p><p>当 CPU 要从地址 A(由m个地址位组成) 处读一个字时：</p><ol><li>A 中的 s 个组索引位告诉我们在哪个组中</li><li>A 中的 t 个标记位告诉我们在这个组中的哪一行：当且仅当这一行设置了有效位并且标记位与 A 中的标记位匹配时，才说明这一行包含这个字。</li><li>A 中的 b 个块偏移位告诉我们在 B 个字节的数据块中的字偏移。</li></ol><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/c8140e57b956abeabe18f8c94a2d68df.png"><br><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/6bee7795fe8f9ea08c72151e3e46aece.png"></p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/B4KzO5S7sC8hNeg.png"></p><p><strong>理解</strong></p><p>使用高位做标记位，可以避免连续的块被映射到同一高速缓存组中。</p><p><strong>通过高速缓存从内存读字</strong></p><p>假设一个系统中只有 CPU、L1 高速缓存和主存。</p><p>当 CPU 执行一条从内存读字 w 的指令，如果 L1 有 w 的副本，就得到 L1 高速缓存命中；如果 L1 没有，就是缓存不命中。</p><p>当缓存不命中，L1 会向主存请求包含 w 的块(L1 中的块就是它的高速缓存行)的一个副本。当块从内存到达 L1，L1 将这个块存在它的一个高速缓存行里，然后从中抽取出字 w，并返回给 CPU。</p><p>高速缓存确定一个请求是否命中，然后抽取出被请求的字的过程分为三步:</p><ol><li><strong>组选择</strong></li><li><strong>行匹配</strong></li><li><strong>字抽取</strong></li></ol><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/mUPZ8qux5VJODks.png"></p><p><strong>高速缓存有以下几类：</strong></p><ol><li><strong>直接映射高速缓存</strong>：每个组只有一行，即 E&#x3D;1。</li><li><strong>组相联高速缓存</strong>：每个组有多行，1</li><li><strong>全相联高速缓存</strong>：只有一个组，E&#x3D;C&#x2F;B。</li></ol><h2 id="4-2-直接映射高速缓存"><a href="#4-2-直接映射高速缓存" class="headerlink" title="4.2 直接映射高速缓存"></a>4.2 直接映射高速缓存</h2><p>每个组只有一行（E&#x3D;1）的高速缓存被称为直接映射高速缓存</p><h3 id="1-直接映射高速缓存中的组选择"><a href="#1-直接映射高速缓存中的组选择" class="headerlink" title="1. 直接映射高速缓存中的组选择"></a><strong>1. 直接映射高速缓存中的组选择</strong></h3><p>在这一步中，高速缓存从<strong>w的地址中间抽取出s个组索引位</strong>。这些位被解释成一个对应于个组号的无符号整数。换句话来说，如果我们把高速缓存看成是一个关于<strong>组的一维数组</strong>，那么这些组索引位就是一个到这个数组的索引。图6-30展示了直接映射高速缓存的组选择是如何工作的。在这个例子中，组索引位00001,被解释为一个选择组1的整数索引。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/0a1561d9733806ede8ffd1198bd7e4a1.png"></p><h3 id="2-直接映射高速缓存中的行匹配"><a href="#2-直接映射高速缓存中的行匹配" class="headerlink" title="2. 直接映射高速缓存中的行匹配"></a><strong>2. 直接映射高速缓存中的行匹配</strong></h3><p>因为直接映射高速缓存每个组只有一行，只要这一行设置了有效位且标记位相匹配，就说明想要的字的副本确实存储在这一行中。</p><h3 id="3-直接映射高速缓存中的字抽取"><a href="#3-直接映射高速缓存中的字抽取" class="headerlink" title="3. 直接映射高速缓存中的字抽取"></a><strong>3. 直接映射高速缓存中的字抽取</strong></h3><p>从 w 的地址中抽取出 b 个块偏移位，块偏移位提供了所需的字的第一个字节的偏移。</p><h3 id="4-直接映射高速缓存不命中时的行替换"><a href="#4-直接映射高速缓存不命中时的行替换" class="headerlink" title="4. 直接映射高速缓存不命中时的行替换"></a><strong>4. 直接映射高速缓存不命中时的行替换</strong></h3><p>缓存不命中时需要从下一层取出被请求的块，然后将其存储在组索引位指示的组中的高速缓存行中。</p><p>因为直接映射高速缓存每个组只有一行，所以替换策略很简单：用新取出的行替换当前行。</p><h3 id="5-运行中的直接映射高速缓存"><a href="#5-运行中的直接映射高速缓存" class="headerlink" title="5. 运行中的直接映射高速缓存"></a><strong>5. 运行中的直接映射高速缓存</strong></h3><p>标记位和索引位连接起来标识了整个内存中的所有块，而高速缓存中的高速缓存组（块）是少于内存中的块数的。因此位于不同标记位，相同组索引位的块会映射到高速缓存中的同一个高速缓存组。</p><p>在一个高速缓存组中存储了哪个块，可以由标记位唯一地标识。</p><p>理解：对于主存中的整个地址空间，根据标记位不同将其分为了若干个部分，每个部分可以单独且完整地映射到高速缓存中，且刚好占满整个直接映射高速缓存。</p><h3 id="6-直接映射高速缓存中的冲突不命中"><a href="#6-直接映射高速缓存中的冲突不命中" class="headerlink" title="6. 直接映射高速缓存中的冲突不命中"></a><strong>6. 直接映射高速缓存中的冲突不命中</strong></h3><p>冲突不命中在直接映射高速缓存中很常见。因为每个组只有一行，不同标记位的块会映射到同一行，发生冲突不命中。</p><h3 id="7-综合-运行中的直接映射高速缓存"><a href="#7-综合-运行中的直接映射高速缓存" class="headerlink" title="7.综合:运行中的直接映射高速缓存"></a>7.综合:运行中的直接映射高速缓存</h3><p>​高速缓存用来选择组和标识行的机制极其简单。必须要这样，因为硬件必须在几个纳秒的时间内完成这些工作。不过，用这种方式来处理位对我们人来说是很令人困惑的。一个具体的例子能帮助我们解释清楚这个过程。假设我们有一个直接映射高速缓存，描述如下:<br>​(S，E，B，m)&#x3D;(4，1，2，4)<br>​换句话说，高速缓存有四个组，每个组一行，每个块2个字节，而地址是4位的。我们还假设每个字都是单字节的。当然，这样一些假设完全是不现实的，但是它们能使示例保持简单。</p><p>当你初学高速缓存时，列举出整个地址空间并划分好位是很有帮助的，就像我们在图6-32<br>中对4位的示例所做的那样。关于这个列举出的空间，有一些有趣的事情值得注意:</p><ul><li><strong>标记位和索引位连起来唯一地标识了存储器中的每个块。</strong>例如，块0是由地址0和1组成的，块1是由地址2和3组成的，块2是由地址4和5组成的，依此类推。</li><li>因为有8个存储器块，但是只有4个高速缓存组，多个块映射到同一个高速缓存组<br>(即它们有相同的组索引)。例如，块0和4都映射到组0，块1和5都映射到组1<br>等等。</li><li>映射到同一个高速缓存组的块由标记位唯一地标识。例如，块0的标记位为0，而块4的<br>标记位为 1，块1的标记位为 0，而块5的标记位为1，以此类推。</li></ul><h2 id="4-3-组相联高速缓存"><a href="#4-3-组相联高速缓存" class="headerlink" title="4.3 组相联高速缓存"></a>4.3 组相联高速缓存</h2><p>​直接映射高速缓存中冲突不命中造成的问题是源于每一个组只有一行，组相联高速缓存（set associative cache）放松了这条限制，所以每个组都保存了有多于一行的高速缓存</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/195812beb411de0249eadb687b64ebb7.png"></p><h3 id="1-组相联高速缓存中的组选择"><a href="#1-组相联高速缓存中的组选择" class="headerlink" title="1. 组相联高速缓存中的组选择"></a><strong>1. 组相联高速缓存中的组选择</strong></h3><p>与直接映射高速缓存一样，组索引位标识组。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/d645d63a307ce00384cfdd794fd18e96.png"></p><h3 id="2-组相联高速缓存中的行匹配"><a href="#2-组相联高速缓存中的行匹配" class="headerlink" title="2. 组相联高速缓存中的行匹配"></a><strong>2. 组相联高速缓存中的行匹配</strong></h3><p>组相联高速缓存中的行匹配更复杂，因为要<strong>检查多个行的标记位和有效位</strong>，以确定其中是否有所请求的字。</p><p>注意：组中的任意一行都可能包含映射到这个组的内存块，因此<strong>必须搜索组中的每一行</strong>，寻找一个<strong>有效</strong>且<strong>标记位</strong>相匹配的行。</p><h3 id="3-组相联高速缓存中的字抽取"><a href="#3-组相联高速缓存中的字抽取" class="headerlink" title="3. 组相联高速缓存中的字抽取"></a><strong>3. 组相联高速缓存中的字抽取</strong></h3><p>与直接映射高速缓存一样，块偏移位标识所请求的字的第一个字节。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/5f816eb8b4fb94ceae68b929622752bd.png"></p><h3 id="4-组相联高速缓存中不命中时的行替换"><a href="#4-组相联高速缓存中不命中时的行替换" class="headerlink" title="4. 组相联高速缓存中不命中时的行替换"></a><strong>4. 组相联高速缓存中不命中时的行替换</strong></h3><p><strong>几种替换策略</strong></p><ol><li><strong>随机替换策略：</strong>随机选择要替换的行</li><li><strong>最不常使用策略：</strong>替换在过去某个时间窗口内引用次数最少的一行。</li><li><strong>最近最少使用策略：</strong>替换最后一次访问时间最久远的那一行。</li></ol><p>因为存储器层次结构中越靠下，不命中开销越大，好的替换策略越重要。</p><h2 id="4-4-全相联高速缓存"><a href="#4-4-全相联高速缓存" class="headerlink" title="4.4 全相联高速缓存"></a>4.4 全相联高速缓存</h2><p>全相联高速缓存由一个包含所有高速缓存行 (E&#x3D;C&#x2F;B) 的组组成。</p><p>因为高速缓存电路必须并行地搜索不同组已找到相匹配的标记，所以全相联高速缓存只适合做小的高速缓存。</p><p>DRAM 主存采用了全相联高速缓存，但是因为它采用了虚拟内存系统，所以在进行类似行匹配的页查找时不需要对一个个页进行遍历。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/5db3034bf836fa8a8811fdc7c33a4c1f.png"></p><h3 id="1-全相联高速缓存中的组选择"><a href="#1-全相联高速缓存中的组选择" class="headerlink" title="1. 全相联高速缓存中的组选择"></a><strong>1. 全相联高速缓存中的组选择</strong></h3><p>全相联高速缓存中只有一个组，所以地址中没有组索引位，只有标记位和块偏移位。</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/310594023e2966d1704b4d3e079f5fd6.png"></p><h3 id="2-全相联高速缓存中的行匹配和字抽取"><a href="#2-全相联高速缓存中的行匹配和字抽取" class="headerlink" title="2. 全相联高速缓存中的行匹配和字抽取"></a><strong>2. 全相联高速缓存中的行匹配和字抽取</strong></h3><p>与组相联高速缓存一样。与组相联高速缓存的区别在于规模大小</p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/bb212df182d4beaec000f0e0781f37e0.png"></p><h2 id="4-5-有关写的问题"><a href="#4-5-有关写的问题" class="headerlink" title="4.5 有关写的问题"></a>4.5 有关写的问题</h2><p>写相比读要复杂一些。</p><p>写命中（写一个已经缓存了的字 w）的情况下，高速缓存更新了本层的 w 的副本后，如何处理低一层的副本有两种方法：</p><ol><li><strong>直写</strong>：立即将 w 的高速缓存块写回到低一层中。<ul><li>优点：简单</li><li>缺点：每次写都会占据总线流量</li></ul></li><li><strong>写回</strong>：尽可能地推迟更新，只有当替换算法要驱逐这个更新过的块时，才把它写到低一层中。<ul><li><strong>优点：利用了局部性，可以显著地减少总线流量。</strong></li><li>缺点：增加了复杂性。必须为每个高速缓存行维护一个额外的修改位，表明此行是否被修改过</li></ul></li></ol><p><strong>写不命中</strong>情况下的两种方法：</p><ol><li><p><strong>写分配</strong>：加载相应的低一层的块到本层中，然后更新这个高速缓存块。</p><ul><li><p>优点：利用写的空间局部性</p></li><li><p>缺点：每次不命中都会导致一个块从低一层传送到高速缓存</p></li></ul></li><li><p><strong>非写分配</strong>：避开高速缓存，直接把这个字写到低一层中</p></li></ol><p>直写一般与非写分配搭配，两者都更适用于存储器层次结构中的较高层。</p><p><strong>写回一般与写分配搭配，两者都更适用于存储器层次结构中的较低层，因为较低层的传送时间太长。</strong></p><p>因为硬件上复杂电路的实现越来越容易，所以现在使用写回和写分配越来越多。</p><h2 id="4-6-指令高速缓存和统一高速缓存"><a href="#4-6-指令高速缓存和统一高速缓存" class="headerlink" title="4.6 指令高速缓存和统一高速缓存"></a>4.6 指令高速缓存和统一高速缓存</h2><p><strong>三种高速缓存：</strong></p><ol><li><strong>i-cache：</strong>只保存指令的高速缓存。i-cache 通常是只读的，因此比较简单。</li><li><strong>d-cache：</strong>只保存程序数据的高速缓存。</li><li><strong>统一的高速缓存：</strong>既保存指令又保存程序数据.</li></ol><p>现代处理器一般包括独立的 i-cache 和 d-cache，其中两个原因如下：</p><ol><li>使用两个独立的高速缓存，CPU 可以同时读一个指令字和一个数据字。</li><li>可以确保数据访问不会与指令访问形成冲突不命中（不过可能会使容量不命中增加）。</li></ol><h2 id="4-7-高速缓存参数的性能影响"><a href="#4-7-高速缓存参数的性能影响" class="headerlink" title="4.7 高速缓存参数的性能影响"></a>4.7 高速缓存参数的性能影响</h2><p><strong>高速缓存的性能指标</strong></p><ol><li><strong>命中率：</strong>命中的内存引用比率。</li><li><strong>命中时间</strong>：从高速缓存传送一个字到 CPU 的时间，包括组选择、行确认和字抽取的实践。</li><li><strong>不命中处罚：</strong>不命中产生的额外时间消耗。</li></ol><p><strong>几个影响因素</strong></p><ol><li>高速缓存大小：较大的高速缓存可以提高命中率，但是会运行得更慢，即增加命中时间。</li><li>块大小：较大的块更能利用空间局部性以提高命中率。但是对于给定的总容量，块越大高速缓存行就越少，不利用利用时间局部性。较大的块因为传送时间更长，所以也会增加不命中处罚。现代处理系统的高速缓存块一般为 64 字节。</li><li>相联度：参数E的选择的影响（每个组中高速缓存行数）。E越高优点是：降低了高速缓存由于冲突不命中出现抖动的可能性。缺点：实现起来昂贵；增加命中时间；增加不命中处罚。</li><li>写策略：高速缓存越往下层，越可能使用写会而不是直写策略。</li></ol><h1 id="5-编写高速缓存友好的代码"><a href="#5-编写高速缓存友好的代码" class="headerlink" title="5.编写高速缓存友好的代码"></a>5.编写高速缓存友好的代码</h1><ol><li>让最常见的情况运行得快</li><li>在每个循环内部使缓存不命中数量小</li></ol><h1 id="6-综合：高速缓存对程序性能的影响"><a href="#6-综合：高速缓存对程序性能的影响" class="headerlink" title="6.综合：高速缓存对程序性能的影响"></a>6.综合：高速缓存对程序性能的影响</h1><p><strong>存储器山（memory mountain)</strong></p><p><img src="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/2018_1_28_1517112396218.jpg"></p><h1 id="6-7-小结"><a href="#6-7-小结" class="headerlink" title="6.7 小结"></a>6.7 小结</h1><p>程序员可以通过编写有良好空间和时间局部性的程序来显著地改进程序的运行时间。利用基于 SRAM 的高速缓存存储器特别重要。</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_5_优化</title>
    <link href="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/"/>
    <url>/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div class="note note-secondary">            <p>Don’t design bridges in ignorance of materials, and don’t design low-level software in ignorance of the underlying hardware. </p>          </div><p>​写程序最主要的目标就是使它在所有可能的情况下都正确工作.一个运行得很快但是给出错误结果的程序没有任何用处.程序员必须写出清晰简洁的代码，这样做不仅是为了程序员能够看懂代码，也是为了在检查代码和今后需要修改代码时，其他人能够读和理解代码.</p><p>编写高效程序一般需要以下理解几类活动：</p><ul><li>选择合适的算法和数据结构</li><li>编写出编译器能够有效优化以转换程高效可执行代码的源代码。（需要我们理解优化编译器的能力和局限性）</li><li>对于大型任务，将一个任务分成多份，这些部分可以在多核和多处理器的某种组合上并行地进行计算。（利用并行性）</li></ul><p>本章主要介绍第二项。具体而言:</p><ul><li>消除不必要的工作，例如: 不必要的函数调用、<strong>内存引用</strong>、条件测试。这些工作通常不依赖于执行环境的操作，有些也可以被编译器优化。</li><li>利用处理器提供的指令级并行能力，同时执行多条指令。</li><li>使用profiler，确定程序中的关键路径并加以优化</li></ul><h1 id="1-优化编译器的能力和局限性"><a href="#1-优化编译器的能力和局限性" class="headerlink" title="1.优化编译器的能力和局限性"></a>1.优化编译器的能力和局限性</h1><div class="note note-secondary">            <p>gcc -O3 -o output_filename source_file.c</p>          </div><hr><p>编译器的优化行为需要满足一条基本的约束: “优化后的代码的行为和优化前的代码的行为相同”。</p><ul><li>大多数编译器分析局限在单个函数内<ul><li>基于整个程序的分析开销过于昂贵</li><li>新的GCC能够进行单个文件内部的过程间的分析</li></ul></li><li>大多数分析基于静态信息</li></ul><p>​编译器必须很小心地对程序只使用安全的优化，也就是说对于程序可能遇到的所有可能的情况，在C语言标准提供的保证之下，优化后得到的程序和未优化的版本有一样的行为。限制编译器只进行安全的优化，消除了一些造成不希望的运行时行为的可能原因，但是这也意味着程序员必须花费更大的力气写出程序使编译器能够将之转换成有效机器代码。为了理解决定一种程序转换是否安全的难度，让我们来看看下面这两个过程:</p><p>​<img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-1.png"><br>​</p><p>​乍一看，这两个过程似乎有相同的行为。它们都是将存储在由指针yp指示的位置处的值两次加到指针 xp指示的位置处的值。另一方面，函数twiddle2效率更高一些。它只要求3次存储器引用(读<em>xp，读</em>yp，写<em>xp)，而twiddle1需要6次(2次读</em>xp，2次读<em>yp，2次写</em>xp)。因此，如果要编译器编译过程 twiddle1，我们会认为基于 twiddle2 执行的计算能产生更有效的代码。</p><p>不过，考虑 xp 等于 yp 的情况。此时，函数twiddle1 会执行下面的计算:<br>*Xp +&#x3D; <em>XP;<br>&#x2F;</em>[)puble value at xp *&#x2F;<br>*Xp +&#x3D; *XP;<br>&#x2F;*Double value at xp *&#x2F;<br>结果是 xp的值会增加4倍。另一方面，函数 twiddle2 会执行下面的计算:<br><em>xp+&#x3D;2**xp;&#x2F;</em> Triple value at xp *&#x2F;<br>结果是 xp的值会增加3倍。</p><p>​编译器不知道twiddle1会如何被调用，因此它必须假设参数 xp和 yp 可能会相等。因此，它不能产生 twiddle2 风格的代码作为 twiddle1的优化版本。这种两个指针可能指向同一个存储器位置的情况称为 **存储器别名使用(memory aliasing) **。在只执行安全的优化中，编译器必须假设不同的指针可能会指向存储器中同一个位置。</p><p><strong>解决</strong></p><ul><li>在内循环中使用本地变量进行accumulate以消除aliasing</li><li>通过声明为<code>double *restrict a</code>，告知编译器指针参数无法重叠</li></ul><hr><p>​第二个妨碍优化的因素是函数调用。作为一个示例，考虑下面这两个过程：</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-2-2.png"></p><p>最初看上去两个过程计算的都是相同的结果，但是func2只调用f1次，而func1调用f4次。以func1作为源时，会很想产生func2风格的代码。不过，考虑一下代码：</p><p>​<img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/e64c886d1ac1301ff44d50b03f32c702.png"></p><p>这个函数有个副作用—它修改了全局程序状态的一部分。改变调用它的次数会改变程序的行为。特别地，假设开始时全局变量counter都设置为0，对func1的调用会返回0+1+2+3&#x3D;6，而对func2的调用会返回4·0-0。大多数编译器不会试图判断一个函数是否没有副作用，因此任意函数都可能是优化的候选者，例如 func2中的做法。相反，编译器会假设最糟的情况，并保持所有的函数调用不变。</p><p><strong>解决</strong></p><ul><li>使用内联函数</li><li>编程者自己进行代码移动(code motion)</li></ul><hr><h1 id="2-表示程序性能参数-Cycles-per-Element-CPE"><a href="#2-表示程序性能参数-Cycles-per-Element-CPE" class="headerlink" title="2.表示程序性能参数: Cycles per Element, CPE"></a>2.表示程序性能参数: Cycles per Element, CPE</h1><p>​我们引人度量标准**每元素的周期数(CyclesPerElement，CPE)**，作为一种表示程序性能并指导我们改进代码的方法。CPE这种度量标准帮助我们在更详细的级别上理解迭代程序的循环性能。这样的度量标准对执行重复计算的程序来说是很适当的，例如处理图像中的像素，或是计算矩阵乘积中的元素。</p><p>​<strong>CPE</strong>: <strong>计算&#x2F;处理单个元素所需要的时钟周期，CPE值越小越好</strong>。当过程在一组元素上迭代时，该过程执行的时钟周期数和被处理的元素个数能够用一个线性函数来描述，这个线性函数的斜率就是CPE。</p><p>​以下通过最小2乘估计所得到的线性函数，如图所示：</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-2.png"></p><h1 id="3-基础优化"><a href="#3-基础优化" class="headerlink" title="3.基础优化"></a>3.基础优化</h1><p>我们对以下函数进行分析：</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/fac86485822c416f2e817bd923adb0b8.png"></p><p>这些是初始的CPE：<br><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/b53c6237d9908d60d15b8a371f763134.png"></p><h2 id="3-1代码移动"><a href="#3-1代码移动" class="headerlink" title="3.1代码移动"></a>3.1代码移动</h2><ul><li>code motion: 避免执行多次但是计算结果不变的操作，改用局部变量保存计算结果。</li><li>注意: 某些code motion优化是编译器能够发现的。</li></ul><p>具体而言，在循环判断语句中要避免每次都重复计算数组长度（消除循环的低效率）</p><p>​<img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/27197b6ea0d639415ced3655d8df2b17.png"><br>我们可以改成这样，接下来的CPE如图所示：</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-5.png"></p><p>这个优化是一类常见的优化的一个例子，称为代码移动(code motion)。这类优化包括识别要执行多次(例如在循环里)但是计算结果不会改变的计算。因而可以将计算移动到代码前面不会被多次求值的部分。在本例中，我们将对veclength的调用从循环内部移动到循环的前面。<br>优化编译器会试着进行代码移动。不幸的是，就像前面讨论过的那样，对于会改变在哪里调用函数或调用多少次的变换，编译器通常会非常小心。它们不能可靠地发现一个函数是否会有副<br>作用，因而假设函数会有副作用。例如，如果veclength有某种副作用，那么combine1和combine2可能就会有不同的行为。为了改进代码，程序员必须经常帮助编译器显式地完成代码的移动。</p><h2 id="3-2减少过程调用"><a href="#3-2减少过程调用" class="headerlink" title="3.2减少过程调用"></a>3.2减少过程调用</h2><p>注意到循环体内每次获取向量元素都要调用get_vex_element函数，考虑打破抽象，直接通过数组指针遍历：</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/b99719a50a081c6a41f7c1065d3b9d98.png"></p><p>然而结果性能没有显著增加，整数加法反而有所减小</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/cbdbefe26e79e7c381ca77aa09959342.png"></p><p>这说明过程调用的开销并非性能瓶颈。</p><h2 id="3-3消除不必要的内存引用"><a href="#3-3消除不必要的内存引用" class="headerlink" title="3.3消除不必要的内存引用"></a>3.3消除不必要的内存引用</h2><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5f8a09af7ce887442c14120767bde793.png"></p><p>通过分析上述汇编代码注意到循环体内每次从dest处读取值，同时也要写入dest处。考虑使用局部变量保存中间结果能够简化为:</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/ad21d529498631fa5e96635ea820ce07.png"></p><p>对应的c代码为：</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/e0546036f2ddb6f5d80187327a54987c.png"></p><p>时间拥有显著的提升，如下：<br><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-9.png"></p><h2 id="3-4其他优化"><a href="#3-4其他优化" class="headerlink" title="3.4其他优化"></a>3.4其他优化</h2><h3 id="3-4-1-reduction-in-strength"><a href="#3-4-1-reduction-in-strength" class="headerlink" title="3.4.1. reduction in strength"></a>3.4.1. reduction in strength</h3><p>使用开销较小的操作替代开销较大的操作。</p><p>例如，使用x &lt;&lt; 4替代16 * x</p><ul><li>Intel Nehalem: 整数乘法操作需要消耗3个CPU时钟周期，加法操作需要消耗1个CPU时钟周期</li></ul><h3 id="3-4-2-share-common-subexpressions"><a href="#3-4-2-share-common-subexpressions" class="headerlink" title="3.4.2. share common subexpressions"></a>3.4.2. share common subexpressions</h3><p>重用部分表达式，避免重复计算。例如下面通过单个局部变量的计算，减少了3次冗余计算</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs excel">// version <span class="hljs-number">1</span><br>up = val[(i-<span class="hljs-number">1</span>)*<span class="hljs-built_in">n</span> + j];<br>down = val[(i+<span class="hljs-number">1</span>)*<span class="hljs-built_in">n</span> + j];<br><span class="hljs-built_in">left</span> = val[i*<span class="hljs-built_in">n</span> + j-<span class="hljs-number">1</span>];<br><span class="hljs-built_in">right</span> = val[i*<span class="hljs-built_in">n</span> + j+<span class="hljs-number">1</span>];<br>// version <span class="hljs-number">2</span><br>long inj = i*<span class="hljs-built_in">n</span> + j;<br>up = val [inj - <span class="hljs-built_in">n</span>];<br>down = val[inj + <span class="hljs-built_in">n</span>];<br><span class="hljs-built_in">left</span> = val[inj - <span class="hljs-number">1</span>];<br><span class="hljs-built_in">right</span> = val[inj + <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><ul><li>GCC的<strong>O1</strong>优化会优化这一点</li></ul><h1 id="4-理解现代处理器"><a href="#4-理解现代处理器" class="headerlink" title="4.理解现代处理器"></a>4.理解现代处理器</h1><p>​到目前为止，我们运用的优化都不依赖于目标机器的任何特性。这些优化只是简单地降低了过程调用的开销，以及消除了一些重大的“妨碍优化的因素”，这些因素会给优化编译器造成困难。随着试图进一步提高性能，我们必须考虑利用处理器微体系结构的优化，也就是处理器用来执行指令的底层系统设计。<br>​为了理解改进性能的方法，我们需要理解现代处理器的微体系结构。在实际的处理器中，是同时对多条指令求值，这个现象称为<strong>指令级并行</strong>。在某些设计中，可以有100条或更多条指令在处理中。采用一些精细的机制来确保这种并行执行的行为，正好能获得机器级程序要求的顺序语义模型的效果。</p><p>我们会发现两种 <strong>以CPE为单位（周期每元素）</strong> 的延迟界限描述了程序的最大性能。</p><ul><li>当一系列操作必须按照严格顺序执行时，就会遇到**延迟界限(latencybound)**，因为在下一条指令开始之前，这条指令必须结束。当代码中的数据相关限制了处理器利用指令级并行的能力时，延迟界限能够限定程序性能。</li><li>**吞吐量界限(throughput bound)**刻画了处理器功能单元的原始计算能力。这个界限是程序性能的终极限制</li></ul><h2 id="4-1-整体操作-乱序-超标量"><a href="#4-1-整体操作-乱序-超标量" class="headerlink" title="4.1 整体操作: 乱序 + 超标量"></a>4.1 整体操作: 乱序 + 超标量</h2><p>现代处理器一般是<strong>乱序</strong>且是<strong>超标量</strong>的。</p><ul><li><strong>超标量</strong>: 通过实现多个硬件单元，可以在每个时钟周期执行多个操作</li><li><strong>乱序</strong>: 指令执行的顺序和二进制代码中的顺序不一定相同</li></ul><p>架构如下图所示<br>      <img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/e7832780740216a0dfbdcfea8e17c3ec.png" alt="中文版"></p><p>​</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-12.png" alt="英文版"></p><p>注意到，这种架构包含了两个单元</p><ul><li><p>指令控制单元</p><p>(ICU, Instruction Control Unit):</p><ul><li><p><strong>Fetch control</strong>: 包含分支预测的功能</p></li><li><p><strong>Instruction decode</strong>: 从icache中读取指令，然后翻译为一组微操作(x86)。例如，<code>addq %rax, %rdx</code>转换为单个微操作；<code>addq%rax, 8(%rdx)</code>转换为内存读取、加法和内存写入三个微操作。</p></li><li><p>Retirement Unit</p><p>: 退役单元控制寄存器文件，记录正在进行的处理并确保遵守顺序语义。指令译码时，和指令相关的信息入队，并一直保存在队列中，直到</p><ol><li>一条指令操作完成，且引起该指令运行的分支点也被认为预测正确，则该指令退役，对应的执行结果会更新寄存器</li><li>若某个分支点预测错误，则该指令会被flush，执行结果被丢弃</li></ol></li></ul></li><li><p>执行单元</p><p>(EU, Execution Unit): 接收来自ICU的微操作，分发到各个功能单元执行，每个时钟周期一般有多个操作。</p><ul><li><strong>Load和Store单元</strong>: 包含一个加法器计算地址，和dcache交互</li><li><strong>Branch单元</strong>: 预测会执行的指令执行结果会保存在EU内的队列中，若Branch单元计算发现预测错误，则会丢弃保存的执行结果，并通知<strong>Fetch Control</strong>单元，之后才能获取正确的指令</li><li><strong>其它各种功能单元</strong>: 通常一个算术运算单元能够执行多种运算，例如: 整数运算、浮点乘、整数乘、分支等等</li></ul></li></ul><p>注意: 为了避免分支预测错误，任何对程序寄存器的更新都只会在指令退役时发生。</p><p>为了加快传送某个单元操作结果到另一个单元的速度，执行单元之间也可以进行数据交换。一个常用技术被称为<strong>寄存器重命名</strong>。</p><ul><li>当条更新寄存器r的指令译码时，产生标记，得到一个指向该操作结果的唯一标识符。条目(r，t)被加入到一张表中，该表维护着每个程序寄存器r与会更新该寄存器的操作的标记t之间的关联。</li><li>当随后以寄存器r作为操作数的指令译码时，发送到执行单元的操作会包含t作为操作数源的值。当某个执行单元完成第一个操作时，会生成一个结果(v，t)，指明标记为t的操作产生值v。</li><li>所有等待t作为源的操作都能使用v作为源值，这就是一种形式的数据转发。</li></ul><p>通过这种机制，值可以直接从一个操作直接转发到另一个操作，就不需要先写入寄存器文件（<strong>隐含着需要分支判断正确，指令退役</strong>），之后再读出来。只要操作执行完成，无论预测失败与否，操作结果都可以转发并继续后续操作。注意: 该表只需维护写操作对应的寄存器，对于读操作，可以直接从寄存器文件获取这个操作数。</p><h2 id="4-2-功能单元的性能"><a href="#4-2-功能单元的性能" class="headerlink" title="4.2. 功能单元的性能"></a>4.2. 功能单元的性能</h2><p>Intel Core i7 Haswell CPU有下面8个功能单元:</p><ul><li>整数运算，浮点乘法，整数和浮点除法，分支</li><li>整数运算，浮点加法，整数乘，浮点乘</li><li>load，地址计算</li><li>load，地址计算</li><li>store</li><li>整数运算</li><li>整数运算，分支</li><li>store、store地址计算</li></ul><p>它们的性能参数分别如下</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-13.png"></p><ul><li><strong>latency</strong>: 完成运算需要的总时间</li><li><strong>issue</strong>: 两个连续同类型的运算的最小发射间隔时钟周期数</li><li><strong>capacity</strong>: 能够执行该功能单元的数量</li></ul><p>从以上性能参数我们能够分析得到下面这些结论</p><ul><li>乘法和加法的issue时间均为1，然而单个乘法操作以及浮点加法操作的latency均大于1，这是利用了流水线技术。issue时间为1的功能单元被称为<strong>完全流水线化（fully pipelined）</strong>。例如，浮点浮点加法的三个流水线级分别为<strong>处理指数</strong>，<strong>小数相加</strong>，<strong>结果舍入</strong>。</li><li>除法的latency和issue时间相同。这意味着每开始一次除法操作都需要首先完成上一次的除法操作。</li></ul><p><strong>功能单元的最大吞吐量</strong>: 对一个容量为C，发射时间为I的功能单元，它的最大吞吐量为C&#x2F;IC&#x2F;I。</p><p>对于不同的功能单元而言，它们的两个<strong>CPE界限（即单位是周期每元素）</strong>: 延迟界限（必须顺序执行时的CPE值）和吞吐量界限分别为:<br><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-14.png"> </p><h2 id="4-2处理器操作的抽象模型"><a href="#4-2处理器操作的抽象模型" class="headerlink" title="4.2处理器操作的抽象模型"></a>4.2处理器操作的抽象模型</h2><p>​我们会使用程序的**数据流(data-fow)<strong>表示，作为分析在现代处理器上执行的机器级程序性能的一个工具，这是一种图形化的表示方法，展现了不同操作之间的数据相关是如何限制它们的执行顺序的。这种限制形成了图中的</strong>关键路径(critical path)**，这是执行一组机器指令所需时钟周期数的一个下界。</p><p>​在继续技术细节之前，检査一下对函数combine4所获得的 CPE测量值是很有帮助的，到目前为止 combine4是最快的代码:</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-15.png"></p><p>注意到除了整数加法操作，其它操作的CPE值和延迟界限相同。事实上，此时整数加法中的<strong>数据相关</strong>构成了程序的关键路径。</p><p>可以通过数据流图研究这种相关性。对于内循环的汇编代码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">.L25:<br> vmulsd (<span class="hljs-variable">%rdx</span>), <span class="hljs-variable">%xmm0</span>, <span class="hljs-variable">%xmm0</span>   <span class="hljs-comment"># multiply acc by data[i]</span><br> addq   <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdx</span>               <span class="hljs-comment"># increment data+i</span><br> cmpq   <span class="hljs-variable">%rax</span>, <span class="hljs-variable">%rdx</span>             <span class="hljs-comment"># %rdx - %rax</span><br> jne    .L25<br></code></pre></td></tr></table></figure><p>可以画出如下的数据流图</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-16.png"></p><p>注意到<code>vmulsd</code>指令被翻译成两个操作: load和mul。</p><p>循环中使用的寄存器能够被分成四类:</p><ul><li>只读:这些寄存器只用作源值，可以作为数据，也可以用来计算存储器地址，但是在循环中它们是不会被修改的。循环combine4的只读寄存器是rax和rbp。</li><li>只写:这些寄存器作为数据传送操作的目的。在本循环中没有这样的寄存器。</li><li>局部:这些寄存器在循环内部被修改和使用，迭代与迭代之间不相关。在这个循环中，条件码寄存器就是例子:cmp操作会修改它们，然后jg操作会使用它们，不过这种相关是在单次迭代之内的。</li><li>循环:对于循环来说，这些寄存器既作为源值，又作为目的，一次选代中产生的值会在另一次迭代中用到。可以看到，%rdx和xmm0是combine4的循环寄存器，对应于程序值i和acc。</li></ul><p>接下来可以看到，<strong>循环寄存器</strong>之间的操作链决定了限制性能的数据相关。</p><p>进一步对数据流图进行优化，消除不直接影响数据流的操作（即cmp和jne）以及循环寄存器后有：<br><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-17.png"><br>上图右侧的数据流表示的是单次迭代中进行的操作。当绘制多次迭代可以注意到<br><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-18.png"></p><p>注意到程序存在两条数据相关链:</p><ul><li>mul操作对%xmm0的修改</li><li>add操作对%rdx的修改</li></ul><p>在单精度浮点乘法条件下，由于mul操作的执行需要5个时钟周期，而数据依赖的情况下迭代n次就需要5n个时钟周期。加法操作需要1个时钟周期，因此n次迭代整体仅需要n个时钟周期。所以<strong>关键路径为mul操作的数据依赖</strong>。</p><p><strong>接下来我们希望提高重新调整操作的结构，增强指令级并行。具体而言，我们需要对程序做变换，使得唯一的限制因素是吞吐量界限</strong>。</p><h1 id="5-程序变换：循环展开"><a href="#5-程序变换：循环展开" class="headerlink" title="5.程序变换：循环展开"></a>5.程序变换：循环展开</h1><p><strong>循环展开</strong>: 通过增加一次迭代内的处理元素数，减少迭代次数。</p><ul><li><strong>减少循环开销</strong>: 减少不直接有助于得到程序结果的操作的数量，如条件判断</li><li><strong>缩短关键路径</strong>: 提供了减少关键路径上操作数量的方法</li></ul><p>修改后k&#x3D;2后的代码（每次进行操作k次）：2x1循环</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/98f982bce14c452f71c571fcf601884b.png"></p><p>对应获得的性能为：<br><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-20.png"></p><p><strong>注意到仍没有超过延迟界限，这是因为关键路径上仍有n个mul操作，仅是将循环开销减少了一半。</strong></p><h1 id="6-提高并行性"><a href="#6-提高并行性" class="headerlink" title="6. 提高并行性"></a>6. 提高并行性</h1><p>注意到，虽然程序性能受到运算单元的延迟限制，但是加法和乘法运算单元能够完全流水线化，然而循环展开并不能利用这种能力。<strong>本质原因在于我们使用单个累计变量，仅在该变量上一个值计算完成后，才能累积计算下一个值。</strong></p><h2 id="6-1-程序变换：提高并行性"><a href="#6-1-程序变换：提高并行性" class="headerlink" title="6.1 程序变换：提高并行性"></a>6.1 程序变换：提高并行性</h2><p>对于一个可交换且可结合的合并运算，我们可以将一组合并运算分割成两个或多个部分，并在最后合并结果以提高性能。</p><p>例如使用2x2循环展开的代码如下：<br>                    <img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/b15da5717ca38d4c29177d86ad88585a.png"></p><p>此时可以做到两路并行乘法操作。对应的性能结果为：<br><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-23.png"></p><p>注意到几乎所有操作都改进了大约一倍。</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-24.png"></p><p>由于每个关键路径只包括1&#x2F;2个mul操作，因此CPE值减小为原来的1&#x2F;2。</p><p>考虑上述累计变量变换的一般形式，将循环展开为k次，同时并行使用k个循环变量。注意到当k&#x3D;10时，几乎能达到吞吐量界限。这是因为<strong>为了达到吞吐量界限，通常需要所有流水线都是满的，对延迟为L，容量为C的操作而言，就需要循环展开因子k &gt;&#x3D; L*C</strong>。</p><p>例如，浮点乘的L&#x3D;5，C&#x3D;2，则k需要大于等于10。而浮点加有L&#x3D;3，C&#x3D;1，因此k大于等于3就可以达到最大吞吐量。</p><h2 id="6-2-程序变换-重新结合变换"><a href="#6-2-程序变换-重新结合变换" class="headerlink" title="6.2. 程序变换: 重新结合变换"></a>6.2. 程序变换: 重新结合变换</h2><p>重新结合变换: 变换累积变量和向量元素的合并顺序。</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/bafa7e71320a3cdec1d53bb736ebca0e.png"><br>上面的变换被称为2x1a unrolling。步长为2，单个累积变量。</p><p>通过变换合并顺序，关键路径也减小了一半。</p><p>5-28说明了 combine7内循环的代码(对于单精度乘积的情况)是如何被译码成操作，以及得到的数据相关。我们看到，来自于movss和第一个mulss 指令的 load 操作从存储器中加载向量元素i和 i+1，第一个 mul操作把它们乘起来。然后，第二个mul操作把这个结果乘以累积值 acc。图 5-29 给出了我们如何对图 5-28的操作进行重新排列、优化和抽象，得到表示一次迭代中数据相关的模板(见图5-29b)。对于combine5和combine7的模板，有两个 1oad和两个 mu1 操作，但是只有一个mu1 操作形成了循环寄存器间的数据相关链。然后，把这个模板复制 n&#x2F;2次，给出了n个向量元素相乘所执行的计算(图5-30)，我们可以看到关键路径上只有n&#x2F;2 个操作。每次迭代内的第一个乘法都不需要等待前一次迭代的累积值就可以执行。因此,最小可能的 CPE减少了2倍。当我们增加k值时，每次迭代中关键路径上一直只有一个操作。</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/cb7603e5b8919c268d2a3f89713f78d4.png"><br>得到的性能如表所示：<br><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-28.png"></p><p>注意到和2x2 loop unrolling相比，2x1a计算的CPE大致相同，但是2x2 loop unrolling能够并行利用两个load单元。</p><p>注: <strong>由于浮点计算的不可结合性，编译器通常不会使用这些方式对浮点运算进行优化。</strong></p><h2 id="6-3-使用SIMD指令"><a href="#6-3-使用SIMD指令" class="headerlink" title="6.3. 使用SIMD指令"></a>6.3. 使用SIMD指令</h2><p>通过使用AVX指令，可以进一步提高并行性。</p><p><img src="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/5-30.png"></p><h2 id="6-3-小结"><a href="#6-3-小结" class="headerlink" title="6.3. 小结"></a>6.3. 小结</h2><p>注意到，功能单元的吞吐量界限是一个极限下界。假设程序要执行n个操作，而硬件共有c个功能单元，且每个单元的发射时间为i，则程序至少需要（n&#x2F;c）∗i个时钟周期。</p><h1 id="7-性能优化的限制因素"><a href="#7-性能优化的限制因素" class="headerlink" title="7. 性能优化的限制因素"></a>7. 性能优化的限制因素</h1><ol><li><p>寄存器溢出</p><ul><li>循环并行性受汇编代码（通用寄存器资源）描述计算能力的限制。因此循环展开无法做到无限扩展，事实上之前的例子当从10x10扩展到20x20时，由于寄存器溢出，程序变量值会被存储在栈中，因而导致性能下降。</li></ul></li><li><p>分支预测与预测惩罚</p><ul><li><p>原则1:</p><p>不要过分关心可预测的分支。</p><ul><li>之前的示例中将每次迭代的元素获取从<code>get_vec_element()</code>中拿出来，然而性能基本没有变化，这说明<strong>分支在高度可预测的情况下，边界检查几乎不会影响性能</strong>。</li><li>注意: 这里说的是<strong>可预测的分支</strong>！！！对于难以预测的分支，性能还是会有大的变化。</li><li>分支预测失败，有大约20个周期的惩罚。</li></ul></li><li><p>原则2:</p><p>书写适合用条件传送实现的代码。</p><ul><li>使用条件传送替换传统的基于分支跳转的实现: 计算分支两个方向上的值，然后根据条件使用某一个方向上的值。</li></ul></li></ul></li></ol><p>GCC倾向于将如下<strong>函数式</strong>风格的代码转化为使用条件传送指令，该风格倾向于用条件操作来计算值，然后用值更新程序状态。相反，<strong>命令式</strong>风格倾向于根据条件语句有选择地更新程序状态。一个例子如下:</p><p><strong>命令式</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*Rearrange two vectors so that for each i, bli]&gt;= a[i] */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">minmax1</span><span class="hljs-params">(<span class="hljs-type">long</span> all, <span class="hljs-type">long</span> b[], <span class="hljs-type">long</span> n)</span></span>&#123;<br><span class="hljs-type">long</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br><span class="hljs-keyword">if</span>(a[i]&gt; b[i])&#123;<br><span class="hljs-type">long</span> t= ali];<br>a[i]= b[i];<br>b[i] = t;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>函数式</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*Rearrange two vectors so that for each i, bli]&gt;= a[i] */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">minmax1</span><span class="hljs-params">(<span class="hljs-type">long</span> all, <span class="hljs-type">long</span> b[], <span class="hljs-type">long</span> n)</span></span>&#123;<br><span class="hljs-type">long</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br><span class="hljs-type">long</span> min = ali]&lt; b[i]? a[i] : b[i];<br><span class="hljs-type">long</span> max = ali]&lt; b[i] ? b[i] : a[i];<br>a[i]= min;<br>b[i]= max;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
