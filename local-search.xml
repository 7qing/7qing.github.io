<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux内核设计与实现(1)</title>
    <link href="/2024/09/20/Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-1/"/>
    <url>/2024/09/20/Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-1/</url>
    
    <content type="html"><![CDATA[<p>我们主要从这五方面入手，了解linux内核是如何运行的：</p><p><img src="Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(1)/%E5%86%85%E6%A0%B8%E7%BB%93%E6%9E%84.png" alt="内核结构"></p><ol><li><p>进程管理</p></li><li><p>内存管理</p></li><li><p>文件系统</p></li><li><p>设备驱动程序</p></li><li><p>网络</p></li></ol><h1>第 2 章 从内核出发</h1><p>​可以从<a href="https://www.kernel.org/">内核网站</a>中下载Linux的内核源码。可以使用<code>uname -r</code>查看内核release版本号。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>t.kernel.org<span class="hljs-regexp">/pub/</span>scm<span class="hljs-regexp">/linux/</span>kernel<span class="hljs-regexp">/git/</span>torvalds/linux-<span class="hljs-number">2.6</span>.git<br><span class="hljs-comment">#更新到最新版本</span><br>git pull<br></code></pre></td></tr></table></figure><p>也可以直接使用如下命令直接clone最新版本。然后使用<code>git checkout</code>来切换分支</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>t.kernel.org<span class="hljs-regexp">/pub/</span>scm<span class="hljs-regexp">/linux/</span>kernel<span class="hljs-regexp">/git/</span>stable/linux-stable.git<br></code></pre></td></tr></table></figure><h2 id="2-1-使用补丁">2.1 使用补丁</h2><p>​Linux中一般使用补丁的形式对发布的代码进行修改</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">patch</span> -p1 &lt; .../<span class="hljs-keyword">patch</span>-x.y.z<br></code></pre></td></tr></table></figure><h2 id="2-2-内核代码树">2.2 内核代码树</h2><p>​内核源码树由很多目录组成，而大多数目录又包括更多的子目录，源码树的根目录以及子目录如下表所表示：</p><table><thead><tr><th style="text-align:left">目录</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">arch</td><td style="text-align:left">特定体系结构的源码如：ARM，AMD64</td></tr><tr><td style="text-align:left">block</td><td style="text-align:left">块设备I/O层</td></tr><tr><td style="text-align:left">crypto</td><td style="text-align:left">加密API</td></tr><tr><td style="text-align:left">Documentation</td><td style="text-align:left">内核源码文档</td></tr><tr><td style="text-align:left">drivers</td><td style="text-align:left">设备驱动程序</td></tr><tr><td style="text-align:left">firmware</td><td style="text-align:left">使用某些驱动程序而需要的设备的固件</td></tr><tr><td style="text-align:left">fs</td><td style="text-align:left">VFS和各种文件系统</td></tr><tr><td style="text-align:left">include</td><td style="text-align:left">内核头文件</td></tr><tr><td style="text-align:left">init</td><td style="text-align:left">内核引导和初始爱护</td></tr><tr><td style="text-align:left">ipc</td><td style="text-align:left">进程间通信代码</td></tr><tr><td style="text-align:left">kernel</td><td style="text-align:left">调度程序核心子系统</td></tr><tr><td style="text-align:left">lib</td><td style="text-align:left">通用内核函数</td></tr><tr><td style="text-align:left">mm</td><td style="text-align:left">内存管理子系统和VM</td></tr><tr><td style="text-align:left">net</td><td style="text-align:left">网络子系统</td></tr><tr><td style="text-align:left">samples</td><td style="text-align:left">示例，示范代码</td></tr><tr><td style="text-align:left">scripts</td><td style="text-align:left">编译内核所用的脚本</td></tr><tr><td style="text-align:left">security</td><td style="text-align:left">Linux安全模块</td></tr><tr><td style="text-align:left">sound</td><td style="text-align:left">语音子系统</td></tr><tr><td style="text-align:left">usr</td><td style="text-align:left">早期用户空间代码(所谓的initramfs)</td></tr><tr><td style="text-align:left">tools</td><td style="text-align:left">在Linux开发中有用的工具</td></tr><tr><td style="text-align:left">virt</td><td style="text-align:left">虚拟化基础结构</td></tr></tbody></table><p>COPYING是内个许可证，CREDITS是内核开发者列表。MAINTAINERS是维护者列表</p><h2 id="2-3-内核结构">2.3 内核结构</h2><p>按功能，Linux内核可以划分为5个不同的部分，每一部分处理一项明确的功能，同时又向其他内核组件提供这项功能。这种结构也反映到内核的源代码上——这5部分都形成了自己的子树。</p><p><img src="Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(1)/%E5%86%85%E6%A0%B8%E7%BB%93%E6%9E%84.png" alt="内核结构"></p><ol><li><p>进程管理</p></li><li><p>内存管理</p></li><li><p>文件系统</p></li><li><p>设备驱动程序</p></li><li><p>网络</p></li></ol><h2 id="2-4-编译内核">2.4 编译内核</h2><p>一般使用make命令来进行</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">#使用命令行选项</span><br><br><span class="hljs-built_in">make</span> menuconfig<br><span class="hljs-meta">#基于gtk+的图形工具</span><br><br><span class="hljs-built_in">make</span> gconfig<br><span class="hljs-meta">#使用默认体系结构配置</span><br><br><span class="hljs-built_in">make</span> defconfig<br></code></pre></td></tr></table></figure><p>也可以使用如下的命令，将电脑中已有的配置文件作为编译配置选项</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#将配置文件内容，添加到.config文件中</span><br><br>zcat <span class="hljs-string">/proc/config.gz</span> &gt; <span class="hljs-string">.config</span><br><span class="hljs-comment">#使用配置文件编译</span><br><br>make oldconfig<br><br>make 进行编译<br></code></pre></td></tr></table></figure><h3 id="2-4-2-减少编译的垃圾信息">2.4.2 减少编译的垃圾信息</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">#使用如下命令，进行垃圾信息重定向到文件</span><br><br><span class="hljs-built_in">make</span> &gt; .. /detritus<br><span class="hljs-meta">#直接扔掉信息</span><br><br><span class="hljs-built_in">make</span> &gt; /dev/<span class="hljs-built_in">null</span><br></code></pre></td></tr></table></figure><p>接下来运行如下命令，进行内核模块的安装</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make modules_install</span><br></code></pre></td></tr></table></figure><h2 id="2-5-内核开发的特点">2.5 内核开发的特点</h2><ul><li>内核编程时既不能访问c库也不能访问标准的c头文件:<ul><li>完整的C库太大太低效，因此不方便使用</li><li>基本头文件在顶级目录下的include目录中，体系结构相关的头文件在arch//include/asm目录下使用<code>#include &lt;asm/ioctl.h&gt;</code>进行头文件的包含。</li></ul></li><li>内核编程时必须使用GNU C(GNU C 、ANSI C、标准C、标准c++区别和联系)<ul><li>GNU C 支持inline内联函数</li><li>使用<code>asm volatile(&quot;rdtsc&quot;:&quot;=a&quot; (low),&quot;=d&quot; (high))</code>嵌入汇编代码</li></ul></li><li>内核编程时缺乏像用户空间那样的内存保护机制<ul><li>用户进程中进行非法内存访问，内核会发现错误并发送SIGSEGV信号，结束整个进程。内核自己访问非法内存往往会造成内核死去。</li><li>内核中的内存都不分页，每用掉一个字节，物理内存就减少一个字节</li></ul></li><li>内核编程时难以执行浮点运算<ul><li>用户空间中的浮点操作，内核会完成浮点数到整数的转换。因此内核并不能完美的支持浮点数操作，因为它本身不能陷入。</li></ul></li><li>内核给每个进程只有一个很小的定长堆栈<ul><li>内核栈的准确大小随着体系结构而改变，内核栈的大小是两页，32位是8KB,64位是16KB。</li></ul></li><li>内核支持异步中断、抢占和SMP(対称多处理器结构)，因此必须时刻注意同步和并发<ul><li>同时在大于两核处理器上执行内核代码，可能会同时访问共享的同一个资源</li><li>中断是异步到来的，完全不顾及当前正在执行的代码</li><li>内核可抢占，没有保护，可能导致几段代码同时访问相同的资源，通常使用自旋锁和信号量来解决</li></ul></li><li>要仔细考虑可移植的特性<ul><li>注意保持字节序、64位对齐、不假定字长和页面长度等一系列准则等</li></ul></li></ul><h1>第 3 章 进程管理</h1><h3 id="3-1-进程">3.1 进程</h3><p><strong>每一个线程都拥有一个独立的程序计数器、进程栈、一组进程寄存器</strong>。<em>内核调度的对象是线程，而不是进程</em> (<a href="https://www.jianshu.com/p/8ff15d3a1dfd">从进程和线程了解浏览器的工作原理</a>)；在Linux中对线程和进程的区分度不是很大。线程之间共享虚拟内存，但是每个线程都拥有自己独立的虚拟处理器。每个进程都有自己的用户栈和内核栈，陷入内核时，将用户栈寄存器压入内核栈；出去时，重新返回用户栈寄存器，并清空内核栈–<strong>内核栈总是空的</strong></p>]]></content>
    
    
    <categories>
      
      <category>Linux内核设计与实现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>Linux</tag>
      
      <tag>C/C++</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_12_并发编程</title>
    <link href="/2024/09/05/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/09/05/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​如果逻辑控制流在时间上重叠，那么它们就是<strong>并发的(concurent)<strong>这种常见的现象称为</strong>并发(concurrency)</strong>，出现在订算机系统的许多不同层面上。硬件异常处理程序、进程和 Unix 信号处理程序都是大家很熟悉的例子。</p><p>​到目前为止，我们主要将并发看做是一种操作系统内核用来运行多个应用程序的机制。但是，并发不仅仅局限于内核。它也可以在应用程序中扮演重要角色。例如，我们已经看到Unix信号处理程序如何允许应用响应异步事件，例如用户键人ctrl-c，或者程序访问虚拟存储器的-个未定义的区域。应用级并发在其他情况下也是很有用的:</p><p><strong>并发和并行</strong></p><ul><li>并发：Concurrency，只要时间上重叠就算并发，可以是单处理器交替处理</li><li>并行：Parallel，属于并发的一种特殊情况（真子集），多核/多 CPU 同时处理</li></ul><p>​使用应用级并发的应用程序称为<strong>并发程序(concurrent program)</strong>。现代操作系统提供了三种基本的构造并发程序的方法:</p><ul><li>进程。用这种方法，每个逻辑控制流都是一个进程，由<strong>内核来调度和维护</strong>。因为进程有独立的虚拟地址空间，想要和其他流通信，控制流必须使用某种显式的**进程间通信(interprocess communication，IPC)**机制。</li><li>IO多路复用。在这种形式的并发编程中，应用程序在<strong>一个进程</strong>的上下文中显式地调度它们自己的逻辑流。逻辑流被模型化为<strong>状态机</strong>，数据到达文件描述符后，主程序显式地从一个状态转换到另一个状态。因为程序是一个单独的进程，所以所有的流都共享同一个地址空间。</li><li>线程。线程是运行在一个<strong>单一进程</strong>上下文中的逻辑流，由内核进行调度。你可以把线程看成是其他两种方式的混合体，像进程流一样由<strong>内核进行调度</strong>，而像O多路复用流一样共享同一个虚拟地址空间。</li></ul><h1>1.基于进程的并发编程</h1><p>​构造并发程序最简单的方法就是用进程。个构造并发服务器的自然方法就是，在父进程中接受客户端连接请求，然后创建一个新的子进程来为每个新客户端提供服务。</p><p>​为了了解这是如何工作的，假设我们有两个客户端和一个服务器，服务器正在监听一个监听描述符(比如描述符3)上的连接请求。现在假设服务器接受了客户端1的连接请求并返回一个已连接描述符(比如描述符 4)，如下图所示：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/30a6f3e35367485df9dd8980b2ecb0a0.png" alt=""></p><p>​在接受连接请求之后，服务器派生一个子进程，这个子进程获得服务器描述符表的完整拷贝。子进程关闭它的拷贝中的监听描述符3，而父进程关闭它的已连接描述符4的拷贝，因为不再需要这些描述符了。这就得到了下图中的状态：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5b792b7814f72fc2aa3b43533509d4a4.png" alt=""></p><p>​其中子进程正忙于为客户端提供服务。因为父、子进程中的已连接描述符都指向同一个文件表表项，**所以父进程关闭它的已连接描述符的拷贝是至关重要的。**否则，将永远不会释放已连接描述符4的文件表条目，<strong>而且由此引起的存储器泄漏将最终消耗尽可用的存储器</strong>，使系统崩溃。</p><p>​现在，假设在父进程为客户端1创建了子进程之后，它接受一个新的客户端2的连接请求,并返回一个新的已连接描述符(比如描述符5)，如下图所示：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/a2bfed02b89e93218f0192c0ef46f32c.png" alt=""></p><p>​然后，父进程又派生另一个子进程，这个子进程用已连接描述符5为它的客户端提供服务，如下图所示：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/27b515bd1bcb3880359c4813b31a2b96.png" alt=""></p><p>​此时，父进程正在等待下一个连接请求，而两个子进程正在并发地为它们各自的客户端提供服务。</p><p>​</p><h2 id="1-1-基础进程的并发服务器">1.1 基础进程的并发服务器</h2><p>​示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(waitpid(<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, WNOHANG) &gt; <span class="hljs-number">0</span>) <br>        ;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    signal(SIGCHLD, sigchld_handler); <span class="hljs-comment">// 回收僵死子进程资源</span><br>    listenfd = open_listenfd();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      connfd = accept(...);<br>      <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 子进程</span><br>        close(listenfd); <span class="hljs-comment">// 关闭父进程 fd，不关闭问题不大，子进程结束时自动关闭</span><br>        process(connfd);<br>        close(connfd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      &#125;<br>      close(connfd); <span class="hljs-comment">// 父进程关闭 fd。重要！否则永远不会释放 connfd 连接描述符，导致内存泄漏！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>首先，通常服务器会运行很长的时间，所以我们必须要包括一个SIGCHLD处理程序，来回收僵死(zombie)子进程的资源(第4~9行)，因为当SIGCHLD处理程序执行时， SIGCHLD信号是阻塞的。而Unix信号是不排队的，所以SIGCHLD处理程序必须准备好回收多个死子进程的资源。</li><li>其次，父子进程必须关闭它们各自的connfd(分别为第 33 行和第 30行)拷贝。就像我们已经提到过的，这对父进程而言尤为重要，它必须关闭它的已连接描述符，以避免存储器泄漏。</li><li>最后，因为套接字的文件表表项中的引用计数，直到父子进程的connfd都关闭了，到客户端的连接才会终止。</li></ul><h2 id="1-2-关于进程的优劣">1.2 关于进程的优劣</h2><p>​对于在父、子进程间共享状态信息，进程有一个非常清晰的模型:共享文件表，但是不共享用户地址空间。进程有独立的地址空间既是优点也是缺点。这样一来，一个进程不可能不小心覆盖另一个进程的虚拟存储器，这就消除了许多令人迷惑的错误–这是一个明显的优点。</p><p>​另一方面，独立的地址空间使得进程共享状态信息变得更加困难。为了共享信息，它们必须使用显式的IPC(进程间通信)机制。基于进程的设计的另一个缺点是，它们往往比较慢，因为进程控制和 IPC 的开销很高。</p><h1>2.基础I/O多路复用的并发编程</h1><p>​假设要求你编写一个 echo 服务器，它也能对用户从标准输入键人的交互命令做出响应。在这种情况下，服务器必须响应两个互相独立的I/0事件:</p><ol><li>网络客户端发起连接请求，</li><li>用户在键盘上键人命令行。</li></ol><p>​我们先等待哪个事件呢?没有哪个选择是理想的。如果在accept 中等待一个连接请求，我们就不能响应输人的命令。类似地，如果在 read 中等待一个输人命令，我们就不能响应任何连接请求。</p><p>​针对这种困境的一个解决办法就是<strong>I/O多路复用(Omultiplexing)技术</strong>。基本的思路就是使用 select 函数，要求内核挂起进程，只有在一个或多个IO事件发生后，才将控制返回给应用程序，就像在下面的示例中一样:</p><ul><li>当集合 {0，4}中任意描述符准备好读时返回。</li><li>当集合{1，2，7}中任意描述符准备好写时返回，</li><li>如果在等待一个 UO 事件发生时过了 152.13秒，就超时</li></ul><p>​通过 <code>select</code> 函数，等待一组描述符 ready。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/select.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, fd_set *fdset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)</span>; <span class="hljs-comment">// 返回 ready fd 的个数，出错返回 -1</span><br><br>FD_ZERO(fd_set *fdset);<br>FD_CLR(<span class="hljs-type">int</span> fd, fd_set *fdset);<br>FD_SET(<span class="hljs-type">int</span> fd, fd_set *fdset);<br>FD_ISSET(<span class="hljs-type">int</span> fd, fd_set *fdset)<br></code></pre></td></tr></table></figure><p>​select 函数处理类型为 fd_set 的集合，也叫做描述符集合。逻辑上，我们将描述符集合看成一个大小为 n 的位向量（在 2.1 节中介绍过）：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>b</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo>⋯</mo><mo separator="true">,</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">b_{n−1},⋯,b_1,b_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>每个位b_k对应于描述符 k。当且仅当b_k=1，描述符 k 才表明是描述符集合的一个元素。只允许你对描述符集合做三件事：</p><ol><li>分配它们.</li><li>将一个此种类型的变量赋值给另一个变量.</li><li>用 FD_ZERO、FD_SET、FD_CLR 和 FD_ISSET 宏来修改和检查它们.</li></ol><p>​针对我们的目的，select 函数有两个输入：一个称为<strong>读集合</strong>的描述符集合（fdset）和该读集合的基数（n）（实际上是任何描述符集合的最大基数）。select 函数会一直阻塞，直到读集合中至少有一个描述符准备好可以读。当且仅当一个从该描述符读取一个字节的请求不会阻塞时，描述符 k 就表示<strong>准备好可以读</strong>了。select 有一个副作用，它修改参数 fdset 指向的 fd_set，指明读集合的一个子集，称为<strong>准备好集合</strong>（ready set），这个集合是由读集合中准备好可以读了的描述符组成的。该函数返回的值指明了准备好集合的基数。注意，由于这个副作用，我们必须在每次调用 select 时都更新读集合。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">echo</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">command</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> listenfd, connfd;<br>    <span class="hljs-type">socklen_t</span> clientlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span><br>    fd_set read_set, ready_set;<br>    <br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br>    <br>    FD_ZERO(&amp;read_set);              <span class="hljs-comment">/* Clear read set */</span><br>    FD_SET(STDIN_FILENO, &amp;read_set); <span class="hljs-comment">/* Add stdin to read set */</span><br>    FD_SET(listenfd, &amp;read_set);     <span class="hljs-comment">/* Add listenfd to read set */</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        ready_set = read_set;<br>        Select(listenfd + <span class="hljs-number">1</span>, &amp;ready_set, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">if</span> (FD_ISSET(STDIN_FILENO, &amp;ready_set))<br>            command(); <span class="hljs-comment">/* Read command line from stdin */</span><br>        <span class="hljs-keyword">if</span> (FD_ISSET(listenfd, &amp;ready_set)) &#123;<br>            clientlen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_storage);<br>            connfd = Accept(listenfd, (SA *)&amp;clientaddr, &amp;clientlen);<br>            echo(connfd); <span class="hljs-comment">/* Echo client input until EOF */</span><br>            Close(connfd);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">command</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> buf[MAXLINE];<br>    <span class="hljs-keyword">if</span> (!Fgets(buf, MAXLINE, <span class="hljs-built_in">stdin</span>))<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">/* EOF */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buf); <span class="hljs-comment">/* Process the input command */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​一开始，我们用<code>open_listenfd </code>函数打开一个监听描述符（第 16 行），然后使用 FD_ZERO 创建一个空的读集合（第 18 行）：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/da48410221e5585ba37fe05d19849009.png" alt=""></p><p>​接下来，在第 19 和 20 行中，我们定义由描述符 0（标准输入）和描述符 3（监听描述符）组成的读集合：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4a1679f95f9ef2f765d34066c8efdd5c.png" alt=""></p><p>​在这里，我们开始典型的服务器循环。但是我们不调用 accept 函数来等待一个连接请求，而是调用 select 函数，这个函数会一直阻塞，直到监听描述符或者标准输入准备好可以读（第 24 行）。例如，下面是当用户按回车键，因此使得标准输入描述符变为可读时，select 会返回的 ready_set 的值：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/069cc5056d8da4fa5e951c2d7b0cb7cd.png" alt=""></p><p>​一旦 select 返回，我们就用 FD_ISSET 宏指令来确定哪个描述符准备好可以读了。如果是标准输入准备好了（第 25 行），我们就调用 command 函数，该函数在返回到主程序前，会读、解析和响应命令。如果是监听描述符准备好了（第 27 行），我们就调用 accept 来得到一个已连接描述符，然后调用echo 函数，它会将来自客户端的每一行又回送回去，直到客户端关闭这个连接中它的那一端。</p><p>​虽然这个程序是使用 select 的一个很好示例，但是它仍然留下了一些问题待解决。问题是一旦它连接到某个客户端，就会连续回送输入行，直到客户端关闭这个连接中它的那一端。因此，如果键入一个命令到标准输入，你将不会得到响应，直到服务器和客户端之间结 束。一个更好的方法是更细粒度的多路复用，服务器每次循环（至多）回送一个文本行。</p><h2 id="2-1-基于I-O多路复用的并发事件驱动服务器">2.1 基于I/O多路复用的并发事件驱动服务器</h2><p>​I/O 多路复用可以用做并发<strong>事件驱动</strong>（event-driven）程序的基础，在事件驱动程序中，某些事件会导致流向前推进。一般的思路是将逻辑流模型化为状态机。不严格地说，一个<strong>状态机</strong>（state machine）就是一组<strong>状态</strong>（state）、<strong>输入事件</strong>（input event）和<strong>转移</strong>（transition），其中转移是将状态和输入事件映射到状态。每个转移是将一个（输入状态，输入事件）对映射到一个输出状态。<strong>自循环</strong>（self-loop）是同一输入和输岀状态之间的转移。通常把状态机画成有向图，其中节点表示状态，有向弧表示转移，而弧上的标号表示输入事件。一个状态机从某种初始状态开始执行。每个输入事件都会引发一个从当前状态到下一状态的转移。</p><p>​对于每个新的客户端 k，基于 I/O 多路复用的并发服务器会创建一个新的状态机sk，并将它和已连接描述符联系起来。如下图示：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/78fcc7b5b63bb4e8a9260899093c6902.png" alt=""></p><p>​每个状态机sk都有一个状态（“等待描述符dk准备好可读”）、一个输入事件（“描述符dk准备好可以读了”）和一个转移（“从描述符dk读一个文本行”）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> <span class="hljs-comment">/* Represents a pool of connected descriptors */</span><br>    <span class="hljs-type">int</span> maxfd;        <span class="hljs-comment">/* Largest descriptor in read_set */</span><br>    fd_set read_set;  <span class="hljs-comment">/* Set of all active descriptors */</span><br>    fd_set ready_set; <span class="hljs-comment">/* Subset of descriptors ready for reading */</span><br>    <span class="hljs-type">int</span> nready;       <span class="hljs-comment">/* Number of ready descriptors from select */</span><br>    <span class="hljs-type">int</span> maxi;         <span class="hljs-comment">/* High water index into client array */</span><br>    <span class="hljs-type">int</span> clientfd[FD_SETSIZE];    <span class="hljs-comment">/* Set of active descriptors */</span><br>    <span class="hljs-type">rio_t</span> clientrio[FD_SETSIZE]; <span class="hljs-comment">/* Set of active read buffers */</span><br>&#125; pool;<br><br><span class="hljs-type">int</span> byte_cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">/* Counts total bytes received by server */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> listenfd, connfd;<br>    <span class="hljs-type">socklen_t</span> clientlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span><br>    <span class="hljs-type">static</span> pool pool;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br>    init_pool(listenfd, &amp;pool);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">/* Wait for listening/connected descriptor(s) to become ready */</span><br>        pool.ready_set = pool.read_set;<br>        pool.nready = Select(pool.maxfd + <span class="hljs-number">1</span>, &amp;pool.ready_set, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>        <br>        <span class="hljs-comment">/* If listening descriptor ready, add new client to pool */</span><br>        <span class="hljs-keyword">if</span> (FD_ISSET(listenfd, &amp;pool.ready_set)) &#123;<br>            clientlen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_storage);<br>            connfd = Accept(listenfd, (SA *)&amp;clientaddr, &amp;clientlen);<br>            add_client(connfd, &amp;pool);<br>        &#125;<br>        <br>        <span class="hljs-comment">/* Echo a text line from each ready connected descriptor */</span><br>        check_clients(&amp;pool);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​上面展示了一个基于 I/O 多路复用的并发事件驱动服务器的完整示例代码。一个 pool 结构里维护着活动客户端的集合（第 3 ~ 11 行）。在调用 init_pool 初始化池（第 27 行）之后，服务器进入一个无限循环。在循环的每次迭代中，服务器调用 select 函数来检测两种不同类型的输入事件：a）来自一个新客户端的连接请求到达，b）一个已存在的客户端的已连接描述符准备好可以读了。当一个连接请求到达时（第 35 行），服务器打开连接（第 37 行），并调用 add_client 函数，将该客户端添加到池里（第 38 行）。最后，服务器调用 check_clients 函数，把来自每个准备好的已连接描述符的一个文本行回送回去（第 42 行）。</p><p>​init_pool 函数初始化客户端池。clientfd 数组表示已连接描述符的集合，其中整数 - 1 表示一个可用的槽位。初始时，已连接描述符集合是空的（第 5 ~ 7 行），而且监听描述符是 select 读集合中唯一的描述符（第 10 ~ 12 行）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">init_pool</span><span class="hljs-params">(<span class="hljs-type">int</span> listenfd, pool *p)</span><br>&#123;<br>    <span class="hljs-comment">/* Initially, there are no connected descriptors */</span><br>    <span class="hljs-type">int</span> i;<br>    p-&gt;maxi = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; FD_SETSIZE; i++)<br>        p-&gt;clientfd[i] = <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-comment">/* Initially, listenfd is only member of select read set */</span><br>    p-&gt;maxfd = listenfd;<br>    FD_ZERO(&amp;p-&gt;read_set);<br>    FD_SET(listenfd, &amp;p-&gt;read_set);<br>&#125;<br></code></pre></td></tr></table></figure><p>​add_client 函数添加一个新的客户端到活动客户端池中。在 clientfd 数组中找到一个空槽位后，服务器将这个已连接描述符添加到数组中，并初始化相应的 RIO 读缓冲区，这样一来我们就能够对这个描述符调用 rio_readlineb（第 8 ~ 9 行）。然后，我们将这个已连接描述符添加到 select 读集合（第 12 行），并更新该池的一些全局属性。maxfd 变量（第 15 ~ 16 行）记录了 select 的最大文件描述符。maxi 变量（第 17 ~ 18 行）记录的是到 clientfd 数组的最大索引，这样 check_clients 函数就无需搜索整个数组了。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xl">void add_client(int connfd, pool *p)<br>&#123;<br>    int i;<br>    <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>nready--;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; FD_SETSIZE; i++) <span class="hljs-comment">/* Find an available slot */</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (p-&gt;</span>clientfd[i] &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">/* Add connected descriptor to the pool */</span><br>            <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>clientfd[i] = connfd;<br>            R<span class="hljs-function"><span class="hljs-title">io_readinitb</span>(&amp;p-&gt;</span>clientrio[i], connfd);<br><br>            <span class="hljs-comment">/* Add the descriptor to descriptor set */</span><br>            FD_SET(<span class="hljs-function"><span class="hljs-title">connfd</span>, &amp;p-&gt;</span>read_set);<br><br>            <span class="hljs-comment">/* Update max descriptor and pool high water mark */</span><br>            <span class="hljs-function"><span class="hljs-title">if</span> (connfd &gt; p-&gt;</span>maxfd)<br>                <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>maxfd = connfd;<br>            <span class="hljs-function"><span class="hljs-title">if</span> (i &gt; p-&gt;</span>maxi)<br>                <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>maxi = i;<br>            break;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (i == FD_SETSIZE) <span class="hljs-comment">/* Couldn’t find an empty slot */</span><br>        app_error(<span class="hljs-string">&quot;add_client error: Too many clients&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​根据上图中的有限状态模型，select 函数检测到输入事件，而 add_client 函数创建一个新的逻辑流（状态机）。check_clients 函数回送输入行，从而执行状态转移，而且当客户端完成文本行发送时，它还要删除这个状态机。</p><h2 id="2-2-I-O-多路复用技术的优劣">2.2 I/O 多路复用技术的优劣</h2><ul><li>单一进程上下文，共享数据容易。</li><li>事件驱动，不需要上下文切换，高效，有明显的性能优势。</li><li>编码复杂</li><li><strong>不能充分利用多核处理器</strong></li></ul><h1>3.基于线程的并发编程</h1><p>​<strong>线程</strong>（thread）就是运行在进程上下文中的逻辑流。在本书里迄今为止，程序都是由每个进程中一个线程组成的。但是现代系统也允许我们编写一个进程里同时运行多个线程的程序。线程由内核自动调度。每个线程都有它自己的<strong>线程上下文</strong>（thread context），包括一个唯一的整数<strong>线程 ID</strong>（Thread ID，TID）、栈、栈指针、程序计数器、通用目的寄存器和条件码。所有的运行在一个进程里的线程共享该进程的整个虚拟地址空间。</p><p>​基于线程的逻辑流结合了基于进程和基于 I/O 多路复用的流的特性。同进程一样，线程由内核自动调度，并且内核通过一个整数 ID 来识别线程。同基于 I/O 多路复用的流一样，多个线程运行在单一进程的上下文中，因此共享这个进程虚拟地址空间的所有内容，包括它的代码、数据、堆、共享库和打开的文件。</p><h2 id="3-1-线程执行模型">3.1 线程执行模型</h2><p>​多线程的执行模型在某些方面和多进程的执行模型是相似的。思考下中的示例：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0ff32d60536a44c18995b399239a3a05.png" alt=""></p><p>​每个进程开始生命周期时都是单一线程，这个线程称为<strong>主线程</strong>（main thread）。在某一时刻，主线程创建一个<strong>对等线程</strong>（peer thread），从这个时间点开始，两个线程就并发地运行。最后，因为主线程执行一个慢速系统调用，例如 read 或者 sleep，或者因为被系统的间隔计时器中断，控制就会通过上下文切换传递到对等线程。对等线程会执行一段时间，然后控制传递回主线程，依次类推。</p><p>​在一些重要的方面，线程执行是不同于进程的。因为一个线程的上下文要比一个进程的上下文小得多，线程的上下文切换要比进程的上下文切换快得多。另一个不同就是线程不像进程那样，不是按照严格的父子层次来组织的。<strong>和一个进程相关的线程组成一个对等（线程）池</strong>，独立于其他线程创建的线程。主线程和其他线程的区别仅在于它总是进程中第一个运行的线程。<strong>对等（线程）池概念的主要影响是，一个线程可以杀死它的任何对等线程</strong>，或者等待它的任意对等线程终止。另外，每个对等线程都能读写相同的共享数据。</p><h2 id="3-2-Posix-线程">3.2 Posix 线程</h2><p>​Posix 线程（Pthreads）是在 C 程序中处理线程的一个标准接口。它最早出现在 1995 年，而且在所有的 Linux 系统上都可用。Pthreads 定义了大约 60 个函数，允许程序创建、杀死和回收线程，与对等线程安全地共享数据，还可以通知对等线程系统状态的变化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pthread_t</span> tid;<br>    Pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread, <span class="hljs-literal">NULL</span>);<br>    Pthread_join(tid, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span> <span class="hljs-comment">/* Thread routine */</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, world!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​主线程创建一个对等线程，然后等待它的终止。对等线程输岀 “Hello, world!\n” 并且终止。当主线程检测到对等线程终止后，它就通过调用 exit 终止该进程。这是我们看到的第一个线程化的程序，所以让我们仔细地解析它。线程的代码和本地数据被封装在一个<strong>线程例程</strong>（thread routine）中。正如第二行里的原型所示，每个线程例程都以一个通用指针作为输入，并返回一个通用指针。如果想传递多个参数给线程例程，那么你应该将参数放到一个结构中，并传递一个指向该结构的指针。相似地，如果想要线程例程返回多个参数，你可以返回一个指向一个结构的指针。</p><p>​第 4 行标出了主线程代码的开始。主线程声明了一个本地变量 tid，可以用来存放对等线程的 ID（第 6 行）。主线程通过调用 pthread_create 函数创建一个新的对等线程（第 7 行）。当对 pthread_create 的调用返回时，主线程和新创建的对等线程同时运行，并且 tid 包含新线程的 ID。通过在第 8 行调用 pthread_join，主线程等待对等线程终止。最后，主线程调用 exit（第 9 行），终止当时运行在这个进程中的所有线程（在这个示例中就只有主线程）。</p><p>​第 12 ~ 16 行定义了对等线程的例程。它只打印一个字符串，然后就通过执行第 15 行中的 return 语句来终止对等线程</p><h2 id="3-3-创建线程">3.3 创建线程</h2><p>​</p><p>​线程通过调用 pthread_create 函数来创建其他线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *(func)(<span class="hljs-type">void</span> *);<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_create</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> *tid, <span class="hljs-type">pthread_attr_t</span> *attr,</span><br><span class="hljs-params">                   func *f, <span class="hljs-type">void</span> *arg)</span>;<br><br><span class="hljs-comment">// 若成功则返回 0，若出错则为非零。</span><br></code></pre></td></tr></table></figure><p>pthread_create 函数创建一个新的线程，并带着一个输入变量 arg，在新线程的上下文中运行线程例程 f。能用 attr 参数来改变新创建线程的默认属性。改变这些属性已超出我们学习的范围，在我们的示例中，总是用一个为 NULL 的参数来调用 pthread_create 函数。</p><p>当 pthread_create 返回时，参数 tid 包含新创建线程的 ID。新线程可以通过调用 pthread_self 函数来获得它自己的线程 ID。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">pthread_t</span> <span class="hljs-title function_">pthread_self</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">// 返回调用者的线程 ID。</span><br></code></pre></td></tr></table></figure><h2 id="3-4-终止线程">3.4 终止线程</h2><p>​一个线程是以下列方式之一来终止的：</p><ul><li>当顶层的线程例程返回时，线程会<strong>隐式地</strong>终止。</li><li>通过调用 pthread_exit 函数，线程会<strong>显式地</strong>终止。如果主线程调用 pthread_exit，它会等待所有其他对等线程终止，然后再终止主线程和整个进程，返回值为 thread_return。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pthread_exit</span><span class="hljs-params">(<span class="hljs-type">void</span> *thread_return)</span>;<br><br><span class="hljs-comment">// 从不返回。</span><br></code></pre></td></tr></table></figure><ul><li>某个对等线程调用 Linux 的 exit 函数，该函数终止进程以及所有与该进程相关的线程。</li><li>另一个对等线程通过以当前线程 ID 作为参数调用 pthread_Cancel 函数来终止当前线程。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cancel</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> tid)</span>;<br><br><span class="hljs-comment">// 若成功则返回 0，若出错则为非零。</span><br></code></pre></td></tr></table></figure><h2 id="3-5-回收已终止线程的资源">3.5 回收已终止线程的资源</h2><p>线程通过调用 pthread_join 函数等待其他线程终止:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_join</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> tid, <span class="hljs-type">void</span> **thread_return)</span>;<br><br><span class="hljs-comment">// 若成功则返回 0，若出错则为非零。</span><br></code></pre></td></tr></table></figure><p>​pthread_join 函数会阻塞，直到线程 tid 终止，将线程例程返回的通用 <strong>(void*)</strong> 指针赋值为 thread_return 指向的位置，然后回收已终止线程占用的所有内存资源。</p><p>注意，和 Linux 的 wait 函数不同，pthread_join 函数只能等待一个指定的线程终止。没有办法让 pthread_wait 等待任意一个线程终止。这使得代码更加复杂，因为它迫使我们去使用其他一些不那么直观的机制来检测进程的终止。实际上，Stevens 在【110】中就很有说服力地论证了这是规范中的一个错误</p><h2 id="3-6-分离线程">3.6 分离线程</h2><p>​在任何一个时间点上，线程是<strong>可结合的</strong>（joinable）或者是<strong>分离的</strong>（detached）。一个可结合的线程能够被其他线程收回和杀死。在被其他线程回收之前，它的内存资源（例如栈）是不释放的。相反，一个分离的线程是不能被其他线程回收或杀死的。它的内存资源在它终止时由系统自动释放。</p><p>​默认情况下，线程被创建成可结合的。为了避免内存泄漏，每个可结合线程都应该要么被其他线程显式地收回，要么通过调用 pthread_detach 函数被分离。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_detach</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> tid)</span>;<br><br><span class="hljs-comment">// 若成功则返回 0，若出错则为非零。</span><br></code></pre></td></tr></table></figure><p>​pthread_detach 函数分离可结合线程 tid。线程能够通过以 pthread_self() 参数的 pthread_detach 调用来分离它们自己。</p><p>​尽管我们的一些例子会使用可结合线程，但是在现实程序中，有很好的理由要使用分离的线程。例如，一个高性能 Web 服务器可能在每次收到 Web 浏览器的连接请求时都创建一个新的对等线程。因为每个连接都是由一个单独的线程独立处理的，所以对于服务器而言，就很没有必要（实际上也不愿意）显式地等待每个对等线程终止。在这种情况下，每个对等线程都应该在它开始处理请求之前分离它自身，这样就能在它终止后回收它的内存资源了。</p><h2 id="3-7-初始化线程">3.7 初始化线程</h2><p>​pthread_once 函数允许你初始化与线程例程相关的状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">pthread_once_t</span> once_control = PTHREAD_ONCE_INIT;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_once</span><span class="hljs-params">(<span class="hljs-type">pthread_once_t</span> *once_control,</span><br><span class="hljs-params">                 <span class="hljs-type">void</span> (*init_routine)(<span class="hljs-type">void</span>))</span>;<br><br><span class="hljs-comment">// 总是返回 0。</span><br></code></pre></td></tr></table></figure><p>once_control 变量是一个全局或者静态变量，总是被初始化为 PTHREAD_ONCE_INIT。当你第一次用参数 once_control 调用 pthread_once 时，它调用 init_routine，这是一个没有输入参数、也不返回什么的函数。接下来的以 once_control 为参数的 pthread_once 调用不做任何事情。无论何时，当你需要动态初始化多个线程共享的全局变量时，pthread_once 函数是很有用的。</p><h2 id="3-8-基于线程的并发服务器">3.8 基于线程的并发服务器</h2><p>​ 下图展示了基于线程的并发 echo 服务器的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">echo</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> listenfd, *connfdp;<br>    <span class="hljs-type">socklen_t</span> clientlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span><br>    <span class="hljs-type">pthread_t</span> tid;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br>    <br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        clientlen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_storage);<br>        connfdp = Malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        *connfdp = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);<br>        Pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread, connfdp);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* Thread routine */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    <span class="hljs-type">int</span> connfd = *((<span class="hljs-type">int</span> *)vargp);<br>    Pthread_detach(pthread_self());<br>    Free(vargp);<br>    echo(connfd);<br>    Close(connfd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​整体结构类似于基于进程的设计。主线程不断地等待连接请求，然后创建一个对等线程处理该请求。虽然代码看似简单，但是有几个普遍而且有些微妙的问题需要我们更仔细地看一看。第一个问题是当我们调用 pthread_create 时，如何将已连接描述符传递给对等线程。最明显的方法就是传递一个指向这个描述符的指针，就像下面这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">connfd = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);<br>Pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread, &amp;connfd);<br></code></pre></td></tr></table></figure><p>然后，我们让对等线程间接引用这个指针，并将它赋值给一个局部变量，如下所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span> &#123;<br>    <span class="hljs-type">int</span> connfd = *((<span class="hljs-type">int</span> *)vargp);<br>    .<br>    .<br>    .<br>&#125;<br></code></pre></td></tr></table></figure><p>​然而，这样可能会出错，因为它在对等线程的赋值语句和主线程的 accept 语句间引入了<strong>竞争</strong>（race）。如果赋值语句在下一个 accept 之前完成，那么对等线程中的局部变量 connfd 就得到正确的描述符值。然而，如果赋值语句是在 accept 之后才完成的，那么对等线程中的局部变量 connfd 就得到下一次连接的描述符值。那么不幸的结果就是，现在两个线程在同一个描述符上执行输入和输出。为了避免这种潜在的致命竞争，我们必须将 accept 返回的每个已连接描述符分配到它自己的动态分配的内存块，如第 20 ~ 21 行所示。我们会在 7.4 节中回过来讨论竞争的问题。</p><p>另一个问题是在线程例程中避免内存泄漏。既然不显式地收回线程，就必须分离每个线程，使得在它终止时它的内存资源能够被收回（第 31 行）。更进一步，我们必须小心释放主线程分配的内存块（第 32 行）</p><h1>4.多线程程序中的共享变量</h1><p>​从程序员的角度来看，线程很有吸引力的一个方面是多个线程很容易共享相同的程序变量。然而，这种共享也是很棘手的。为了编写正确的多线程程序，我们必须对所谓的共享以及它是如何工作的有很清楚的了解。</p><p>为了理解 C 程序中的一个变量是否是共享的，有一些基本的问题要解答：</p><ol><li>线程的基础内存模型是什么？</li><li>根据这个模型，变量实例是如何映射到内存的？</li><li>最后，有多少线程引用这些实例？一个变量是<strong>共享的</strong>，当且仅当多个线程引用这个变量的某个实例。</li></ol><p>​为了让我们对共享的讨论具体化，我们将使用下图中的程序作为运行示例。尽管有些人为的痕迹，但是它仍然值得研究，因为它说明了关于共享的许多细微之处。示例程序由一个创建了两个对等线程的主线程组成。主线程传递一个唯一的 ID 给每个对等线程，每个对等线程利用这个 ID 输出一条个性化的信息，以及调用该线程例程的总次数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 2</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>;<br><br><span class="hljs-type">char</span> **ptr; <span class="hljs-comment">/* Global variable */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">pthread_t</span> tid;<br>    <span class="hljs-type">char</span> *msgs[N] = &#123;<br>        <span class="hljs-string">&quot;Hello from foo&quot;</span>,<br>        <span class="hljs-string">&quot;Hello from bar&quot;</span><br>    &#125;;<br><br>    ptr = msgs;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        Pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread, (<span class="hljs-type">void</span> *)i);<br>    Pthread_exit(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    <span class="hljs-type">int</span> myid = (<span class="hljs-type">int</span>)vargp;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d]: %s (cnt=%d)\n&quot;</span>, myid, ptr[myid], ++cnt);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-1-线程内存模型">4.1 线程内存模型</h2><p>​一组并发线程运行在一个进程的上下文中。每个线程都有它自己独立的线程上下文，包括线程 ID、栈、栈指针、程序计数器、条件码和通用目的寄存器值。每个线程和其他线程一起共享进程上下文的剩余部分。这包括整个用户虚拟地址空间，它是由只读文本（代码）、读/写数据、堆以及所有的共享库代码和数据区域组成的。线程也共享相同的打开文件的集合。</p><p>​从实际操作的角度来说，让一个线程去读或写另一个线程的寄存器值是不可能的。另一方面，任何线程都可以访问共享虚拟内存的任意位置。如果某个线程修改了一个内存位置，那么其他每个线程最终都能在它读这个位置时发现这个变化。因此，寄存器是从不共享的，而虚拟内存总是共享的。</p><p>​各自独立的线程栈的内存模型不是那么整齐清楚的。这些栈被保存在虚拟地址空间的栈区域中，并且通常是被相应的线程独立地访问的。我们说通常而不是总是，是因为不同的线程栈是不对其他线程设防的。所以，如果一个线程以某种方式得到一个指向其他线程栈的指针，那么它就可以读写这个栈的任何部分。示例程序在第 26 行展示了这一点，其中对等线程直接通过全局变量 ptr 间接引用主线程的栈的内容。</p><h2 id="4-2-将变量映射到内存">4.2 将变量映射到内存</h2><p>多线程的 C 程序中变量根据它们的存储类型被映射到虚拟内存：</p><ul><li>**全局变量。**全局变量是定义在函数之外的变量。在运行时，虚拟内存的读/写区域只包含每个全局变量的一个实例，任何线程都可以引用。例如，第 5 行声明的全局变量 ptr 在虚拟内存的读/写区域中有一个运行时实例。当一个变量只有一个实例时，我们只用变量名（在这里就是 ptr）来表示这个实例。</li><li>**本地自动变量。**本地自动变量就是定义在函数内部但是没有 static 属性的变量。在运行时，每个线程的栈都包含它自己的所有本地自动变量的实例。即使多个线程执行同一个线程例程时也是如此。例如，有一个本地变量 tid 的实例，它保存在主线程的栈中。我们用 <strong>tid.m</strong> 来表示这个实例。再来看一个例子，本地变量 myid 有两个实例，一个在对等线程。的栈内，另一个在对等线程 1 的栈内。我们将这两个实例分别表示为 <strong>myid.p0</strong> 和 <strong>myid.p1</strong>。</li><li>**本地静态变量。**本地静态变量是定义在函数内部并有 static 属性的变量。和全局变量一样，虚拟内存的读/写区域只包含在程序中声明的每个本地静态变量的一个实例。例如，即使示例程序中的每个对等线程都在第 25 行声明了 cnt，在运行时，虚拟内存的读/写区域中也只有一个 cnt 的实例。每个对等线程都读和写这个实例。</li></ul><h2 id="4-3-共享变量">4.3 共享变量</h2><p>我们说一个变量 v 是共享的，当且仅当它的一个实例被一个以上的线程引用。例如，示例程序中的变量 cnt 就是共享的，因为它只有一个运行时实例，并且这个实例被两个对等线程引用。在另一方面，myid 不是共享的，因为它的两个实例中每一个都只被一个线程引用。然而，认识到像 msgs 这样的本地自动变量也能被共享是很重要的。</p><h1>5.用信号量同步线程</h1><p>​共享变量是十分方便，但是它们也引入了<strong>同步错误</strong>（synchronization error）的可能性。考虑下图中的程序 badcnt.c，它创建了两个线程，每个线程都对共享计数变量 cnt 加 1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* WARNING: This code is buggy! */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>; <span class="hljs-comment">/* Thread routine prototype */</span><br><br><span class="hljs-comment">/* Global shared variable */</span><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">/* Counter */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">long</span> niters;<br>    <span class="hljs-type">pthread_t</span> tid1, tid2;<br><br>    <span class="hljs-comment">/* Check input argument */</span><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage: %s &lt;niters&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    niters = atoi(argv[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-comment">/* Create threads and wait for them to finish */</span><br>    Pthread_create(&amp;tid1, <span class="hljs-literal">NULL</span>, thread, &amp;niters);<br>    Pthread_create(&amp;tid2, <span class="hljs-literal">NULL</span>, thread, &amp;niters);<br>    Pthread_join(tid1, <span class="hljs-literal">NULL</span>);<br>    Pthread_join(tid2, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">/* Check result */</span><br>    <span class="hljs-keyword">if</span> (cnt != (<span class="hljs-number">2</span> * niters))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BOOM! cnt=%ld\n&quot;</span>, cnt);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK cnt=%ld\n&quot;</span>, cnt);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/* Thread routine */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    <span class="hljs-type">long</span> i, niters = *((<span class="hljs-type">long</span> *)vargp);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; niters; i++)<br>        cnt++;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​因为每个线程都对计数器增加了 niters 次，我们预计它的最终值是 2 × niters。这看上去简单而直接。然而，当在 Linux 系统上运行 badcnt.c 时，我们不仅得到错误的答案，而且每次得到的答案都还不相同！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">./badcnt 1000000</span><br>BOOM! cnt=1445085<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">./badcnt 1000000</span><br>BOOM! cnt=1915220<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">./badcnt 1000000</span><br>BOOM! cnt=1404746<br></code></pre></td></tr></table></figure><p>​那么哪里出错了呢？为了清晰地理解这个问题，我们需要研究计数器循环（第 40 ~ 41 行）的汇编代码，如图 所示:</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/774afd47f859629cc2ab9af4cc895f0f.png" alt=""></p><p>我们发现，将线程 i 的循环代码分解成五个部分是很有帮助的：</p><ul><li></li></ul><p><em>Hi</em>：在循环头部的指令块。</p><ul><li></li></ul><p><em>Li</em>：加载共享变量 cnt 到累加寄存器 %eaxi 的指令，这里 %eaxi 表示线程 i 中的寄存器 ％eax 的值。</p><ul><li></li></ul><p><em>Ui</em>：更新（增加）%eaxi 的指令。</p><ul><li></li></ul><p><em>Si</em>：将 ％eaxi 的更新值存回到共享变量 cnt 的指令。</p><ul><li></li></ul><p><em>Ti</em> ：循环尾部的指令块。</p><p>注意头和尾只操作本地栈变量，而<em>Li</em>、 <em>Ui</em>和<em>Si</em>操作共享计数器变量的内容。</p><p>​当 badcnt.c 中的两个对等线程在一个单处理器上并发运行时，机器指令以某种顺序一个接一个地完成。因此，每个并发执行定义了两个线程中的指令的某种全序（或者交叉）。不幸的是，这些顺序中的一些将会产生正确结果，但是其他的则不会。</p><p>​这里有个关键点：**一般而言，你没有办法预测操作系统是否将为你的线程选择一个正确的顺序。**例如，图 12-18a 展示了一个正确的指令顺序的分步操作。在每个线程更新了共享变量 cnt 之后，它在内存中的值就是 2，这正是期望的值。</p><p>​另一方面，图 12-18b 的顺序产生一个不正确的 cnt 的值。会发生这样的问题是因为，线程 2 在第 5 步加载 cnt，是在第 2 步线程 1 加载 cnt 之后，而在第 6 步线程 1 存储它的更新值之前。因此，每个线程最终都会存储一个值为 1 的更新后的计数器值。我们能够借助于一种叫做<strong>进度图</strong>（progress graph）的方法来阐明这些正确的和不正确的指令顺序的概念，这个图我们将在下一节中介绍。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/b4694fdb9d23908ea2c43a4ed25f6721.png" alt=""></p><h2 id="5-1-进度图">5.1 进度图</h2><p><strong>进度图</strong>（progress graph）将 n 个并发线程的执行模型化为一条 n 维笛卡儿空间中的轨迹线。每条轴 k 对应于线程 k 的进度。每个点</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>I</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>I</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(I_1,I_2,⋯ ,I_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>​代表线程k (k=1,…,n)已经完成了指令<em>Ik</em>这一状态。图的原点对应于没有任何线程完成一条指令的初始状态。</p><p>​图 12-19 展示了 badcnt.c 程序第一次循环迭代的二维进度图。水平轴对应于线程 1，垂直轴对应于线程 2。点 (<em>L</em>1,<em>S</em>2) 对应于线程 1 完成了 <em>L</em>1 而线程 2 完成了 <em>S</em>2 的状态。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/b575ef2e636b438cf4011841791e16c6.png" alt=""></p><p>​进度图将指令执行模型化为从一种状态到另一种状态的<strong>转换</strong>（transition）。转换被表示为一条从一点到相邻点的有向边。合法的转换是向右（线程 1 中的一条指令完成）或者向上（线程 2 中的一条指令完成）的。两条指令不能在同一时刻完成一对角线转换是不允许的。程序决不会反向运行，所以向下或者向左移动的转换也是不合法的。</p><p>​一个程序的执行历史被模型化为状态空间中的一条轨迹线。下图展示了下面指令顺序对应的轨迹线：</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/415a0e9afc53468afd783fdf49020d08.png" alt=""></p><p>​对于线程 i，操作共享变量 cnt 内容的指令(<em>Li</em>,<em>Ui</em>,<em>Si</em>)构成了一个（关于共享变量 cnt 的）<strong>临界区</strong>（critical section），这个临界区不应该和其他进程的临界区交替执行。换句话说，我们想要确保每个线程在行它的临界区中的指令时，拥有对共享变量的<strong>互斥的访问</strong>（mutually exclusive access）。通常这种现象称为<strong>互斥</strong>（mutual exclusion）。</p><p>​在进度图中，两个临界区的交集形成的状态空间区域称为<strong>不安全区</strong>（unsafe region）。 下图展示了变量 cnt 的不安全区。注意，不安全区和与它交界的状态相毗邻，但并不包括这些状态。例如，状态(<em>H</em>1,<em>H</em>2) 和(<em>S</em>1,<em>S</em>2)毗邻不安全区，但是它们并不是不安全区的一部分。绕开不安全区的轨迹线叫做<strong>安全轨迹线</strong>（safe trajectory）。相反，接触到任何不安全区的轨迹线就叫做<strong>不安全轨迹线</strong>（unsafe trajectory）。下图给出了示例程序 badcnt.c 的状态空间中的安全和不安全轨迹线。上面的轨迹线绕开了不安全区域的左边和上边，所以是安全的。下面的轨迹线穿越不安全区，因此是不安全的。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3f16efe1bb7bdac8734ef6a6a4eb6c59.png" alt=""></p><p>​任何安全轨迹线都将正确地更新共享计数器。为了保证线程化程序示例的正确执行（实际上任何共享全局数据结构的并发程序的正确执行）我们必须以某种方式<strong>同步</strong>线程，使它们总是有一条安全轨迹线。一个经典的方法是基于信号量的思想，接下来我们就介绍它。</p><h2 id="5-2-信号量">5.2 信号量</h2><p>​Edsger Dijkstra，并发编程领域的先锋人物，提出了一种经典的解决同步不同执行线程问题的方法，这种方法是基于一种叫做<strong>信号量</strong>（semaphore）的特殊类型变量的。信号量 s 是具有非负整数值的全局变量，只能由两种特殊的操作来处理，这两种操作称为 P 和 V：</p><ul><li><em>P</em>(<em>s</em>)：如果 s 是非零的，那么 P 将 s 减 1，并且立即返回。如果 s 为零，那么就挂起这个线程，直到 s 变为非零，而一个 V 操作会重启这个线程。在重启之后，P 操作将 s 减 1，并将控制返回给调用者。</li><li><em>V(s)</em>：V 操作将 s 加 1。如果有任何线程阻塞在 P 操作等待 s 变成非零，那么 V 操作会重启这些线程中的一个，然后该线程将 s 减 1，完成它的 P 操作。</li></ul><p>​P 中的测试和减 1 操作是不可分割的，<strong>也就是说，一旦预测信号量 s 变为非零，就会将 s 减 1，不能有中断</strong>。V 中的加 1 操作也是不可分割的，<strong>也就是加载、加 1 和存储信号量的过程中没有中断</strong>。注意，V 的定义中没有定义等待线程被重启动的顺序。唯一的要求是 V 必须只能重启一个正在等待的线程。因此，当有多个线程在等待同一个信号量时，你不能预测 V 操作要重启哪一个线程。</p><p>​P 和 V 的定义确保了一个正在运行的程序绝不可能进入这样一种状态，也就是一个正确初始化了的信号量有一个负值。这个属性称为<strong>信号量不变性</strong>（semaphore invariant），为控制并发程序的轨迹线提供了强有力的工具，在下一节中我们将看到。</p><p>Posix 标准定义了许多操作信号量的函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_init</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem, <span class="hljs-number">0</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> value)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_wait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *s)</span>; <span class="hljs-comment">/* P(s) */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_post</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *s)</span>; <span class="hljs-comment">/* V(s) */</span><br><br><span class="hljs-comment">// 返回：若成功则为 0，若出错则为 -1。</span><br></code></pre></td></tr></table></figure><p>​<code>sem_init </code>函数将信号量 sem 初始化为 value。每个信号量在使用前必须初始化。针对我们的目的，中间的参数总是零。程序分别通过调用 <code>sem_wait</code> 和 <code>sem_post </code>函数来执行 P 和 V 操作。为了简明，我们更喜欢使用下面这些等价的 P 和 V 的包装函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">P</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *s)</span>; <span class="hljs-comment">/* Wrapper function for sem_wait */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">V</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *s)</span>; <span class="hljs-comment">/* Wrapper function for sem_post */</span><br><br><span class="hljs-comment">// 返回：无。</span><br></code></pre></td></tr></table></figure><h2 id="5-3-使用信号量来实现互斥">5.3 使用信号量来实现互斥</h2><p>​信号量提供了一种很方便的方法来确保对共享变量的互斥访问。基本思想是将每个共享变量（或者一组相关的共享变量）与一个信号量 s（初始为 1）联系起来，然后用P(s)<em>P</em>(<em>s</em>)和V(s)<em>V</em>(<em>s</em>)操作将相应的临界区包围起来。</p><p>​以这种方式来保护共享变量的信号量叫做<strong>二元信号量</strong>（binary semaphore），因为它的值总是 0 或者 1。以提供互斥为目的的二元信号量常常也称为<strong>互斥锁</strong>（mutex）。在一个互斥锁上执行 P 操作称为对互斥锁加锁。类似地，执行 V 操作称为对互斥锁解锁。对一个互斥锁加了锁但是还没有解锁的线程称为占用这个互斥锁。一个被用作一组可用资源的计数器的信号量被称为<strong>计数信号量</strong>。</p><p>​ 下图中的进度图展示了我们如何利用二元信号量来正确地同步计数器程序示例。每个状态都标出了该状态中信号量 s 的值。关键思想是这种 P 和 V 操作的结合创建了一组状态，叫做<strong>禁止区</strong>（forbidden region），其中因为信号量的不变性，没有实际可行的轨迹线能够包含禁止区中的状态。而且，因为禁止区完全包括了不安全区，所以没有实际可行的轨迹线能够接触不安全区的任何部分。因此，每条实际可行的轨迹线都是安全的，而且不管运行时指令顺序是怎样的，程序都会正确地增加计数器值。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6d970b7ef1cb368beb48839616304903.png" alt=""></p><p>​从可操作的意义上来说，由 P 和 V 操作创建的禁止区使得在任何时间点上，在被包围的临界区中，不可能有多个线程在执行指令。换句话说，信号量操作确保了对临界区的互斥访问。</p><p>​总的来说，为了用信号量正确同步图 12-16 中的计数器程序示例，我们首先声明一个信号量 mutex，然后在主例程中将 mutex 初始化为 1，最后，我们通过把在线程例程中对共享变量 cnt 的更新包围 P 和 V 操作，从而保护它们：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">/* Counter */</span><br><span class="hljs-type">sem_t</span> mutex;           <span class="hljs-comment">/* Semaphore that protects counter */</span><br><br>Sem_init(&amp;mutex, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">/* mutex = 1 */</span><br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; niters; i++) &#123;<br>    P(&amp;mutex);<br>    cnt++;<br>    V(&amp;mutex);<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们运行这个正确同步的程序时，现在它每次都能产生正确的结果了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">./goodcnt 1000000</span><br>OK cnt=2000000<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">./goodcnt 1000000</span><br>OK cnt=2000000<br></code></pre></td></tr></table></figure><h2 id="5-4-利用信号量来调度共享资源">5.4 利用信号量来调度共享资源</h2><p>​除了提供互斥之外，信号量的另一个重要作用是调度对共享资源的访问。在这种场景中，一个线程用信号量操作来通知另一个线程，程序状态中的某个条件已经为真了。两个经典而有用的例子是<strong>生产者—消费者</strong>和<strong>读者—写者</strong>问题。</p><h3 id="1-生产者—消费者问题">1. 生产者—消费者问题</h3><p>​下图给出了生产者—消费者问题。生产者和消费者线程共享一个<strong>有 n 个槽的有限缓冲区</strong>。生产者线程反复地生成新的<strong>项目</strong>（item），并把它们插入到缓冲区中。消费者线程不断地从缓冲区中取出这些项目，然后消费（使用）它们。也可能有多个生产者和消费者的变种。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1141fc563e561181abc16e721025af59.png" alt=""></p><p>​因为插入和取出项目都涉及更新共享变量，所以我们必须保证对缓冲区的访问是互斥的。但是只保证互斥访问是不够的，我们还需要调度对缓冲区的访问。如果缓冲区是满的（没有空的槽位），那么生产者必须等待直到有一个槽位变为可用。与之相似，如果缓冲区是空的（没有可取用的项目），那么消费者必须等待直到有一个项目变为可用。</p><p>​生产者—消费者的相互作用在现实系统中是很普遍的。例如，在一个多媒体系统中，生产者编码视频帧，而消费者解码并在屏幕上呈现出来。缓冲区的目的是为了减少视频流的抖动，而这种抖动是由各个帧的编码和解码时与数据相关的差异引起的。缓冲区为生产者提供了一个槽位池，而为消费者提供一个已编码的帧池。另一个常见的示例是图形用户接口设计。生产者检测到鼠标和键盘事件，并将它们插入到缓冲区中。消费者以某种基于优先级的方式从缓冲区取出这些事件，并显示在屏幕上。</p><p>​在本节中，我们将开发一个简单的包，叫做 SBUF，用来构造生产者—消费者程序。在下一节里，我们会看到如何用它来构造一个基于预线程化（prethreading）的有趣的并发服务器。SBUF 操作类型为 sbuf_t 的有限缓冲区（如图所示）。项目存放在一个动态分配的 1 项整数数组（buf）中。front 和 rear 索引值记录该数组中的第一项和最后一项。三个信号量同步对缓冲区的访问。mutex 信号量提供互斥的缓冲区访问。slots 和 items 信号量分别记录空槽位和可用项目的数量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> *buf;       <span class="hljs-comment">/* Buffer array */</span><br>    <span class="hljs-type">int</span> n;          <span class="hljs-comment">/* Maximum number of slots */</span><br>    <span class="hljs-type">int</span> front;      <span class="hljs-comment">/* buf[(front+1)%n] is first item */</span><br>    <span class="hljs-type">int</span> rear;       <span class="hljs-comment">/* buf[rear%n] is last item */</span><br>    <span class="hljs-type">sem_t</span> mutex;    <span class="hljs-comment">/* Protects accesses to buf */</span><br>    <span class="hljs-type">sem_t</span> slots;    <span class="hljs-comment">/* Counts available slots */</span><br>    <span class="hljs-type">sem_t</span> items;    <span class="hljs-comment">/* Counts available items */</span><br>&#125; <span class="hljs-type">sbuf_t</span>;<br></code></pre></td></tr></table></figure><p>​下面给出了 SBUF 函数的实现。sbuf_init 函数为缓冲区分配堆内存，设置 front 和 rear 表示一个空的缓冲区，并为三个信号量赋初始值。这个函数在调用其他三个函数中的任何一个之前调用一次。sbuf_deinit 函数是当应用程序使用完缓冲区时，释放缓冲区存储的。sbuf_insert 函数等待一个可用的槽位，对互斥锁加锁，添加项目，对互斥锁解锁，然后宣布有一个新项目可用。sbuf_remove 函数是与 sbuf_insert 函数对称的。在等待一个可用的缓冲区项目之后，对互斥锁加锁，从缓冲区的前面取出该项目，对互斥锁解锁，然后发信号通知一个新的槽位可供使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sbuf.h&quot;</span></span><br><br><span class="hljs-comment">/* Create an empty, bounded, shared FIFO buffer with n slots */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_init</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    sp-&gt;buf = Calloc(n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    sp-&gt;n = n;                       <span class="hljs-comment">/* Buffer holds max of n items */</span><br>    sp-&gt;front = sp-&gt;rear = <span class="hljs-number">0</span>;        <span class="hljs-comment">/* Empty buffer iff front == rear */</span><br>    Sem_init(&amp;sp-&gt;mutex, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);      <span class="hljs-comment">/* Binary semaphore for locking */</span><br>    Sem_init(&amp;sp-&gt;slots, <span class="hljs-number">0</span>, n);      <span class="hljs-comment">/* Initially, buf has n empty slots */</span><br>    Sem_init(&amp;sp-&gt;items, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);      <span class="hljs-comment">/* Initially, buf has zero data items */</span><br>&#125;<br><br><span class="hljs-comment">/* Clean up buffer sp */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_deinit</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp)</span><br>&#123;<br>    Free(sp-&gt;buf);<br>&#125;<br><br><span class="hljs-comment">/* Insert item onto the rear of shared buffer sp */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_insert</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp, <span class="hljs-type">int</span> item)</span><br>&#123;<br>    P(&amp;sp-&gt;slots);                           <span class="hljs-comment">/* Wait for available slot */</span><br>    P(&amp;sp-&gt;mutex);                           <span class="hljs-comment">/* Lock the buffer */</span><br>    sp-&gt;buf[(++sp-&gt;rear) % (sp-&gt;n)] = item;  <span class="hljs-comment">/* Insert the item */</span><br>    V(&amp;sp-&gt;mutex);                           <span class="hljs-comment">/* Unlock the buffer */</span><br>    V(&amp;sp-&gt;items);                           <span class="hljs-comment">/* Announce available item */</span><br>&#125;<br><br><span class="hljs-comment">/* Remove and return the first item from buffer sp */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sbuf_remove</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp)</span><br>&#123;<br>    <span class="hljs-type">int</span> item;<br>    P(&amp;sp-&gt;items);                           <span class="hljs-comment">/* Wait for available item */</span><br>    P(&amp;sp-&gt;mutex);                           <span class="hljs-comment">/* Lock the buffer */</span><br>    item = sp-&gt;buf[(++sp-&gt;front) % (sp-&gt;n)]; <span class="hljs-comment">/* Remove the item */</span><br>    V(&amp;sp-&gt;mutex);                           <span class="hljs-comment">/* Unlock the buffer */</span><br>    V(&amp;sp-&gt;slots);                           <span class="hljs-comment">/* Announce available slot */</span><br>    <span class="hljs-keyword">return</span> item;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-读者—写者问题">2. 读者—写者问题</h3><p>​读者—写者问题是互斥问题的一个概括。一组并发的线程要访问一个共享对象，例如一个主存中的数据结构，或者一个磁盘上的数据库。有些线程只读对象，而其他的线程只修改对象。修改对象的线程叫做<strong>写者</strong>。只读对象的线程叫做<strong>读者</strong>。写者必须拥有对对象的独占的访问，而读者可以和无限多个其他的读者共享对象。一般来说，有无限多个并发的读者和写者。</p><p>​读者—写者交互在现实系统中很常见。例如，一个在线航空预定系统中，允许有无限多个客户同时查看座位分配，但是正在预订座位的客户必须拥有对数据库的独占的访问。再来看另一个例子，在一个多线程缓存 Web 代理中，无限多个线程可以从共享页面缓存中取出已有的页面，但是任何向缓存中写入一个新页面的线程必须拥有独占的访问。</p><p>​读者—写者问题有几个变种，分别基于读者和写者的优先级。第一类读者—写者问题，读者优先，要求不要让读者等待，除非已经把使用对象的权限赋予了一个写者。换句话说，读者不会因为有一个写者在等待而等待。第二类读者—写者问题，写者优先，要求一旦一个写者准备好可以写，它就会尽可能快地完成它的写操作。同第一类问题不同，在一个写者后到达的读者必须等待，即使这个写者也是在等待。</p><p>​下面给出了一个对第一类读者—写者问题的解答。同许多同步问题的解答一样，这个解答很微妙，极具欺骗性地简单。信号量 w 控制对访问共享对象的临界区的访问。信号量 mutex 保护对共享变量 readcnt 的访问，readcnt 统计当前在临界区中的读者数量。每当一个写者进入临界区时，它对互斥锁 w 加锁，每当它离开临界区时，对 w 解锁。这就保证了任意时刻临界区中最多只有一个写者。另一方面，只有第一个进入临界区的读者对 w 加锁，而只有最后一个离开临界区的读者对 w 解锁。当一个读者进入和离开临界区时，如果还有其他读者在临界区中，那么这个读者会忽略互斥锁 w。这就意味着只要还有一个读者占用互斥锁 w，无限多数量的读者可以没有障碍地进入临界区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Global variables */</span><br><span class="hljs-type">int</span> readcnt;    <span class="hljs-comment">/* Initially = 0 */</span><br><span class="hljs-type">sem_t</span> mutex, w; <span class="hljs-comment">/* Both initially = 1 */</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">reader</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        P(&amp;mutex);<br>        readcnt++;<br>        <span class="hljs-keyword">if</span> (readcnt == <span class="hljs-number">1</span>) <span class="hljs-comment">/* First in */</span><br>            P(&amp;w);<br>        V(&amp;mutex);<br><br>        <span class="hljs-comment">/* Critical section */</span><br>        <span class="hljs-comment">/* Reading happens  */</span><br><br>        P(&amp;mutex);<br>        readcnt--;<br>        <span class="hljs-keyword">if</span> (readcnt == <span class="hljs-number">0</span>) <span class="hljs-comment">/* Last out */</span><br>            V(&amp;w);<br>        V(&amp;mutex);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">writer</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        P(&amp;w);<br>        <br>        <span class="hljs-comment">/* Critical section */</span><br>        <span class="hljs-comment">/* Writing happens  */</span><br><br>        V(&amp;w);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​对这两种读者—写者问题的正确解答可能导致饥饿（starvation），饥饿就是一个线程无限期地阻塞，无法进展。例如，上图所示的解答中，如果有读者不断地到达，写者就可能无限期地等待。</p><h2 id="5-5-综合：基于预线程化的并发服务器">5.5 综合：基于预线程化的并发服务器</h2><p>​我们已经知道了如何使用信号量来访问共享变量和调度对共享资源的访问。为了帮助你更清晰地理解这些思想，让我们把它们应用到一个基于称为<strong>预线程化</strong>（prethreading）技术的并发服务器上。</p><p>​在图 12-14 所示的并发服务器中，我们为每一个新客户端创建了一个新线程。这种方法的缺点是我们为每一个新客户端创建一个新线程，导致不小的代价。一个基于预线程化的服务器试图通过使用如图所示的生产者—消费者模型来降低这种开销。服务器是由一个主线程和一组工作者线程构成的。主线程不断地接受来自客户端的连接请求，并将得到的连接描述符放在一个有限缓冲区中。每一个工作者线程反复地从共享缓冲区中取出描述符，为客户端服务，然后等待下一个描述符。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7a489ee00f2f31cb7105d9f665168967.png" alt=""></p><p>​下面显示了我们怎样用 SBUF 包来实现一个预线程化的并发 echo 服务器。在初始化了缓冲区 sbuf（第 24 行）后，主线程创建了一组工作者线程（第 25 ~ 26 行）。然后它进入了无限的服务器循环，接受连接请求，并将得到的已连接描述符插入到缓冲区 sbuf 中。每个工作者线程的行为都非常简单。它等待直到它能从缓冲区中取出一个已连接描述符（第 39 行），然后调用 echo_cnt 函数回送客户端的输入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sbuf.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTHREADS 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SBUFSIZE 16</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">echo_cnt</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>;<br><br><span class="hljs-type">sbuf_t</span> sbuf; <span class="hljs-comment">/* Shared buffer of connected descriptors */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, listenfd, connfd;<br>    <span class="hljs-type">socklen_t</span> clientlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span><br>    <span class="hljs-type">pthread_t</span> tid;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br><br>    sbuf_init(&amp;sbuf, SBUFSIZE);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NTHREADS; i++)  <span class="hljs-comment">/* Create worker threads */</span><br>        Pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        clientlen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_storage);<br>        connfd = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);<br>        sbuf_insert(&amp;sbuf, connfd); <span class="hljs-comment">/* Insert connfd in buffer */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    Pthread_detach(pthread_self());<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> connfd = sbuf_remove(&amp;sbuf); <span class="hljs-comment">/* Remove connfd from buffer */</span><br>        echo_cnt(connfd);                <span class="hljs-comment">/* Service client */</span><br>        Close(connfd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​ <code>echo_cnt</code> 函数 是图 11-22 中的 echo 函数的一个版本，它在全局变量 byte_cnt 中记录了从所有客户端接收到的累计字节数。这是一段值得研究的有趣代码，因为它向你展示了一个从线程例程调用的初始化程序包的一般技术。在这种情况中，我们需要初始化 byte_cnt 计数器和 mutex 信号量。一个方法是我们为 SBUF 和 RIO 程序包使用过的，它要泰主线程显式地调用一个初始化函数。另外一个方法，在此显示的，是当第一次有某个线程调用 <code>echo_cnt</code> 函数时，使用<code> pthread_once</code> 函数（第 19 行）去调用初始化函数。这个方法的优点是它届程序包的使用更加容易。这种方法的缺点是每一次调用 <code>echo_ent</code> 都会导致调用 <code>pthread_once</code> 函数，而在大多数时候它没有做什么有用的事。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> byte_cnt; <span class="hljs-comment">/* Byte counter */</span><br><span class="hljs-type">static</span> <span class="hljs-type">sem_t</span> mutex;  <span class="hljs-comment">/* and the mutex that protects it */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">init_echo_cnt</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    Sem_init(&amp;mutex, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    byte_cnt = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">echo_cnt</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">char</span> buf[MAXLINE];<br>    <span class="hljs-type">rio_t</span> rio;<br>    <span class="hljs-type">static</span> <span class="hljs-type">pthread_once_t</span> once = PTHREAD_ONCE_INIT;<br><br>    Pthread_once(&amp;once, init_echo_cnt);<br>    Rio_readinitb(&amp;rio, connfd);<br>    <span class="hljs-keyword">while</span> ((n = Rio_readlineb(&amp;rio, buf, MAXLINE)) != <span class="hljs-number">0</span>) &#123;<br>        P(&amp;mutex);<br>        byte_cnt += n;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;server received %d (%d total) bytes on fd %d\n&quot;</span>,<br>               n, byte_cnt, connfd);<br>        V(&amp;mutex);<br>        Rio_writen(connfd, buf, n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​一旦程序包被初始化，echo_cnt 函数会初始化 RIO 带缓冲区的 I/O 包（第 20 行），然后回送从客户端接收到的每一个文本行。注意，在第 23 ~ 25 行中对共享变量 byte_cnt 的访问是被 P 和 V 操作保护的。</p><h1>6.使用线程提高并行性</h1><p>​到目前为止，在对并发的研究中，我们都假设并发线程是在单处理器系统上执行的。然而，大多数现代机器具有多核处理器。并发程序通常在这样的机器上运行得更快，因为操作系统内核在多个核上并行地调度这些并发线程，而不是在单个核上顺序地调度。在像繁忙的 Web 服务器、数据库服务器和大型科学计算代码这样的应用中利用这样的并行性是至关重要的，而且在像 Web 浏览器、电子表格处理程序和文档处理程序这样的主流应用中，并行性也变得越来越有用。</p><p>​上图给出了顺序、并发和并行程序之间的集合关系。所有程序的集合能够被划分成不相交的顺序程序集合和并发程序的集合。写顺序程序只有一条逻辑流。写并发程序有多条并发流。并行程序是一个运行在多个处理器上的并发程序。因此，并行程序的集合是并发程序集合的真子集。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/b0d8e7e8a7cac1ddc0a7fc0c4ff4fab0.png" alt=""></p><p>​将任务分配到不同线程的最直接方法是将序列划分成 t 个不相交的区域，然后给，个不同的线程每个分配一个区域。为了简单，假设 n 是 t 的倍数，这样每个区域有以 n/t 个元素。让我们来看看多个线程并行处理分配给它们的区域的不同方法。</p><p>​最简单也最直接的选择是将线程的和放入一个共享全局变量中，用互斥锁保护这个变量。下面给出了我们会如何实现这种方法。在第 28 ~ 33 行，主线程创建对等线程，然后等待它们结束。注意，主线程传递给每个对等线程一个小整数，作为唯一的线程 ID。每个对等线程会用它的线程 ID 来决定它应该计算序列的哪一部分。这个向对等线程传递一个小的唯一的线程 ID 的思想是一项通用技术，许多并行应用中都用到了它。在对等线程终止后，全局变量 gsum 包含着最终的和。然后主线程用闭合形式解答来验证结果（第 36 ~ 37 行）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXTHREADS 32</span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">sum_mutex</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>; <span class="hljs-comment">/* Thread routine */</span><br><br><span class="hljs-comment">/* Global shared variables */</span><br><span class="hljs-type">long</span> gsum = <span class="hljs-number">0</span>;          <span class="hljs-comment">/* Global sum */</span><br><span class="hljs-type">long</span> nelems_per_thread; <span class="hljs-comment">/* Number of elements to sum */</span><br><span class="hljs-type">sem_t</span> mutex;            <span class="hljs-comment">/* Mutex to protect global sum */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">long</span> i, nelems, log_nelems, nthreads, myid[MAXTHREADS];<br>    <span class="hljs-type">pthread_t</span> tid[MAXTHREADS];<br><br>    <span class="hljs-comment">/* Get input arguments */</span><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: %s &lt;nthreads&gt; &lt;log_nelems&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    nthreads = atoi(argv[<span class="hljs-number">1</span>]);<br>    log_nelems = atoi(argv[<span class="hljs-number">2</span>]);<br>    nelems = (<span class="hljs-number">1L</span> &lt;&lt; log_nelems);<br>    nelems_per_thread = nelems / nthreads;<br>    sem_init(&amp;mutex, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">/* Create peer threads and wait for them to finish */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nthreads; i++) &#123;<br>        myid[i] = i;<br>        Pthread_create(&amp;tid[i], <span class="hljs-literal">NULL</span>, sum_mutex, &amp;myid[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nthreads; i++)<br>        Pthread_join(tid[i], <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">/* Check final answer */</span><br>    <span class="hljs-keyword">if</span> (gsum != (nelems * (nelems - <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: result=%ld\n&quot;</span>, gsum);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 给出了每个对等线程执行的函数。在第 4 行中，线程从线程参数中提取出线程 ID，然后用这个 ID 来决定它要计算的序列区域（第 5 ~ 6 行）。在第 9 ~ 13 行中，线程在它的那部分序列上迭代操作，每次迭代都更新共享全局变量 gsum。注意，我们很小心地用 P 和 V 互斥操作来保护每次更新。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Thread routine for psum-mutex.c */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">sum_mutex</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    <span class="hljs-type">long</span> myid = *((<span class="hljs-type">long</span> *)vargp);          <span class="hljs-comment">/* Extract the thread ID */</span><br>    <span class="hljs-type">long</span> start = myid * nelems_per_thread; <span class="hljs-comment">/* Start element index */</span><br>    <span class="hljs-type">long</span> end = start + nelems_per_thread;  <span class="hljs-comment">/* End element index */</span><br>    <span class="hljs-type">long</span> i;<br>    <br>    <span class="hljs-keyword">for</span> (i = start; i &lt; end; i++) &#123;<br>        P(&amp;mutex);<br>        gsum += i;<br>        V(&amp;mutex);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​我们在一个四核系统上，对一个大小为 n=231<em>n</em>=231 的序列运行 psum-mutex，测量它的运行时间（以秒为单位），作为线程数的函数，得到的结果难懂又令人奇怪：</p><table><thead><tr><th>线程数</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>版本</td><td>1</td><td>2</td><td>4</td><td>8</td><td>16</td></tr><tr><td>psum-mutex</td><td>68</td><td>432</td><td>719</td><td>552</td><td>599</td></tr></tbody></table><p>​程序单线程顺序运行时非常慢，几乎比多线程并行运行时慢了一个数量级。不仅如此，使用的核数越多，性能越差。造成性能差的原因是相对于内存更新操作的开销，同步操作（P 和 V）代价太大。这突显了并行编程的一项重要教训：<strong>同步开销巨大，要尽可能避免。如果无可避免，必须要用尽可能多的有用计算弥补这个开销。</strong></p><p>​在我们的例子中，一种避免同步的方法是让每个对等线程在一个私有变量中计算它自己的部分和，这个私有变量不与其他任何线程共享，如图所示。主线程（图中未显示）定义一个全局数组 psum，每个对等线程 i 把它的部分和累积在 <strong>psum[i]</strong> 中。因为小心地给了每个对等线程一个不同的内存位置来更新，所以不需要用互斥锁来保护这些更新。唯一需要同步的地方是主线程必须等待所有的子线程完成。在对等线程结束后，主线程把 psum 向量的元素加起来，得到最终的结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Thread routine for psum-array.c */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">sum_array</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    <span class="hljs-type">long</span> myid = *((<span class="hljs-type">long</span> *)vargp);          <span class="hljs-comment">/* Extract the thread ID */</span><br>    <span class="hljs-type">long</span> start = myid * nelems_per_thread; <span class="hljs-comment">/* Start element index */</span><br>    <span class="hljs-type">long</span> end = start + nelems_per_thread;  <span class="hljs-comment">/* End element index */</span><br>    <span class="hljs-type">long</span> i;<br><br>    <span class="hljs-keyword">for</span> (i = start; i &lt; end; i++) &#123;<br>        psum[myid] += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​在四核系统上运行 psum-array 时，我们看到它比 psum-mutex 运行得快好几个数量级：</p><table><thead><tr><th></th><th>线程数</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>版本</td><td>1</td><td>2</td><td>4</td><td>8</td><td>16</td></tr><tr><td>psum-mutex</td><td>68.00</td><td>432.00</td><td>719.00</td><td>552.00</td><td>599.00</td></tr><tr><td>psum-array</td><td>7.26</td><td>3.64</td><td>1.91</td><td>1.85</td><td>1.84</td></tr></tbody></table><p>​在第 5 章中，我们学习到了如何使用局部变量来消除不必要的内存引用。下图展示了如何应用这项原则，让每个对等线程把它的部分和累积在一个局部变量而不是全局变量中。当在四核机器上运行 psum-local 时，得到一组新的递减的运行时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Thread routine for psum-local.c */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">sum_local</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    <span class="hljs-type">long</span> myid = *((<span class="hljs-type">long</span> *)vargp);          <span class="hljs-comment">/* Extract the thread ID */</span><br>    <span class="hljs-type">long</span> start = myid * nelems_per_thread; <span class="hljs-comment">/* Start element index */</span><br>    <span class="hljs-type">long</span> end = start + nelems_per_thread;  <span class="hljs-comment">/* End element index */</span><br>    <span class="hljs-type">long</span> i, sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = start; i &lt; end; i++) &#123;<br>        sum += i;<br>    &#125;<br>    psum[myid] = sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>线程数</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>版本</td><td></td><td>4</td><td>8</td><td>16</td><td></td></tr><tr><td>psum-mutex</td><td>68.00</td><td>432.00</td><td>719.00</td><td>552.00</td><td>599.00</td></tr><tr><td>psum-array</td><td>7.26</td><td>3.64</td><td>1.91</td><td>1.85</td><td>1.84</td></tr><tr><td>psum-local</td><td>1.06</td><td>0.54</td><td>0.28</td><td>0.29</td><td>0.30</td></tr></tbody></table><p>​我们可以学习到一个重要的经验，那就是写并行程序相当棘手。对代码看上去很小的改动可能会对性能有极大的影响。</p><h1>7.其他并发问题</h1><p>​你可能已经注意到了，一旦我们要求同步对共享数据的访问，那么事情就变得复杂得多了。迄今为止，我们已经看到了用于互斥和生产者—消费者同步的技术，但这仅仅是冰山一角。同步从根本上说是很难的问题，它引出了在普通的顺序程序中不会出现的问题。这一小节是关于你在写并发程序时需要注意的一些问题的（非常不完整的）综述。为了让事情具体化，我们将以线程为例描述讨论。不过要记住，这些典型问题是任何类型的并发流操作共享资源时都会出现的。</p><h2 id="7-1-线程安全">7.1 线程安全</h2><p>​当用线程编写程序时，必须小心地编写那些具有称为<strong>线程安全性</strong>（thread safety）属性的函数。一个函数被称为<strong>线程安全的</strong>（thread-safe），当且仅当被多个并发线程反复地调用时，它会一直产生正确的结果。如果一个函数不是线程安全的，我们就说它是<strong>线程不安全的</strong>（thread-unsafe）。</p><p>我们能够定义出四个（不相交的）线程不安全函数类：</p><p>​**第 1 类：不保护共享变量的函数。**我们在图 12-16 的 thread 函数中就已经遇到了这样的问题，该函数对一个未受保护的全局计数器变量加 1。将这类线程不安全函数变成线程安全的，相对而言比较容易：利用像 P 和 V 操作这样的同步操作来保护共享的变量。这个方法的优点是在调用程序中不需要做任何修改。缺点是同步操作将减慢程序的执行时间。</p><p>​<strong>第 2 类：保持跨越多个调用的状态的函数。<strong>一个伪随机数生成器是这类线程不安全函数的简单例子。请参考下面的伪随机数生成器程序包。rand 函数是线程不安全的，因为</strong>当前调用的结果依赖于前次调用的中间结果</strong>。当调用 srand 为 rand 设置了一个种子后，我们从一个单线程中反复地调用 rand，能够预期得到一个可重复的随机数字序列。然而，如果多线程调用 rand 函数，这种假设就不再成立了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> next_seed = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">/* rand - return pseudorandom integer in the range 0..32767 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">rand</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    next_seed = next_seed * <span class="hljs-number">1103515245</span> + <span class="hljs-number">12543</span>;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span>)(next_seed &gt;&gt; <span class="hljs-number">16</span>) % <span class="hljs-number">32768</span>;<br>&#125;<br><br><span class="hljs-comment">/* srand - set the initial seed for rand() */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">srand</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> new_seed)</span><br>&#123;<br>    next_seed = new_seed;<br>&#125;<br></code></pre></td></tr></table></figure><p>​使得像 rand 这样的函数线程安全的唯一方式是重写它，使得它不再使用任何 static 数据，而是依靠调用者在参数中传递状态信息。这样做的缺点是，程序员现在还要被迫修改调用程序中的代码。在一个大的程序中，可能有成百上千个不同的调用位置，做这样的修改将是非常麻烦的，而且容易出错。</p><p>​**第 3 类：返回指向静态变量的指针的函数。**某些函数，例如 ctime 和 gethost-byname，将计算结果放在一个 static 变量中，然后返回一个指向这个变量的指针。如果我们从并发线程中调用这些函数，那么将可能发生灾难，因为正在被一个线程使用的结果会被另一个线程悄悄地覆盖了。</p><p>​有两种方法来处理这类线程不安全函数。一种选择是重写函数，使得调用者传递存放结果的变量的地址。这就消除了所有共享数据，但是它要求程序员能够修改函数的源代码。</p><p>​如果线程不安全函数是难以修改或不可能修改的（例如，代码非常复杂或是没有源代码可用），那么另外一种选择就是使用加锁—复制（lock-and-copy）技术。基本思想是将线程不安全函数与互斥锁联系起来。在每一个调用位置，对互斥锁加锁，调用线程不安全函数，将函数返回的结果复制到一个私有的内存位置，然后对互斥锁解锁。为了尽可能地减少对调用者的修改，你应该定义一个线程安全的包装函数，它执行加锁—复制，然后通过调用这个包装函数来取代所有对线程不安全函数的调用。例如，图 12-38 给出了 ctime 的一个线程安全的版本，利用的就是加锁—复制技术。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">ctime_ts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">time_t</span> *timep, <span class="hljs-type">char</span> *privatep)</span><br>&#123;<br>    <span class="hljs-type">char</span> *sharedp;<br>    <br>    P(&amp;mutex);<br>    sharedp = ctime(timep);<br>    <span class="hljs-built_in">strcpy</span>(privatep, sharedp); <span class="hljs-comment">/* Copy string from shared to private */</span><br>    V(&amp;mutex);<br>    <span class="hljs-keyword">return</span> privatep;<br>&#125;<br></code></pre></td></tr></table></figure><p>​**第 4 类：调用线程不安全函数的函数。**如果函数 f 调用线程不安全函数 g，那么 f 就是线程不安全的吗？不一定。如果 g 是第 2 类函数，即依赖于跨越多次调用的状态，那么 f 也是线程不安全的，而且除了重写 g 以外，没有什么办法。然而，如果 g 是第 1 类或者第 3 类函数，那么只要你用一个互斥锁保护调用位置和任何得到的共享数据，f 仍然可能是线程安全的。在图 12-38 中我们看到了一个这种情况很好的示例，其中我们使用加锁—复制编写了一个线程安全函数，它调用了一个线程不安全的函数。</p><h2 id="7-2-可重入性">7.2 可重入性</h2><p>​有一类重要的线程安全函数，叫做<strong>可重入函数</strong>（reentrant function），其特点在于它们具有这样一种属性：当它们被多个线程调用时，不会引用任何共享数据。尽管<strong>线程安全</strong>和<strong>可重入</strong>有时会（不正确地）被用做同义词，但是它们之间还是有清晰的技术差别，值得留意。下图展示了可重入函数、线程安全函数和线程不安全函数之间的集合关系。所有函数的集合被划分成不相交的线程安全和线程不安全函数集合。可重入函数集合是线程安全函数的一个真子集。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/875b0f4bbcc865987351ba3cb39916cb.png" alt=""></p><p>​可重入函数通常要比不可重入的线程安全的函数高效一些，因为它们不需要同步操作。更进一步来说，将第 2 类线程不安全函数转化为线程安全函数的唯一方法就是重写它，使之变为可重入的。</p><p>​检査某个函数的代码并先验地断定它是可重入的，这可能吗？不幸的是，不一定能这样。如果所有的函数参数都是传值传递的（即没有指针），并且所有的数据引用都是本地的自动栈变量（即没有引用静态或全局变量），那么函数就是<strong>显式可重入的</strong>（explicitly reentrant），也就是说，无论它是被如何调用的，都可以断言它是可重入的。</p><p>​然而，如果把假设放宽松一点，允许显式可重入函数中一些参数是引用传递的（即允许它们传递指针），那么我们就得到了一个<strong>隐式可重入的</strong>（implicitly reentrant）函数，也就是说，如果调用线程小心地传递指向非共享数据的指针，那么它是可重入的。例如，图 12-40 中的 rand_r 函数就是隐式可重入的。</p><p>​我们总是使用术语<strong>可重入的</strong>（reentrant）既包括显式可重入函数也包括隐式可重入函数。然而，认识到可重入性有时既是调用者也是被调用者的属性，并不只是被调用者单独的属性是非常重要的。</p><h2 id="7-3-在线程化的程序中使用已存在的库函数">7.3 在线程化的程序中使用已存在的库函数</h2><p>​大多数 Linux 函数，包括定义在标准 C 库中的函数（例如 malloc、free、realloc、printf 和 scanf）都是线程安全的，只有一小部分是例外。图 12-41 列出了常见的例外。（参考【110】可以得到一个完整的列表 Jstrtok 函数是一个已弃用的（不推荐使用）函数。asctime、ctime 和 localtime 函数是在不同时间和数据格式间相互来回转换时经常使用的函数。gethostbyname、gethostbyaddr 和 inet_ntoa 函数是已弃用的网络编程函数，已经分别被可重入的 getaddrinfo、getnameinfo 和 inet_ntop 函数取代（见第 11 章）。除了 rand 和 strtok 以外，所有这些线程不安全函数都是第 3 类的，它们返回一个指向静态变量的指针。如果我们需要在一个线程化的程序中调用这些函数中的某一个，对调用者来说最不惹麻烦的方法是加锁—复制。</p><table><thead><tr><th>线程不安全函数</th><th>线程不安全类</th><th>Linux 线程安全版本</th></tr></thead><tbody><tr><td>rand</td><td>2</td><td>rand_r</td></tr><tr><td>strtok</td><td>2</td><td>strtok_r</td></tr><tr><td>asctime</td><td>3</td><td>asctime_r</td></tr><tr><td>ctime</td><td>3</td><td>ctime_r</td></tr><tr><td>gethostbyaddr</td><td>3</td><td>gethostbyaddr_r</td></tr><tr><td>gethostbyname</td><td>3</td><td>gethostbyname_r</td></tr><tr><td>inet_ntoa</td><td>3</td><td>（无）</td></tr><tr><td>localtime</td><td>3</td><td>localtime_r</td></tr></tbody></table><p>然而，加锁—复制方法有许多缺点。</p><ul><li>首先，额外的同步降低了程序的速度。</li><li>第二，像 gethostbyname 这样的函数返回指向复杂结构的结构的指针，要复制整个结构层次，需要<strong>深层复制</strong>（deepcopy）结构。</li><li>第三，加锁—复制方法对像 rand 这样依赖跨越调用的静态状态的第 2 类函数并不有效。</li></ul><p>因此，Linux 系统提供大多数线程不安全函数的可重入版本。可重入版本的名字总是以 “_r” 后缀结尾。例如，asctime 的可重入版本就叫做 asctime_r。我们建议尽可能地使用这些函数。</p><h2 id="7-4-竞争">7.4 竞争</h2><p>当一个程序的正确性依赖于一个线程要在另一个线程到达 y 点之前到达它的控制流中的 x 点时，就会发生<strong>竞争</strong>（race）。通常发生竞争是因为程序员假定线程将按照某种特殊的轨迹线穿过执行状态空间，而忘记了另一条准则规定：多线程的程序必须对任何可行的轨迹线都正确工作。</p><p>例子是理解竞争本质的最简单的方法。让我们来看看下面中的简单程序。主线程创建了四个对等线程，并传递一个指向一个唯一的整数 ID 的指针到每个线程。每个对等线程复制它的参数中传递的 ID 到一个局部变量中（第 22 行），然后输出一个包含这个 ID 的信息。它看上去足够简单，但是当我们在系统上运行这个程序时，我们得到以下不正确的结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* WARNING: This code is buggy! */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 4</span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pthread_t</span> tid[N];<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        Pthread_create(&amp;tid[i], <span class="hljs-literal">NULL</span>, thread, &amp;i);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        Pthread_join(tid[i], <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/* Thread routine */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    <span class="hljs-type">int</span> myid = *((<span class="hljs-type">int</span> *)vargp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from thread %d\n&quot;</span>, myid);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​问题是由每个对等线程和主线程之间的竞争引起的。你能发现这个竞争吗？下面是发生的情况。当主线程在第 13 行创建了一个对等线程，它传递了一个指向本地栈变量 i 的指针。在此时，竞争出现在下一次在第 12 行对 i 加 1 和第 22 行参数的间接引用和赋值之间。如果对等线程在主线程执行第 12 行对 i 加 1 之前就执行了第 22 行，那么 myid 变量就得到正确的 ID。否则，它包含的就会是其他线程的 ID。令人惊慌的是，我们是否得到正确的答案依赖于内核是如何调度线程的执行的。在我们的系统中它失败了，但是在其他系统中，它可能就能正确工作，让程序员 “幸福地”察觉不到程序的严重错误.</p><p>​为了消除竞争，我们可以动态地为每个整数 ID 分配一个独立的块，并且传递给线程例程一个指向这个块的指针，如下面所示（第 12 ~ 14 行）。请注意线程例程必须释放这些块以避免内存泄漏。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 4</span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pthread_t</span> tid[N];<br>    <span class="hljs-type">int</span> i, *ptr;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        ptr = Malloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        *ptr = i;<br>        Pthread_create(&amp;tid[i], <span class="hljs-literal">NULL</span>, thread, ptr);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        Pthread_join(tid[i], <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/* Thread routine */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    <span class="hljs-type">int</span> myid = *((<span class="hljs-type">int</span> *)vargp);<br>    Free(vargp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from thread %d\n&quot;</span>, myid);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-5-死锁">7.5 死锁</h2><p>​信号量引入了一种潜在的令人厌恶的运行时错误，叫做<strong>死锁</strong>（deadlock），它指的是一组线程被阻塞了，等待一个永远也不会为真的条件。进度图对于理解死锁是一个无价的工具。例如，下图展示了一对用两个信号量来实现互斥的线程的进程图。</p><p><img src="CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7a71d94f5f90827cc50df7e9a608a5fc.png" alt=""></p><p>从这幅图中，我们能够得到一些关于死锁的重要知识：</p><ul><li>程序员使用 P 和 V 操作顺序不当，以至于两个信号量的禁止区域重叠。如果某个执行轨迹线碰巧到达了<strong>死锁状态 d</strong>，那么就不可能有进一步的进展了，因为重叠的禁止区域阻塞了每个合法方向上的进展。换句话说，程序死锁是因为每个线程都在等待其他线程执行一个根不可能发生的 V 操作。</li><li>重叠的禁止区域引起了一组称为<strong>死锁区域</strong>（deadlock region）的状态。如果一个轨迹线碰巧到达了一个死锁区域中的状态，那么死锁就是不可避免的了。轨迹线可以进入死锁区域，但是它们不可能离开。</li><li>死锁是一个相当困难的问题，因为它不总是可预测的。一些幸运的执行轨迹线将绕开死锁区域，而其他的将会陷入这个区域。图 12-44 展示了每种情况的一个示例。对于程序员来说，这其中隐含的着实令人惊慌。你可以运行一个程序 1000 次不出任何问题，但是下一次它就死锁了。或者程序在一台机器上可能运行得很好，但是在另外的机器上就会死锁。最糟糕的是，错误常常是不可重复的，因为不同的执行有不同的轨迹线。</li></ul><p>​程序死锁有很多原因，要避免死锁一般而言是很困难的。然而，当使用二元信号量来实现互斥时，如图 12-44 所示，你可以应用下面的简单而有效的规则来避免死锁：</p><p>​<strong>互斥锁加锁顺序规则：给定所有互斥操作的一个全序，如果每个线程都是以一种顺序获得互斥锁并以相反的顺序释放，那么这个程序就是无死锁的。</strong></p><p>​例如，我们可以通过这样的方法来解决图 12-44 中的死锁问题：在每个线程中先对 s 加锁，然后再对 t 加锁。图 12-45 展示了得到的进度图。</p><h1>8.小结</h1><p>​一个并发程序是由在时间上重叠的一组逻辑流组成的。在这一章中，我们学习了三种不同的构建并发程序的机制：进程、I/O 多路复用和线程。我们以一个并发网络服务器作为贯穿全章的应用程序。</p><p>​进程是由内核自动调度的，而且因为它们有各自独立的虚拟地址空间，所以要实现共享数据，必须要有显式的 IPC 机制。事件驱动程序创建它们自己的并发逻辑流，这些逻辑流被模型化为状态机，用 I/O 多路复用来显式地调度这些流。因为程序运行在一个单一进程中，所以在流之间共享数据速度很快而且很容易。线程是这些方法的混合。同基于进程的流一样，线程也是由内核自动调度的。同基于 I/O 多路复用的流一样，线程是运行在一个单一进程的上下文中的，因此可以快速而方便地共享数据。</p><p>​无论哪种并发机制，同步对共享数据的并发访问都是一个困难的问题。提出对信号量的 P 和 V 操作就是为了帮助解决这个问题。信号量操作可以用来提供对共享数据的互斥访问，也对诸如生产者—消费者程序中有限缓冲区和读者—写者系统中的共享对象这样的资源访问进行调度。一个并发预线程化的 echo 服务器提供了信号量使用场景的很好的例子。</p><p>​并发也引入了其他一些困难的问题。被线程调用的函数必须具有一种称为线程安全的属性。我们定义了四类线程不安全的函数，以及一些将它们变为线程安全的建议。可重入函数是线程安全函数的一个真子集，它不访问任何共享数据。可重入函数通常比不可重入函数更为有效，因为它们不需要任何同步原语。竞争和死锁是并发程序中出现的另一些困难的问题。当程序员错误地假设逻辑流该如何调度时，就会发生竞争。当一个流等待一个永远不会发生的事件时，就会产生死锁。</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_11_网络编程</title>
    <link href="/2024/09/02/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-11-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/09/02/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-11-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​</p><p>​所有的网络应用程序都基于相同的基本编程模型，具有相似的整体逻辑结构，并且依赖于相同的编程接口.</p><p>​网络应用依赖于很多在系统研究中已经学习过的概念，例如，进程、信号、字节顺序、存储器映射以及动态存储分配，都扮演着重要的角色。还有一些新概念要掌握。我们需要理解基本的客户端-服务器编程模型，以及如何编写使用因特网提供的服务的客户端-服务器程序。最后，我们将把所有这些概念结合起来，开发一个小的但功能齐全的 Web 服务器，能够为真实的 Web浏览器提供静态和动态的文本和图形内容。</p><h1>1.客户端-服务器编程模型</h1><p>​每个网络应用都是基于<strong>客户端一服务器模型的（Client-Server Model）</strong>。采用这个模型，一个应用是由一个服务器进程和一个或者多个客户端进程组成。服务器管理某种资源，并且通过操作这种资源来为它的客户端提供某种服务。</p><p>客户端-服务器模型中的基本操作是 <strong>事务(transaction)</strong> 如下图所示：</p><p><img src="1a22b50fb86ce85f64eb93ce88f65383.png" alt=""></p><p>一个客户端一服务器事务由四步组成:</p><ol><li>当一个客户端需要服务时，它向服务器发送一个请求，发起一个事务。例如，当 Web 浏览器需要一个文件时，它就发送一个请求给 Web 服务器。</li><li>服务器收到请求后，解释它，并以适当的方式操作它的资源。例如，当 Web服务器收到浏览器发出的请求后，它就读一个磁盘文件。</li><li>服务器给客户端发送一个响应，并等待下一个请求。例如,Web 服务器将文件发送回客户端。</li><li>客户端收到响应并处理它。例如，当Web浏览器收到来自服务器的一页后，它就在屏幕上显示此页。</li></ol><p>​请注意，这里的客户端和服务器指的是进程而非机器或主机（Host）。单台主机能够同时运行多个不同的客户端和服务器，客户端和服务器事务也可以在相同或不同的主机上执行。</p><h1>2.网络</h1><p>​对于一个主机而言，网络只是又一种 IO 设备，作为数据源和数据接收方，如下图所示：</p><p><img src="f25c5e9557a4d4b7f57d3ca856d49215.png" alt=""></p><p>一个插到 IO 总线扩展槽的适配器提供了到网络的物理接口。从网络上接收到的数据从适配器经过 IO和存储器总线拷贝到存储器，典型地是通过DMA传送，相似地，数据也能从存储器拷贝到网络。</p><p>​网络是按地理邻近度组织的分层系统，其最低层是覆盖一个建筑物或校园的局域网（Local Area Network，LAN）。迄今为止最流行的局域网技术是以太网（Ethernet）：</p><p>​一个以太网段(Ethernet segment)包括一些电缆(通常是双绞线)和一个叫做集线器的小盒<br>子，如下图所示：</p><p><img src="d9bced79ce60952052bca595f818854b.png" alt=""></p><p>​以太网段的每根电缆一端连接到主机的适配器，而另一端则连接到集线器的一个端口上。集线器不加分辨地将从一个端口上收到的每个位复制到其他所有的端口上。因此，每台主机都能看到每个位。</p><p>​每个以太网适配器都有一个全球唯一的48 位地址，它存储在这个适配器的非易失性存储器上。一台主机可以发送一段位，称为<strong>帧(frame)</strong>，到这个网段内其他任何主机。每个帧包括一些固定数量的**头部(header)**位，用来标识此帧的源和目的地址以及此帧的长度，此后紧随的就是数据位的有效载荷。每个主机适配器都能看到这个帧，但是只有目的主机实际读取它。</p><p>​使用一些电缆和叫做网桥(bridge)的小盒子，多个以太网段可以连接成较大的局域网，称为桥接以太网(bridged Bthermet)，如下图所示：</p><p><img src="920265f6598423be6c019c3105f28a7a.png" alt=""></p><p>​桥接以太网能够跨越整个建筑物或者校区。在一个桥接以太网里，一些电缆连接网桥与网桥，而另外一些连接网桥和集线器。这些电缆的带宽可以是不同的。</p><p>​为了简化局域网的表示，我们将把集线器和网桥以及连接它们的电缆画成一根水平线，如图所示：</p><p><img src="9cec68584848c4e71e36ba4944e0d79a.png" alt=""></p><p>​在层次的更高级别中，多个不兼容的局域网可以通过叫做**路由器(router)**的特殊计算机连接起来，组成一个<br>internet(互联网络)。每台路由器对于它所连接到的每个网络都有一个适配器(端口)。路由器也能连接高速点到点电话连接，这是称为WAN(Wide-Area Network，广域网)：</p><p><img src="f29d99b731b3c30893613fbe4ec1fe3c.png" alt=""></p><p>​互联网可以由使用完全不同且不兼容技术的局域网和广域网组成，这是它的一个<strong>关键特性</strong>。因此，我们必须在每台主机和路由器上运行协议软件（Protocol Software）来消除不同网络之间的差异。该软件实现的协议将管理主机和路由器如何协作以传输数据，它必须提供两个基本功能：</p><ul><li>命名方案（Naming Scheme）：为主机地址定义统一的格式，并为每台主机分配至少一个唯一标识它的互联网地址；</li><li>交付机制（Delivery Mechanism）：定义一种统一的方式将数据位封装为若干个块，即数据包（Packet）。其大小和源/目的主机地址位于包的头部（Header），而源主机发送的数据位则在有效负载（Payload）之中。</li></ul><p>​下图展示了一个主机和路由器如何使用互联网络协议在不兼容的局域网间传送数据的示<br>例。这个互联网络示例由两个局域网通过一台路由器连接而成。</p><p><img src="90d61c374dfe036a3ced9bbac66ee455.png" alt=""></p><p>​一个客户端运行在主机A上主机 A与LAN1相连，它发送了一串数据字节到运行在主机B上的服务器端，主机B则连接在LAN2上。这个过程包括8个基本步骤:</p><ol><li>运行在主机 A上的客户端进行了一个系统调用，从客户端的虚拟地址空间拷贝数据到内核缓冲区中。</li><li>主机A 上的协议软件通过在数据前附加互联网络包头和LAN1帧头，创建了一个LAN1的帧。互联网络包头寻址到互联网络主机B。LAN1帧头寻址到路由器。然后它传送此帧到适配器。注意，LAN1帧的有效载荷是一个互联网络包，而互联网络包的有效载荷是实际的用户数据。这种封装是基本的网络互联方法之一。</li><li>LAN1适配器拷贝该帧到网络上。</li><li>帧到达路由器时，路由器的LAN1适配器从电缆上读取它，并把它传送到协议软件。</li><li>路由器从互联网络包头中提取出目的互联网络地址，并用它作为路由表的索引，确定向哪里转发这个包，在本例中是LAN2。路由器剥落旧的LAN1的帧头，加上寻址到主机B的新的 LAN2 帧头，并把得到的帧传送到适配器。</li><li>路由器的 LAN2 适配器拷贝该帧到网络上。</li><li>当此帧到达主机B时，它的适配器从电缆上读到此帧，并将它传送到协议软件。</li><li>最后，主机B上的协议软件剥落包头和帧头。当服务器进行一个读取这些数据的系统调用时，协议软件最终将得到的数据拷贝到服务器的虚拟地址空间。</li></ol><p>​我们的示例抓住了互联网络思想的精髓，<strong>封装是关键</strong>。</p><h1>3.全球 IP 互联网</h1><p><img src="39ac6a93417f352865bf6dbb3440d325.png" alt=""></p><p>​几乎所有的现代计算机系统都支持 <strong>TCP/IP 协议（Transmission Control Protocol/Internet Protocol）</strong>，因此每台互联网主机上均运行着实现了该协议的软件。客户端和服务器使用 Socket 接口函数和 Unix I/O 函数混合的方式进行通信。前者通常为系统调用，它们会请求内核**（Trap into Kernel）**调用 TCP/IP 中的各种内核态函数。</p><p>在程序员看来，互联网是具有以下属性的主机集合：</p><ul><li>所有主机均映射到一组 32 位的 IP 地址；</li><li>所有 IP 地址均映射到一组标识符，即域名（Domain Name）；</li><li>一台主机上的进程可以通过连接（Connection）与其他任何主机上的进程通信。</li></ul><h2 id="3-1-IP-地址">3.1 IP 地址</h2><p>IP 地址是一个无符号的 32 位整数。由于历史原因，网络程序将其存储在如下结构体中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* IP address structure */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span>  s_addr; <span class="hljs-comment">/* Address in network byte order (big-endian) */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>​互联网中主机存储字节的顺序可能不同，因此 TCP/IP 必须为整型数据项（如数据包头部的 IP 地址）定义一个统一的网络字节顺序（大端）。即使主机的字节顺序是小端，<code>in_addr</code>结构体中的 IP 地址也会以网络字节顺序存储。Unix 提供了用于转换字节顺序的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-comment">// host to network</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">htonl</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> hostlong)</span>;<br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">htons</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> hostshort)</span>;<br><span class="hljs-comment">// Returns: value in network byte order</span><br><br><span class="hljs-comment">// network to host</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">ntohl</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> netlong)</span>;<br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">ntohs</span><span class="hljs-params">(<span class="hljs-type">unit16_t</span> netshort)</span>;<br><span class="hljs-comment">// Returns: value in host byte order</span><br></code></pre></td></tr></table></figure><p>​为了便于人类阅读，IP 地址通常以点分十进制（Dotted-Decimal）的形式表示,每个字节由它的十进制值表示，并且用句点和其他字节间分开。例如，128.2.194.242就是地址0x8002c2f2的点分十进制表示。应用程序可以使用函数<code>inet_pton</code>和<code>inet_ntop</code>对上述两种方式进行转换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">inet_pton</span><span class="hljs-params">(AF_INET, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src, <span class="hljs-type">void</span> *dst)</span>;<br><span class="hljs-comment">// Returns: 1 if OK, 0 if src is invalid dotted decimal, −1 on error</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">inet_ntop</span><span class="hljs-params">(AF_INET, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">char</span> *dst,</span><br><span class="hljs-params">                      <span class="hljs-type">socklen_t</span> size)</span>;<br><span class="hljs-comment">// Returns: pointer to a dotted-decimal string if OK, NULL on error</span><br></code></pre></td></tr></table></figure><h2 id="3-2-域名">3.2 域名</h2><p>​像 IP 地址这样较大的整数很难让人记住，因此互联网定义了一组更加人性化的域名集合并将其与 IP 地址映射。域名是由句点分隔的单词（字母、数字和破折号）序列，如<code>kittyhawk.cmcl.cs.cmu.edu</code>。域名的层级结构如下图所示：</p><p><img src="65c0a8468bf4a649d5187899831dd9bb.png" alt=""></p><p>​因特网定义了域名集合和 IP 地址集合之间的映射。直到 1988年，这个映射都是通过一个叫做 HOSTS.TXT的文本文件来手工维护的。从那以后，这个映射是通过分布世界范围内的数据库(称为 DNS(Domain Name System，域名系统))来维护的。从概念上而言，DNS数据库由上百万的如图 11-11所示的主机条目结构(host entry structure)组成的，其中每条定义了一组域名一个官方名字和一组别名)和一组IP地址之间的映射。从数学意义上讲，你可以认为每条主机条目就是一个域名和 IP 地址的等价类。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* DNS host entry structure */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span> &#123;</span><br><span class="hljs-type">char</span>*h name;<span class="hljs-comment">/*Official domain name of host */</span><br><span class="hljs-type">char</span>**h aliases;<span class="hljs-comment">/*Null-terminated array ofdomain names */</span><br><span class="hljs-type">int</span>h_addrtype ;<span class="hljs-comment">/*Host address type(AF_INET)*/</span><br><span class="hljs-type">int</span>h_length;<span class="hljs-comment">/*Length of an address,in bytes */</span><br><span class="hljs-type">char</span>**h_addr <span class="hljs-built_in">list</span>;<span class="hljs-comment">/*Null-terminated array of in_addr structs */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>​因特网应用程序通过调用 <code>gethostbyname</code>和<code>gethostbyaddr</code> 函数，从DNS数据库中检索任意的主机条目。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-keyword">struct</span> hostent *<span class="hljs-title function_">gethostbyname</span><span class="hljs-params">(constchar*ame)</span>;<br>返回:若成功则为非<span class="hljs-literal">NULL</span>指针，若出错则为<span class="hljs-literal">NULL</span>指针，同时设置herrno。<br><span class="hljs-keyword">struct</span> hostent *<span class="hljs-title function_">gethostbyaddr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *addr,<span class="hljs-type">int</span> len，<span class="hljs-number">0</span>)</span>;<br>返回:若成功则为非NUIL，若出错则为NUIL指针，同时设置herrno。<br></code></pre></td></tr></table></figure><h2 id="3-3-连接">3.3 连接</h2><p>​客户端和服务器通过连接来收发字节流并进行通信。连接是点对点，全双工（数据可以同时在两个方向上传输）且可靠的——除非发生一些灾难性的故障。</p><p>Socket 是连接的端点，每个 Socket 都对应了一个 Socket 地址。该地址由 IP 地址和 16 位整型的端口（Port）组成，表示为：<code>address:port</code>。</p><p>客户端 Socket 地址中的端口通常是其发起连接请求时由内核自动分配的，被称为临时端口（Ephemeral Port）；而服务器 Socket 地址中的端口则通常与服务永久关联，被称为知名端口（Well-known Port）。</p><p>连接由两个端点的 Socket 地址（即 Socket Pair）唯一标识，可以用元组表示为：<code>(cliaddr:cliport, servaddr:servport)</code></p><p><img src="4f42616f6ee040d112f81fdcdc4ec9d1.png" alt=""></p><h1>4.套接字接口</h1><p>​**套接字接口(socket interface)**是一组函数，它们和Unix I/O函数结合起来，用以创建网络应用。</p><p><img src="4db5ab2dba12b1db1e5d9daa79361b91.png" alt=""></p><h2 id="4-1-Socket-地址结构体">4.1 Socket 地址结构体</h2><p>​从 Linux 内核的角度来看，Socket 是连接的一个端点；而从 Linux 程序的角度来看，Socket 则是一个与描述符对应的打开文件。IPv4 Socket 地址存储在 <code>sockaddr_in</code>类型的 16 字节结构体中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* IP socket address structure */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span>  &#123;</span><br><br>    <span class="hljs-type">uint16_t</span>        sin_family;  <span class="hljs-comment">/* Protocol family (always AF_INET) */</span><br><br>    <span class="hljs-type">uint16_t</span>        sin_port;    <span class="hljs-comment">/* Port number in network byte order */</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span>  <span class="hljs-title">sin_addr</span>;</span>    <span class="hljs-comment">/* IP address in network byte order */</span><br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>   sin_zero[<span class="hljs-number">8</span>]; <span class="hljs-comment">/* Pad to sizeof(struct sockaddr) */</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>​<code>sin_family</code>字段为<code>AF_INET</code>，<code>sin_port</code>字段为 16 位端口号，<code>sin_addr</code>字段中包含 32 位 IP 地址。IP 地址和端口号始终以网络字节顺序（大端）存储。</p><p>​在调用函数<code>connect</code>、<code>bind</code>和<code>accept</code>时，我们需要传入一个指向 Socket 地址结构体的指针。由于 Socket 有多种类型，不同协议的 Socket 地址结构体类型也有所不同。如 IPv6 Socket 地址存储在<code>sockaddr_in6</code>类型的结构体中，<code>sin_family</code>字段为<code>AF_INET6</code>；Unix Domain Socket 地址存储在<code>sockaddr_un</code>类型的结构体中，<code>sin_family</code>字段为<code>AF_UNIX</code>。然而在 Socket 接口设计者所处的时代，C 还并不支持使用<code>void *</code>指针。于是他们只好重新定义一个适用于所有协议的<code>sockaddr</code>结构体，然后要求应用程序将任何与协议有关的结构体指针转换为这种通用的结构体指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Generic socket address structure (for connect, bind, and accept) */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> &#123;</span><br><br>    <span class="hljs-type">uint16_t</span>  sa_family;    <span class="hljs-comment">/* Protocol family */</span><br><br>    <span class="hljs-type">char</span>      sa_data[<span class="hljs-number">14</span>];  <span class="hljs-comment">/* Address data  */</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>​使用时，要将<code>sockaddr_in</code>强制转换成<code>sockaddr</code>:</p><h2 id="4-2-socket函数">4.2 <code>socket</code>函数</h2><p>​客户端和服务器使用<code>socket</code>函数创建一个 Socket 文件描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">socket</span><span class="hljs-params">(<span class="hljs-type">int</span> domain, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> protocol)</span>;<br><br><span class="hljs-comment">// Returns: nonnegative descriptor if OK, −1 on erro</span><br></code></pre></td></tr></table></figure><p>我们通常使用以下参数调用该函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">clientfd = Socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>​其中，<code>AF_INET</code>代表使用 32 位 IP 地址，<code>SOCK_STREAM</code>表示 Socket 将成为连接的端点。该函数返回的描述符<code>clientfd</code>只是部分打开，还不能进行读写。</p><h2 id="4-3-connect函数">4.3 <code>connect</code>函数</h2><p>​客户端调用<code>connect</code>函数与服务器建立连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">connect</span><span class="hljs-params">(<span class="hljs-type">int</span> clientfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr,</span><br><span class="hljs-params"></span><br><span class="hljs-params">            <span class="hljs-type">socklen_t</span> addrlen)</span>;<br><br><span class="hljs-comment">//Returns: 0 if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>​该函数尝试连接 Socket 地址为<code>addr</code>的服务器，参数<code>addrlen</code>是结构体<code>sockaddr_in</code>的大小。<code>connect</code>函数在连接建立或发生错误前会一直阻塞，若建立成功则 Socket 描述符<code>clientfd</code>便可进行读写.并且得到的连接是由套接字对: (x:y,serv_addr.sin_addr:serv addr.sin port)</p><p>刻画的，其中x表示客户端的正地址，而y表示临时端口，它唯一地确定了客户端主机上的客户端进程。</p><h2 id="4-4-bind函数">4.4 <code>bind</code>函数</h2><p>​<code>bind</code>函数请求内核将参数<code>addr</code>中的服务器 Socket 地址与 Socket 描述符<code>sockfd</code>相关联，参数<code>addrlen</code>是结构体<code>sockaddr_in</code>的大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr,</span><br><span class="hljs-params"></span><br><span class="hljs-params">         <span class="hljs-type">socklen_t</span> addrlen)</span>;<br><br><span class="hljs-comment">// Returns: 0 if OK, −1 on error</span><br></code></pre></td></tr></table></figure><h2 id="4-5-listen函数">4.5 <code>listen</code>函数</h2><p>​<strong>默认情况下</strong>，内核假定<code>socket</code>函数创建的描述符是用于客户端连接的。因此服务器需要调用<code>listen</code>函数告诉内核参数<code>sockfd</code>用于服务器而非客户端：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">int</span> backlog)</span>;<br><br><span class="hljs-comment">// Returns: 0 if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>​参数<code>backlog</code>是内核开始拒绝请求前应当排队的未完成连接请求数，通常设为 1024。</p><h2 id="4-6-accept函数">4.6 <code>accept</code>函数</h2><p>​服务器调用<code>accept</code>函数等待客户端的连接请求到达监听描述符<code>listenfd</code>，然后将客户端 Socket 地址写入到<code>addr</code>中，最后返回一个可使用 Unix I/O 函数与客户端通信的连接描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(<span class="hljs-type">int</span> listenfd, <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">int</span> *addrlen)</span>;<br><br><span class="hljs-comment">// Returns: nonnegative connected descriptor if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>​<code>accept</code> 函数等待来自客户端的连接请求到达侦听描述符1istenfd，然后在 addr 中填写客户端的套接字地址，并返回一个<strong>已连接描述符(connected descriptor)</strong>，这个描述符可被用来利用 Unix I/0 函数与客户端通信。</p><p>​监听描述符作为客户端发起连接请求的端点，通常只会创建一次，在服务器的生命周期内存在；连接描述符是客户端与服务器之间已建立的连接的端点，在每次服务器接受连接请求时创建，并且仅在服务器为客户端提供服务时存在：</p><p><img src="050955d1aa38c9528acd46a58c1ecd57.png" alt=""></p><p>​在连接建立之后，客户端和服务器可以分别通过读写<code>clientfd</code>和<code>connfd</code>来传输数据。</p><h2 id="4-7-主机和服务转换">4.7 主机和服务转换</h2><p>​我们可以将<code>getaddrinfo</code>和<code>getnameinfo</code>函数与 Socket 接口函数结合，编写适用于任何版本 IP 协议的网络程序。</p><h3 id="getaddrinfo函数"><code>getaddrinfo</code>函数</h3><p>​<code>getaddrinfo</code>函数将主机名（或主机地址）和服务名（或端口号）转换为 Socket 地址结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> &#123;</span><br><br>    <span class="hljs-type">int</span>     ai_flags;           <span class="hljs-comment">/* Hints argument flags */</span><br><br>    <span class="hljs-type">int</span>     ai_family;          <span class="hljs-comment">/* First arg to socket function */</span><br><br>    <span class="hljs-type">int</span>     ai_socktype;        <span class="hljs-comment">/* Second arg to socket function */</span><br><br>    <span class="hljs-type">char</span>    ai_protocol;        <span class="hljs-comment">/* Third arg to socket function  */</span><br><br>    <span class="hljs-type">char</span>    *ai_canonname;      <span class="hljs-comment">/* Canonical hostname */</span><br><br>    <span class="hljs-type">size_t</span>  ai_addrlen;         <span class="hljs-comment">/* Size of ai_addr struct */</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">sockaddr</span> *<span class="hljs-title">ai_addr</span>;</span>  <span class="hljs-comment">/* Ptr to socket address structure */</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ai_next</span>;</span>  <span class="hljs-comment">/* Ptr to next item in linked list */</span>      <br><br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getaddrinfo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *host, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *service,</span><br><span class="hljs-params"></span><br><span class="hljs-params">                <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> addrinfo *hints,</span><br><span class="hljs-params"></span><br><span class="hljs-params">                <span class="hljs-keyword">struct</span> addrinfo **result)</span>;<br><br><span class="hljs-comment">// Returns: 0 if OK, nonzero error code on error</span><br></code></pre></td></tr></table></figure><p>​该函数会根据hints指定的规范分配并初始化一个addrinfo结构体链表，其中每个结构体的ai_addr字段都指向一个与host和service对应的 Socket 地址，result指向链表头部:</p><p><img src="20220816134619.png" alt=""></p><p>​参数<code>host</code>可以是域名，也可以是数字地址（如点分十进制 IP 地址）；参数<code>service</code>可以是服务名称（如 <code>http</code>），也可以是十进制端口号。如果我们不需要 Socket 地址中的主机名，就可以将<code>host</code>设为<code>NULL</code>。对于服务名来说也是如此，不过两者不能同时为<code>NULL</code>。</p><p>​客户端在调用该函数后会遍历上述链表，依次使用每个 Socket 地址作为参数调用<code>socket</code>和<code>connect</code>直至成功并建立连接；服务器在调用该函数后会遍历上述链表，依次使用每个 Socket 地址作为参数调用<code>socket</code>和<code>bind</code>直至成功且描述符被绑定到一个有效的 Socket 地址。</p><p>​细心的读者可能会疑惑为什么<code>getaddrinfo</code>会为同一个<code>host</code>和<code>service</code>初始化多个<code>addrinfo</code>结构体，这是因为：主机可能是多宿主的（Multihomed），可以通过多种协议（如 IPv4 和 IPv6）访问；客户端可以通过不同的 Socket 类型（如<code>SOCK_STREAM</code>和<code>SOCK_DGRAM</code>）访问相同的服务。因此通常我们会根据需求设置<code>hints</code>参数，以使函数生成我们期望的 Socket 地址。</p><p>​当<code>hints</code>作为参数传递时，只有<code>ai_family</code>、<code>ai_socktype</code>、<code>ai_protocol</code>和<code>ai_flags</code>字段可以被设置，其他字段必须为 0 或<code>NULL</code>。在实际使用中，我们调用 <a href="https://pubs.opengroup.org/onlinepubs/7908799/xsh/memset.html"><code>memset</code></a> 函数将<code>hints</code>归零，然后设置以下字段：</p><ul><li><p><code>ai_family</code>为<code>AF_INET</code>时，该函数将生成 IPv4 Socket 地址；<code>ai_family</code>为<code>AF_INET6</code>时，该函数将生成 IPv6 Socket 地址；</p></li><li><p>对于面向连接的网络应用程序，<code>ai_socktype</code>应当设为<code>SOCK_STREAM</code>；</p></li><li><pre><code class="hljs">ai_flags<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  是能够修改函数默认行为的位掩码，主要包括：<br><br>  - `AI_ADDRCONFIG`：仅当本地主机使用 IPv4 时生成 IPv4 Socket 地址；<br>  - `AI_CANONNAME`：默认情况下，`addrinfo`结构体内的`ai_canonname`字段为`NULL`。若设置该掩码，函数会将链表中第一个`addrinfo`结构体内的`ai_canonname`字段指向主机的规范（官方）名称（如上图所示）；<br>  - `AI_NUMERICSERV`：强制参数`service`使用端口号；<br>  - `AI_PASSIVE`：服务器可以使用该函数生成的 Socket 地址创建监听描述符。在这种情况下，参数`host`应当设为`NULL`，表示服务器的所有 IP 地址均可用于连接（即`INADDR_ANY`或 <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>）；<br><br>当`getaddrinfo`初始化`addrinfo`结构体链表时，它会填充除`ai_flags`之外的所有字段。`ai_family`、`ai_socktype`和`ai_protocol`可以直接传递给`socket`函数，`ai_addr`和`ai_addrlen`可以直接传递给`connect`和`bind`函数。因此我们能够使用它编写适用于任何版本 IP 协议的客户端和服务器。<br><br>为了避免内存泄漏，应用程序最终必须调用`freeaddrinfo`函数释放链表：<br><br>```c<br>void freeaddrinfo(struct addrinfo *result)<span class="hljs-comment">;</span><br><br><span class="hljs-title">// Returns:</span> nothing<br><br></code></pre></td></tr></table></figure></code></pre></li></ul><p><code>getaddrinfo</code>函数会返回非零错误码，应用程序可以调用<code>gai_strerror</code>函数将其转换为消息字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title">gai_strerror</span><span class="hljs-params">(<span class="hljs-type">int</span> errcode)</span></span>;<br><br><span class="hljs-comment">// Returns: error message</span><br></code></pre></td></tr></table></figure><h3 id="getnameinfo函数"><code>getnameinfo</code>函数</h3><p>​<code>getnameinfo</code>函数是<code>getaddrinfo</code>的逆函数，它将 Socket 地址结构体转换为对应的主机名和服务名：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getnameinfo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *sa, <span class="hljs-type">socklen_t</span> salen,</span><br><span class="hljs-params"></span><br><span class="hljs-params">                <span class="hljs-type">char</span> *host, <span class="hljs-type">size_t</span> hostlen,</span><br><span class="hljs-params"></span><br><span class="hljs-params">                <span class="hljs-type">char</span> *service, <span class="hljs-type">size_t</span> servlen, <span class="hljs-type">int</span> flags)</span>;<br><br><span class="hljs-comment">// Returns: 0 if OK, nonzero error code on error</span><br></code></pre></td></tr></table></figure><p>​参数<code>sa</code>指向一个大小为<code>salen</code>字节的 Socket 地址结构体，<code>host</code>指向一个大小为<code>hostlen</code>字节的缓冲区，而<code>service</code>则指向一个大小为<code>servlen</code>字节的缓冲区。该函数将<code>sa</code>转换为主机名和服务名字符串，然后将它们复制到<code>host</code>和<code>service</code>指向的缓冲区。如果该函数返回非零错误代码，应用程序可以调用<code>gai_strerror</code>将其转换为消息字符串。</p><p>如果我们不需要主机名，就可以将<code>host</code>设为<code>NULL</code>。对于服务名来说也是如此，不过两者不能同时为<code>NULL</code>。</p><p>参数<code>flags</code>是修改函数默认行为的位掩码，包括：</p><ul><li><code>NI_NUMERICHOST</code>：默认情况下，函数将在<code>host</code>指向的缓冲区中生成一个域名。若设置该掩码，函数会生成一个数字地址字符串；</li><li><code>NI_NUMERICSERV</code>：默认情况下，函数将在<code>/etc/services</code>文件中查找并生成服务名。若设置该掩码，函数会跳过查找并生成端口号。</li></ul><p>如下示例程序使用<code>getaddrinfo</code>和<code>getnameinfo</code>函数实现域名解析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br><br>&#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">p</span>, *<span class="hljs-title">listp</span>, <span class="hljs-title">hints</span>;</span><br><br>    <span class="hljs-type">char</span> buf[MAXLINE];<br><br>    <span class="hljs-type">int</span> rc, flags;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br><br>    &#123;<br><br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;domain name&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Get a list of addrinfo records */</span><br><br>    <span class="hljs-built_in">memset</span>(&amp;hints, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> addrinfo));<br><br>    hints.ai_family = AF_INET;       <span class="hljs-comment">/* IPv4 only */</span><br><br>    hints.ai_socktype = SOCK_STREAM; <span class="hljs-comment">/* Connections only */</span><br><br>    <span class="hljs-keyword">if</span> ((rc = getaddrinfo(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, &amp;hints, &amp;listp)) != <span class="hljs-number">0</span>)<br><br>    &#123;<br><br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;getaddrinfo error: %s\n&quot;</span>, gai_strerror(rc));<br><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br>    &#125;<br><br>    <br><br>    <span class="hljs-comment">/* Walk the list and display each IP address */</span><br><br>    flags = NI_NUMERICHOST; <span class="hljs-comment">/* Display address string instead of domain name */</span><br><br>    <span class="hljs-keyword">for</span> (p = listp; p; p = p-&gt;ai_next)<br><br>    &#123;<br><br>        getnameinfo(p-&gt;ai_addr, p-&gt;ai_addrlen, buf, MAXLINE, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, flags);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br><br>    &#125;<br><br>    <br><br>    <span class="hljs-comment">/* Clean up */</span><br><br>    freeaddrinfo(listp);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-8-Socket-接口的辅助函数">4.8 Socket 接口的辅助函数</h2><p><code>getaddrinfo</code>和 Socket 接口函数并不易于使用，我们可以使用更高级的辅助函数<code>open_clientfd</code>和<code>open_listenfd</code>包装它们。</p><h3 id="open-clientfd函数"><code>open_clientfd</code>函数</h3><p>​我们发现将 socket和 connect函数包装成一个叫做<code>open_clientfd </code>的辅助函数是很<br>方便的，客户端调用<code>open_clientfd</code>函数与服务器建立连接:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">open_clientfd</span><span class="hljs-params">(<span class="hljs-type">char</span> *hostname, <span class="hljs-type">char</span> *port)</span>;<br><br><span class="hljs-comment">// Returns: descriptor if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>​参数<code>hostname</code>是服务器所在的主机名，参数<code>port</code>是服务器监听的端口号。函数返回一个打开的 Socket 描述符，客户端可以使用 Unix I/O 函数对其读写。该函数的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">open_clientfd</span><span class="hljs-params">(<span class="hljs-type">char</span> *hostname, <span class="hljs-type">char</span> *port)</span><br><br>&#123;<br><br>    <span class="hljs-type">int</span> clientfd;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hints</span>, *<span class="hljs-title">listp</span>, *<span class="hljs-title">p</span>;</span><br><br><br><br>    <span class="hljs-comment">/* Get a list of potential server addresses */</span><br><br>    <span class="hljs-built_in">memset</span>(&amp;hints, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> addrinfo));<br><br>    hints.ai_socktype = SOCK_STREAM; <span class="hljs-comment">/* Open a connection */</span><br><br>    hints.ai_flags = AI_NUMERICSERV; <span class="hljs-comment">/* ... using a numeric port arg. */</span><br><br>    hints.ai_flags |= AI_ADDRCONFIG; <span class="hljs-comment">/* Recommended for connections */</span><br><br>    getaddrinfo(hostname, port, &amp;hints, &amp;listp);<br><br><br><br>    <span class="hljs-comment">/* Walk the list for one that we can successfully connect to */</span><br><br>    <span class="hljs-keyword">for</span> (p = listp; p; p = p-&gt;ai_next)<br><br>    &#123;<br><br>        <span class="hljs-comment">/* Create a socket descriptor */</span><br><br>        <span class="hljs-keyword">if</span> ((clientfd = socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol)) &lt; <span class="hljs-number">0</span>)<br><br>            <span class="hljs-keyword">continue</span>; <span class="hljs-comment">/* Socket failed, try the next */</span><br><br>        <span class="hljs-comment">/* Connect to the server */</span><br><br>        <span class="hljs-keyword">if</span> (connect(clientfd, p-&gt;ai_addr, p-&gt;ai_addrlen) != <span class="hljs-number">-1</span>)<br><br>            <span class="hljs-keyword">break</span>;       <span class="hljs-comment">/* Success */</span><br><br>        Close(clientfd); <span class="hljs-comment">/* Connect failed, try another */</span><br><br>    &#125;<br><br><br><br>    <span class="hljs-comment">/* Clean up */</span><br><br>    freeaddrinfo(listp);<br><br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-comment">/* All connects failed */</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">else</span>    <span class="hljs-comment">/* The last connect succeeded */</span><br><br>        <span class="hljs-keyword">return</span> clientfd;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="open-listenfd函数"><code>open_listenfd</code>函数</h3><p>​我们发现将 <code>socket</code>、<code>bind</code>和<code>listen</code>函数结合成一个叫做<code>open_listenfd</code> 的辅助函数是很有帮助的，服务器调用<code>open_listenfd</code>函数创建一个能够接受连接请求的监听描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">open_listenfd</span><span class="hljs-params">(<span class="hljs-type">char</span> *port)</span>;<br><br><span class="hljs-comment">// Returns: descriptor if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>参数<code>port</code>是服务器监听的端口号。该函数的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">open_listenfd</span><span class="hljs-params">(<span class="hljs-type">char</span> *port)</span><br><br>&#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hints</span>, *<span class="hljs-title">listp</span>, *<span class="hljs-title">p</span>;</span><br><br>    <span class="hljs-type">int</span> listenfd, optval = <span class="hljs-number">1</span>;<br><br><br><br>    <span class="hljs-comment">/* Get a list of potential server addresses */</span><br><br>    <span class="hljs-built_in">memset</span>(&amp;hints, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> addrinfo));<br><br>    hints.ai_socktype = SOCK_STREAM;             <span class="hljs-comment">/* Accept connections */</span><br><br>    hints.ai_flags = AI_PASSIVE | AI_ADDRCONFIG; <span class="hljs-comment">/* ... on any IP address */</span><br><br>    hints.ai_flags |= AI_NUMERICSERV;            <span class="hljs-comment">/* ... using port number */</span><br><br>    getaddrinfo(<span class="hljs-literal">NULL</span>, port, &amp;hints, &amp;listp);<br><br><br><br>    <span class="hljs-comment">/* Walk the list for one that we can bind to */</span><br><br>    <span class="hljs-keyword">for</span> (p = listp; p; p = p-&gt;ai_next)<br><br>    &#123;<br><br>        <span class="hljs-comment">/* Create a socket descriptor */</span><br><br>        <span class="hljs-keyword">if</span> ((listenfd = socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol)) &lt; <span class="hljs-number">0</span>)<br><br>            <span class="hljs-keyword">continue</span>; <span class="hljs-comment">/* Socket failed, try the next */</span><br><br>        <span class="hljs-comment">/* Eliminates &quot;Address already in use&quot; error from bind */</span><br><br>        Setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,<br><br>                   (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *)&amp;optval, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>        <span class="hljs-comment">/* Bind the descriptor to the address */</span><br><br>        <span class="hljs-keyword">if</span> (bind(listenfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == <span class="hljs-number">0</span>)<br><br>            <span class="hljs-keyword">break</span>;       <span class="hljs-comment">/* Success */</span><br><br>        Close(listenfd); <span class="hljs-comment">/* Bind failed, try the next */</span><br><br>    &#125;<br><br>    <span class="hljs-comment">/* Clean up */</span><br><br>    freeaddrinfo(listp);<br><br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-comment">/* No address worked */</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">/* Make it a listening socket ready to accept connection requests */</span><br><br>    <span class="hljs-keyword">if</span> (listen(listenfd, LISTENQ) &lt; <span class="hljs-number">0</span>)<br><br>    &#123;<br><br>        Close(listenfd);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> listenfd;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在第 20 行中我们使用<code>Setsockopt</code>函数（见 <a href="http://csapp.cs.cmu.edu/2e/ics2/code/src/csapp.c">csapp.c</a>）配置服务器，使其能够在重新启动后立即开始接受连接请求。默认情况下，重新启动的服务器会在大约 30 秒内拒绝来自客户端的连接，这将严重影响调试。</p><h2 id="4-9-示例-Echo-客户端和服务器">4.9 示例 Echo 客户端和服务器</h2><p>​Client.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp/csapp.h&quot;</span></span><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br><br>&#123;<br><br>    <span class="hljs-type">int</span> clientfd;<br><br>    <span class="hljs-type">char</span> *host, *port, buf[MAXLINE];<br><br>    <span class="hljs-type">rio_t</span> rio;<br><br><br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br><br>    &#123;<br><br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;host&gt; &lt;port&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<br><br>    host = argv[<span class="hljs-number">1</span>];<br><br>    port = argv[<span class="hljs-number">2</span>];<br><br>    clientfd = Open_clientfd(host, port);<br><br>    Rio_readinitb(&amp;rio, clientfd);<br><br>    <span class="hljs-keyword">while</span> (Fgets(buf, MAXLINE, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)<br><br>    &#123;<br><br>        Rio_writen(clientfd, buf, <span class="hljs-built_in">strlen</span>(buf));<br><br>        Rio_readlineb(&amp;rio, buf, MAXLINE);<br><br>        Fputs(buf, <span class="hljs-built_in">stdout</span>);<br><br>    &#125;<br><br>    Close(clientfd);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在与服务器建立连接之后，客户端进入 While 循环。它不断从标准输入中读取文本行（<code>Fgets</code>），然后将文本行发送到服务器（<code>Rio_writen</code>）。接下来再读取服务器的返回（<code>Rio_readlineb</code>），最终将结果打印到标准输出（<code>Fputs</code>）。当用户键入 Ctrl+D 时，循环中止，客户端随后关闭描述符<code>clientfd</code>。</p><p>该客户端连接的服务器代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp/csapp.h&quot;</span></span><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> <span class="hljs-title">SA</span>;</span><br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">echo</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span><br><br>&#123;<br><br>    <span class="hljs-type">size_t</span> n;<br><br>    <span class="hljs-type">char</span> buf[MAXLINE];<br><br>    <span class="hljs-type">rio_t</span> rio;<br><br><br><br>    Rio_readinitb(&amp;rio, connfd);<br><br>    <span class="hljs-keyword">while</span> ((n = Rio_readlineb(&amp;rio, buf, MAXLINE)) != <span class="hljs-number">0</span>)<br><br>    &#123;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;server received %d bytes\n&quot;</span>, (<span class="hljs-type">int</span>)n);<br><br>        Rio_writen(connfd, buf, n);<br><br>    &#125;<br><br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br><br>&#123;<br><br>    <span class="hljs-type">int</span> listenfd, connfd;<br><br>    <span class="hljs-type">socklen_t</span> clientlen;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span> <span class="hljs-comment">/* Enough space for any address */</span><br><br>    <span class="hljs-type">char</span> client_hostname[MAXLINE], client_port[MAXLINE];<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br><br>    &#123;<br><br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<br><br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br><br>    &#123;<br><br>        clientlen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_storage);<br><br>        connfd = accept(listenfd, (SA *)&amp;clientaddr, &amp;clientlen);<br><br>        getnameinfo((SA *)&amp;clientaddr, clientlen, client_hostname, MAXLINE,<br><br>                    client_port, MAXLINE, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connected to (%s, %s)\n&quot;</span>, client_hostname, client_port);<br><br>        echo(connfd);<br><br>        Close(connfd);<br><br>    &#125;<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>代码第 23 行声明的变量<code>clientaddr</code>是一个<code>sockaddr_storage</code>类型的 Socket 地址结构体，<code>accept</code>函数会在返回前将客户端的 Socket 地址填入其中。我们使用<code>sockaddr_storage</code>而非<code>sockaddr_in</code>的原因在于前者足够大，可以保存任何类型的 Socket 地址，从而使代码与协议独立（详见：<a href="https://stackoverflow.com/questions/16010622/reasoning-behind-c-sockets-sockaddr-and-sockaddr-storage">Reasoning behind C sockets sockaddr and sockaddr_storage</a>）。</p><p>服务器打开监听描述符后进入无限循环。它等待来自客户端的连接请求，打印客户端的主机名和端口，然后调用<code>echo</code>函数。该函数重复读取并写入文本行，直到<code>Rio_readlineb</code>遇到 EOF（对于网络连接，当一端的进程关闭连接，另一端的进程尝试读取流中的最后一个字节时将检测到 EOF）。一旦客户端和服务器均关闭了各自的描述符，连接便会终止。</p><p>请注意，示例的简单服务器一次只能处理一个客户端的连接请求，我们称这种类型的服务器为迭代服务器（Iterative Server）。更加复杂的并发服务器（Concurrent Server）则可以同时处理多个客户端的连接请求。</p><h1>5.Web服务器</h1><h2 id="5-1-Web-内容">5.1 Web 内容</h2><p>对于 Web 客户端和服务器，内容（Content）是与某种 MIME（Multipurpose Internet Mail Extensions）类型关联的字节序列：</p><p><img src="e302ee9a3cdf2f5f9833f9bf3ded37f7.png" alt=""></p><p>Web 服务器通过两种不同方式向客户端提供内容：</p><ul><li>获取磁盘文件（静态内容）并将其返回给客户端；</li><li>运行一个可执行文件并将其输出结果（动态内容）返回给客户端。</li></ul><p>Web 服务器返回的每条内容都与其管理的某个文件相关联，每个文件都有一个唯一的名称，即 URL（Universal Resource Locator）。</p><h2 id="5-2-HTTP-事务">5.2 HTTP 事务</h2><p>​我们可以使用<code>telnet</code>命令与互联网上任意 Web 服务器建立事务：</p><p><img src="7daca5f8fd81eb504a28b0820b0f42c8.png" alt=""></p><h3 id="1-HTTP请求">1. HTTP请求</h3><p>​一个HTTP请求的组成是这样的:一个请求行(request line)(第5行)，后面跟随零个或更多个请求报头(requestheader)(第6行)，再跟随一个空的文本行来终止报头列表(第7行)。一个请求行的形式是:<br>​<code>&lt;method&gt;&lt;uri&gt;&lt;version</code><br>HTTP支持许多不同的方法，包括GET、POST、OPTIONS、HEAD、PUT、DELETE和TRACE。我们将只讨论广为应用的GET方法。GET方法指导服务器生成和返回URI(UniformResource Identifer，统一资源标识符)标识的内容。URI是相应的URL的后缀，包括文件名和可选的参数。</p><h3 id="2-HTTP-响应">2. HTTP 响应</h3><p>​HTTP响应和HTTP请求是相似的。一个HTTP响应的组成是这样的:一个响应行(response line)(第8行)后面跟随着零个或更多的响应报头(response header)(第9~ 13行)，再跟随一个终止报头的空行(第14行)，再跟随一个响应主体(response body)(第15~17行)。一个响应行的格式是<br><code>&lt;status code&gt;&lt;status message&gt;&lt;version&gt;</code><br>​版本字段描述的是响应所遵循的HTTP版本。状态码(status code)是一个三位的正整数指明对请求的处理。状态消息(status message)给出与错误代码等价的英文描述。下图列出了一些常见的状态码，以及它们相应的消息。第9~ 13行的响应报头提供了关于响应的附加信息。针对我们的目的，两个最重要的报头是Content-ype(第12行)，它告诉客户端响应主体中内容的 MIME类型:以及Content-Length(第13行)，用来指示响应主体的字节大小。<br>​第 14行的终止响应报头的空文本行，其后跟随着响应主体，响应主体中包含着被请求的内容。</p><p><img src="870bd781b9a3d3595e94f8ebea1d6609.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_10_系统级I/O</title>
    <link href="/2024/09/02/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-10-%E7%B3%BB%E7%BB%9F%E7%BA%A7I-O/"/>
    <url>/2024/09/02/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-10-%E7%B3%BB%E7%BB%9F%E7%BA%A7I-O/</url>
    
    <content type="html"><![CDATA[<p>在Unix 系统中，是通过使用由内核提供的系统级 Unix I/O 函数来实现这些较高级别的 I/0 函数的。大多数时候，高级别 IO 函数工作良好，没有必要直接使用 Unix I/O。那么为什么还要麻烦地学习 Unix I/O 呢?</p><ul><li>了解 UnixIO 将帮助你理解其他的系统概念。I/O是系统操作不可或缺的一部分，因此我们经常遇到 IO 和其他系统概念之间的循环依赖。例如，I/O 在进程的创建和执行中扮演着关键的角色。反过来，进程创建又在不同进程间的文件共享中扮演着关键角色。因此，要真正理解 I/O，你必须理解进程，反之亦然。在对存储器层次结构、链接和加载、进程以及虚拟存储器的讨论中，我们已经接触了I0的某些方面。既然你对这些概念有了比较好的理解，我们就能闭合这个循环，更加深入地研究 I/O。</li><li>有时你除了使用Unix I/O以外别无选择。在某些重要的情况下，使用高级 I/O 函数不太可能，或者不太合适。例如，标准 I/O库没有提供读取文件元数据的方式，如文件大小或文件创建时间。另外，I/O库还存在一些问题，使得用它来进行网络编程非常冒险。</li></ul><h1>1.Unix I/O</h1><p>​一个Unix文件就是一个m个字节的序列:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>B</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>B</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>B</mi><mi>k</mi></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>B</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">B_0,B_1,…,B_k,…,B_{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>​所有的 IO 设备，如网络、磁盘和终端，都被模型化为<strong>文件</strong>，而所有的输入和输出都被当做对相应文件的读和写来执行。这种将设备优雅地映射为文件的方式，允许Unix内核引出一个简单、低级的应用接口，称为 Unix I/O，这使得所有的输入和输出都能以一种统一且一致的方式来执行:</p><ul><li><p>打开文件。一个应用程序通过要求内核打开相应的文件，来宣告它想要访问一个 IO 设备。内核返回一个小的非负整数，叫做描述符，它在后续对此文件的所有操作中标识这个文件。内核记录有关这个打开文件的所有信息。应用程序只需记住这个描述符。</p><p>​Unix 外壳创建的每个进程开始时都有三个打开的文件:</p><ul><li>标准输入(描述符为0)</li><li>标准输出(描述符为1)</li><li>标准错误(描述符为2)</li></ul><p>头文件&lt;unistd.h&gt;定义了常量</p><ul><li>STDIN_FILENO</li><li>STDOUT_FILENO</li><li>STDERR_FILENO</li></ul><p>它们可用来代替显式的描述符值。</p></li><li><p>改变当前的文件位置。对于每个打开的文件，内核保持着一个文件位置k，初始为0。这个<br>文件位置是从文件开头起始的字节偏移量。应用程序能够通过执行seek 操作，显式地设置<br>文件的当前位置为 k。</p></li><li><p>读写文件。一个读操作就是从文件拷贝n&gt;0个字节到存储器，从当前文件位置k开始<br>然后将k增加到k+n。给定一个大小为m字节的文件，当k&gt;m时执行读操作会触发一<br>个称为 end-of-file(EOF)的条件，应用程序能检测到这个条件。在文件结尾处并没有明确的“EOF符号”</p><p>​类似地，写操作就是从存储器拷贝n&gt;0个字节到一个文件，从当前文件位置k开始然后更新 k。</p></li><li><p>关闭文件。当应用完成了对文件的访问之后，它就通知内核关闭这个文件。作为响应，内核释放文件打开时创建的数据结构，并将这个描述符恢复到可用的描述符池中。无论一个进程因为何种原因终止时，内核都会关闭所有打开的文件并释放它们的存储器资源。</p></li></ul><h2 id="文件">文件</h2><p>每个 Linux 文件都有一个表征其在系统中角色的类型：</p><ul><li>常规文件（Regular File）：对于应用程序来说，常规文件分为仅包含 ASCII 或 Unicode 字符的文本文件（Text File）和二进制文件（Binary File）；但对于内核而言，两者没有区别。Linux 文本文件由一系列文本行（Text Line）组成，其中每一行都以换行符<code>\n</code>结尾；</li><li>目录（Directory）：目录是由链接（Link）数组构成的文件。链接将一个文件名映射到一个文件，该文件可能是另一个目录（如下图所示）。每个目录中至少包含两个链接：<code>.</code>指向目录本身，而<code>..</code>指向上级目录；</li><li>Socket：用于通过网络与另一个进程通信的文件。</li></ul><p><img src="20220807220609.png" alt=""></p><h1>2.打开和关闭文件</h1><p>​进程是通过调用 open函数来打开一个已存在的文件或者创建一个新文件的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">open</span><span class="hljs-params">(<span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flags, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-comment">// Returns: new file descriptor if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>返回的文件描述符(fd)是进程当前未打开的最小描述符。参数<code>flags</code>指示进程如何访问文件：</p><ul><li><code>O_RDONLY</code>：只读</li><li><code>O_WRONLY</code>：只写</li><li><code>O_RDWR</code>：读写</li></ul><p>该参数还可以与一个或多个位掩码进行或（<code>OR</code>）运算，这些位掩码提供写入的附加说明：</p><ul><li><code>O_CREAT</code>：如果文件不存在，则创建一个空文件；</li><li><code>O_TRUNC</code>：如果文件已经存在，则清空文件内容；</li><li><code>O_APPEND</code>：在每次写入操作之前，将文件位置设置为文件末尾。</li></ul><p>若文件已存在，参数<code>mode</code>应设为 0；反之，则设为新文件的访问权限位，可选项如下图所示：</p><p><img src="6d1a7134c26b06592ac25b12c73d1a97.png" alt=""></p><p>​作为上下文的一部分，每个进程都有一个umask，它是通过调用umask函数来设置的。当进程通过带某个 mode 参数的 open函数调用来创建一个新文件时，文件的访问权限位被设置为 mode&amp; ~umask。例如，假设我们给定下面的mode和umask默认值:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_MODE   S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_UMASK  S_IWGRP|S_IWOTH</span><br><br>umask(DEF_UMASK);<br>fd = Open(<span class="hljs-string">&quot;foo.txt&quot;</span>, O_CREAT|O_TRUNC|O_WRONLY, DEF_MODE);<br></code></pre></td></tr></table></figure><p>​最后，进程通过调用 <code>close</code>函数关闭一个打开的文件,若文件描述符已关闭将引发错误:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><span class="hljs-comment">// Returns: 0 if OK, −1 on error</span><br></code></pre></td></tr></table></figure><h1>3.读和写文件</h1><p>​应用程序分别调用<code>read</code>和<code>write</code>函数来执行输入和输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> n)</span>;<br><span class="hljs-comment">// Returns: number of bytes read if OK, 0 on EOF, −1 on error</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> n)</span>;<br><span class="hljs-comment">// Returns: number of bytes written if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>​<code>read</code>函数从描述符为<code>fd</code>的当前文件位置复制最多<code>n</code>个字节到内存中<code>buf</code>指向的位置，<code>write</code>函数则从内存中<code>buf</code>指向的位置复制最多<code>n</code>个字节到参数<code>fd</code>的当前位置。示例程序使用上述两种函数将标准输入以字节为单位复制到标准输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">while</span>(Read(STDIN_FILENO, &amp;c, <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>) <br>        Write(STDOUT_FILENO, &amp;c, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-secondary">            <p>​<strong>ssizet和sizet有些什么区别?</strong><br>​你可能已经注意到了，read函数有一个sizet的输入参数和一个ssizet的返回值。那么这两种类型之间有什么区别呢?size t被定义为unsigned int，而ssize t(有符号的大小)被定义为 int。read函数返回一个有符号的大小，而不是一个无符号的大小，这是因为出错时它必须返回一1。有趣的是，返回一个-1 的可能性使得 read 的最大值减小了一半,从 4GB 减小到了2GB。</p>          </div><p>在某些情况下，读写操作传输的字节数小于应用程序请求的字节数。不足数（Short Count）的产生并不代表发生了错误，它可能由多种原因导致：</p><ul><li>读取时遇到 EOF：若我们对一个 20 字节的文件执行<code>read(fd, *buf, 50)</code>，那么第一次调用将返回一个 20 的不足数，第二次调用则返回 0（EOF）；</li><li>从终端读取文本行：若打开的文件是终端设备（即键盘和显示器），那么每次<code>read</code>调用都将传输一个文本行并返回一个与文本行大小相等的不足数；</li><li>读写 Socket：若打开的文件是 Socket，那么内部缓冲区限制和网络延迟将使读写操作返回不足数。</li></ul><p>因此除遇到 EOF 外，读写磁盘文件不会导致不足数的产生。但如果我们想要构建健壮而可靠的网络应用程序，就必须重复调用<code>read</code>和<code>write</code>以保证所有请求的字节均已被传输。</p><h1>4.用RIO包健壮地读写</h1><p>​**RIO(Robust I0，健壮的I/O)**会自动为你处理上文中所述的不足值。在像网络程序这样容易出现不足值的应用中，RIO包提供了方便、健壮和高效的 IO。RIO 提供了两类不同的函数:</p><ul><li>无缓冲的输入输出函数。这些函数直接在存储器和文件之间传送数据，没有应用级缓冲<br>它们对将二进制数据读写到网络和从网络读写二进制数据尤其有用。</li><li>带缓冲的输入函数。从应用程序级别的缓冲区中读取文本行和二进制数据，与标准 I/O（如<code>printf</code>）函数类似。该函数是**线程安全（Thread-safe）**的，并且可以对同一描述符任意交错（Interleave）。例如，我们可以从描述符中读取一些文本行，然后读取一些二进制数据，最后再读取一些文本行。</li></ul><h2 id="4-1-RIO的无缓冲的输入输出函数">4.1 RIO的无缓冲的输入输出函数</h2><p>​通过调用<code>rio_readn</code>和 <code>rio_writen</code>函数，应用程序可以在存储器和文件之间直接传送数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_readn</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *usrbuf, <span class="hljs-type">size_t</span> n)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_writen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *usrbuf, <span class="hljs-type">size_t</span> n)</span>;<br><span class="hljs-comment">// Returns: number of bytes transferred if OK, 0 on EOF (rio_readn only), −1 on error</span><br><br></code></pre></td></tr></table></figure><p><code>rio_readn</code>函数从参数<code>fd</code>的当前文件位置复制最多<code>n</code>个字节到内存中<code>usrbuf</code>指向的位置，<code>rio_writen</code>函数则从内存中<code>usrbuf</code>指向的位置复制最多<code>n</code>个字节到参数<code>fd</code>的当前位置。前者只有在遇到 EOF 时返回不足数，后者则从不返回不足数。</p><p>若上述函数被应用程序的信号处理程序的返回中断，它们会重新调用<code>read</code>和<code>write</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_readn</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *usrbuf, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> nleft = n;<br>    <span class="hljs-type">ssize_t</span> nread;<br>    <span class="hljs-type">char</span> *bufp = usrbuf;<br>    <span class="hljs-keyword">while</span> (nleft &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((nread = read(fd, bufp, nleft)) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (errno == EINTR) <span class="hljs-comment">/* Interrupted by sig handler return */</span><br>                nread = <span class="hljs-number">0</span>;      <span class="hljs-comment">/* and call read() again */</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;      <span class="hljs-comment">/* errno set by read() */</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;              <span class="hljs-comment">/* EOF */</span><br>        nleft -= nread;<br>        bufp += nread;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (n - nleft);         <span class="hljs-comment">/* Return &gt;= 0 */</span><br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_writen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *usrbuf, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> nleft = n;<br>    <span class="hljs-type">ssize_t</span> nwritten;<br>    <span class="hljs-type">char</span> *bufp = usrbuf;<br>    <span class="hljs-keyword">while</span> (nleft &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((nwritten = read(fd, bufp, nleft)) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (errno == EINTR) <span class="hljs-comment">/* Interrupted by sig handler return */</span><br>                nwritten = <span class="hljs-number">0</span>;   <span class="hljs-comment">/* and call write() again */</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;      <span class="hljs-comment">/* errno set by write() */</span><br>        &#125;<br>        nleft -= nwritten;<br>        bufp += nwritten;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-RIO的带缓冲的输入函数">4.2 RIO的带缓冲的输入函数</h2><p>​假设我们需要编写一个计算文本文件行数的程序，最简单的方法便是调用<code>read</code>函数每次读取一个字节并检查是否有换行符。但由于<code>read</code>是系统调用，频繁的上下文切换将导致程序效率低下。</p><p>​更好的方法是调用包装函数<code>rio_readlineb</code>从内部读取缓冲区（Read Buffer）复制文本行，只有当缓冲区为空时才调用<code>read</code>以重新填充缓冲区。RIO<em>R<strong>I</strong>O</em> 包还为同时包含文本行和二进制数据的文件（如 HTTP 响应）提供了<code>rio_readn</code>函数的有缓冲版本，即<code>rio_readnb</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_readlineb</span><span class="hljs-params">(<span class="hljs-type">rio_t</span> *rp, <span class="hljs-type">void</span> *usrbuf, <span class="hljs-type">size_t</span> maxlen)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_readnb</span><span class="hljs-params">(<span class="hljs-type">rio_t</span> *rp, <span class="hljs-type">void</span> *usrbuf, <span class="hljs-type">size_t</span> n)</span>;<br><span class="hljs-comment">// Returns: number of bytes read if OK, 0 on EOF, −1 on error</span><br></code></pre></td></tr></table></figure><p>​在调用上述两种有缓冲的输入函数前，我们需要为每个打开文件描述符调用一次<code>rio_readinitb</code>。该函数将描述符<code>fd</code>与地址<code>rp</code>处的读取缓冲区（类型为<code>rio_t</code>）相关联：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> RIO_BUFSIZE 8192</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> rio_fd;                <span class="hljs-comment">/* Descriptor for this internal buf */</span><br>    <span class="hljs-type">int</span> rio_cnt;               <span class="hljs-comment">/* Unread bytes in internal buf */</span><br>    <span class="hljs-type">char</span> *rio_bufptr;          <span class="hljs-comment">/* Next unread byte in internal buf */</span><br>    <span class="hljs-type">char</span> rio_buf[RIO_BUFSIZE]; <span class="hljs-comment">/* Internal buffer */</span><br>&#125; <span class="hljs-type">rio_t</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rio_readinitb</span><span class="hljs-params">(<span class="hljs-type">rio_t</span> *rp, <span class="hljs-type">int</span> fd)</span> <br>&#123;<br>    rp-&gt;rio_fd = fd;  <br>    rp-&gt;rio_cnt = <span class="hljs-number">0</span>;  <br>    rp-&gt;rio_bufptr = rp-&gt;rio_buf;<br>&#125;<br></code></pre></td></tr></table></figure><p>​RIO包读取例程的核心是<code>rio_read</code>函数，它其实是<code>read</code>函数的有缓冲版本。若读取缓冲区中的未读字节数<code>rp-&gt;rio_cnt</code>为 0，则在循环内调用<code>read</code>函数对其填充；若读取缓冲区非空，则调用<code>memcpy</code>函数将<code>min(n, rp-&gt;rio_cnt)</code>字节从缓冲区复制到<code>usrbuf</code>指向的内存位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_read</span><span class="hljs-params">(<span class="hljs-type">rio_t</span> *rp, <span class="hljs-type">char</span> *usrbuf, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> cnt;<br><br>    <span class="hljs-keyword">while</span> (rp-&gt;rio_cnt &lt;= <span class="hljs-number">0</span>)<br>    &#123; <span class="hljs-comment">/* Refill if buf is empty */</span><br>        rp-&gt;rio_cnt = read(rp-&gt;rio_fd, rp-&gt;rio_buf,<br>                           <span class="hljs-keyword">sizeof</span>(rp-&gt;rio_buf));<br>        <span class="hljs-keyword">if</span> (rp-&gt;rio_cnt &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (errno != EINTR)           <span class="hljs-comment">/* Interrupted by sig handler return */</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rp-&gt;rio_cnt == <span class="hljs-number">0</span>)        <span class="hljs-comment">/* EOF */</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            rp-&gt;rio_bufptr = rp-&gt;rio_buf; <span class="hljs-comment">/* Reset buffer ptr */</span><br>    &#125;<br><br>    <span class="hljs-comment">/* Copy min(n, rp-&gt;rio_cnt) bytes from internal buf to user buf */</span><br>    cnt = n;<br>    <span class="hljs-keyword">if</span> (rp-&gt;rio_cnt &lt; n)<br>        cnt = rp-&gt;rio_cnt;<br>    <span class="hljs-built_in">memcpy</span>(usrbuf, rp-&gt;rio_bufptr, cnt);<br>    rp-&gt;rio_bufptr += cnt;<br>    rp-&gt;rio_cnt -= cnt;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br></code></pre></td></tr></table></figure><p>​对于一个应用程序，rio_read函数和 Unix read函数有同样的语义。在出错时，它返回值 -1，并且适当地设置errno。在EOF时，它返回值0。如果要求的字节数超过了读缓冲区内未读的字节的数量，它会返回一个不足值。两个函数的相似性使得很容易通过用rio_read代替 read来创建不同类型的带缓冲的读函数。例如，用rioread代替read。</p><p>​实际上，<code>rio_readnb</code>与<code>rio_readn</code>具有完全相同的结构，只不过我们用<code>rio_read</code>替换了<code>read</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_readnb</span><span class="hljs-params">(<span class="hljs-type">rio_t</span> *rp, <span class="hljs-type">void</span> *usrbuf, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> nleft = n;<br>    <span class="hljs-type">ssize_t</span> nread;<br>    <span class="hljs-type">char</span> *bufp = usrbuf;<br><br>    <span class="hljs-keyword">while</span> (nleft &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((nread = rio_read(rp, bufp, nleft)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">/* errno set by read() */</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">/* EOF */</span><br>        nleft -= nread;<br>        bufp += nread;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (n - nleft); <span class="hljs-comment">/* return &gt;= 0 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>类似地，<code>rio_readlineb</code>函数从文件<code>rp</code>中读取一个文本行并将其复制到内存中<code>usrbuf</code>指向的位置。循环内每次对<code>rio_read</code>的调用都会把读取缓冲区中的一个字节复制到<code>&amp;c</code>，然后检查它是否是换行符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_readlineb</span><span class="hljs-params">(<span class="hljs-type">rio_t</span> *rp, <span class="hljs-type">void</span> *usrbuf, <span class="hljs-type">size_t</span> maxlen)</span><br>&#123;<br>    <span class="hljs-type">int</span> n, rc;<br>    <span class="hljs-type">char</span> c, *bufp = usrbuf;<br><br>    <span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt; maxlen; n++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((rc = rio_read(rp, &amp;c, <span class="hljs-number">1</span>)) == <span class="hljs-number">1</span>)<br>        &#123;<br>            *bufp++ = c;  <span class="hljs-comment">/* Copy rp to user buf */</span><br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            &#123;<br>                n++;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/* EOF, no data read */</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;    <span class="hljs-comment">/* EOF, some data was read */</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-comment">/* Error */</span><br>    &#125;<br>    *bufp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1>5.读取文件元数据</h1><p>​应用程序能够通过调用 <code>stat </code>和 <code>fstat</code> 函数，检索到关于文件的信息(有时也称为文件的元数据(metadata))。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-keyword">struct</span> stat *buf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fstat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> stat *buf)</span>;<br><span class="hljs-comment">// Returns: 0 if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>​函数<code>stat</code>使用文件名<code>*filename</code>作为输入，将信息填写到<code>stat</code>结构体中。<code>fstat</code>与之类似，但它的参数是文件描述符<code>fd</code>。结构体<code>stat</code>如下所示，我们只需关注字段<code>st_mode</code>和<code>st_size</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Metadata returned by the stat and fstat functions */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span>&#123;</span><br><span class="hljs-type">dev_t</span>st_dev;<span class="hljs-comment">/* Device */</span><br><span class="hljs-type">ino_t</span>  st_ino;<span class="hljs-comment">/* inode */</span><br><span class="hljs-type">mode_t</span> st_mode;<span class="hljs-comment">/* Protection and file type */</span><br><span class="hljs-type">nlink_t</span>st_nlink;<span class="hljs-comment">/* Number of hard links */</span><br><span class="hljs-type">uid_t</span>st_uid;<span class="hljs-comment">/*User ID of owner */</span><br><span class="hljs-type">gid_t</span>st_gid;<span class="hljs-comment">/*Group ID of owner */</span><br><span class="hljs-type">dev_t</span>st_rdev;<span class="hljs-comment">/*Device type(if inode device)*/</span><br><span class="hljs-type">off_t</span>st_size;<span class="hljs-comment">/* Total size,in bytes */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> st_blksize;<span class="hljs-comment">/*Blocksize for filesystem I/O */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> st_blocks;<span class="hljs-comment">/*Number of blocks allocated */</span><br><span class="hljs-type">time_t</span>st_atime;<span class="hljs-comment">/* Time of last access */</span><br><span class="hljs-type">time_t</span>st_mtime;<span class="hljs-comment">/* Time of last modification */</span><br><span class="hljs-type">time_t</span>st_ctime;<span class="hljs-comment">/* Time of last change */</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>​<code>st_size</code>包含了文件的大小，而<code>st_mode</code>则包含了文件的访问权限和类型。。Unix识别大量不同的文件类型。<strong>普通文件</strong>包括某种类型<strong>的二进制</strong>或<strong>文本数据</strong>。对于内核而言，文本文件和二进制文件毫无区别。目录文件包含关于其他文件的信息。套接字是一种用来通过网络与其他进程通信的文件。Unix提供的宏指令根据stmode 成员来确定文件的类型。下图列出了这些宏的一个子集。</p><p><img src="477e0109e741db37bb3a9148ea7550a6.png" alt=""></p><h1>6.读取目录内容</h1><p>​应用程序调用<code>opendir</code>和<code>readdir</code>函数读取目录中的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br>DIR *<span class="hljs-title function_">opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-comment">// Returns: pointer to handle if OK, NULL on error</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-keyword">struct</span> dirent *<span class="hljs-title function_">readdir</span><span class="hljs-params">(DIR *dirp)</span>;<br><span class="hljs-comment">// Returns: pointer to next directory entry if OK, NULL if no more entries or error</span><br></code></pre></td></tr></table></figure><p>​函数<code>opendir</code>以目录的路径名为参数，返回一个指向目录流（Directory Stream）的指针。流是对有序项目列表的抽象，此处指的是目录中条目的列表。函数<code>readdir</code>返回指向目录流中下一个条目的指针，每个条目都是一个<code>dirent</code>结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> &#123;</span><br>    <span class="hljs-type">ino_t</span> d_ino;       <span class="hljs-comment">/* inode number */</span><br>    <span class="hljs-type">char</span>  d_name[<span class="hljs-number">256</span>]; <span class="hljs-comment">/* Filename */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>​<code>d_name</code>是文件名，<code>d_ino</code>是文件的 inode 数。当发生错误时，<code>readdir</code>返回<code>NULL</code>并设置<code>errno</code>。</p><p>函数<code>closedir</code>关闭目录流并释放所有相关资源：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">closedir</span><span class="hljs-params">(DIR *dirp)</span>;<br><span class="hljs-comment">// Returns: 0 on success, −1 on error</span><br></code></pre></td></tr></table></figure><h1>7.共享文件</h1><p>​可以用许多不同的方式来共享 Unix 文件。除非你很清楚内核是如何表示打开的文件，否则文件共享的概念相当难懂。内核用三个相关的数据结构来表示打开的文件:</p><ul><li>描述符表(descriptor table)。每个进程都有它独立的描述符表，它的表项是由进程打开的文件描述符来索引的。每个打开的描述符表项指向文件表中的一个表项。</li><li>文件表(fle table)。打开文件的集合是由一张文件表来表示的，所有的进程共享这张表。每个文件表的表项组成(针对我们的目的)包括有当前的文件位置、引用计数(referencecount)(即当前指向该表项的描述符表项数)，以及一个指向v-node 表中对应表项的指针关闭一个描述符会减少相应的文件表表项中的引用计数。内核不会删除这个文件表表项，直到它的引用计数为零。</li><li>v-node 表(v-node table)。同文件表一样，所有的进程共享这张 v-node 表。每个表项包含stat结构中的大多数信息，包括stmode和stsize成员。</li></ul><p><img src="48a460a8f846d6a45edbb97323e43634.png" alt=""></p><p>​上图展示了一个示例，其中描述符1和4通过不同的打开文件表表项来引用两个不同的文件。这是一种典型的情况，没有共享文件，并且每个描述符对应一个不同的文件。</p><p><img src="76ae1bed0326e46ffde1e910d3c51f42.png" alt=""></p><p>​上图所示，多个描述符也可以通过不同的文件表表项来引用同一个文件。例如，如果以同一个filename 调用 open 函数两次，就会发生这种情况。关键思想是每个描述符都有它自己的文件位置，所以对不同描述符的读操作可以从文件的不同位置获取数据。</p><p><img src="04613b08bc1a4dcf88a8b4538e1fb65b.png" alt=""></p><p>​我们也能理解父子进程是如何共享文件的。假设在调用 fork之前，父进程有如图 10-11所示的打开文件。然后，上图展示了调用fork后的情况。子进程有一个父进程描述符表的副本。父子进程共享相同的打开文件表集合，因此共享相同的文件位置。一个很重要的结果就是在内核删除相应文件表表项之前，父子进程必须都关闭了它们的描述符。</p><h1>8.I/O重定向</h1><p>​<code>dup2</code>函数将描述符表条目<code>oldfd</code>复制到<code>newfd</code>并覆盖其原始内容。如果<code>newfd</code>已经打开，则该函数在复制<code>oldfd</code>之前会先关闭<code>newfd</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dup2</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd, <span class="hljs-type">int</span> newfd)</span>;<br><span class="hljs-comment">// Returns: nonnegative descriptor if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>​假设某进程的打开文件数据结构如上图 10.12 所示。描述符 1（标准输出）指向文件 A（如终端），描述符 4 指向文件 B（如磁盘上的文件），文件 A 和 B 的<code>refcnt</code>均为 1。那么该进程调用函数<code>dup2(4, 1)</code>后情况变为：</p><p><img src="b955d5545be0eb6663cfe6168677530b.png" alt=""></p><p>​文件 A 被关闭，内核会删除其打开文件表和 v-node 表条目。两个描述符均指向文件 B，其<code>refcnt</code>已增加为 2。从现在开始，任何写入到标准输出的数据都会被重定向到文件 B。</p><h1>9.标准I/O</h1><p>​ANSI C定义了一组高级输人输出函数，称为标准I0库，为程序员提供了Unix I/0的较高级别的替代。这个库(libc)提供了打开和关闭文件的函数(fopen和fclose)、读和写字节的函数(fread和 fwrite)、读和写字符串的函数(fgets和 fputs)，以及复杂的格式化的I/O所数(scanf和printf)。<br>​标准 IO库将一个打开的文件模型化为一个流。对于程序员而言，一个流就是一个指向FILE类型的结构的指针。每个ANSIC程序开始时都有三个打开的流stdin、stdout和stderr，分别对应于标准输人、标准输出和标准错误:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-built_in">stdin</span>;  <span class="hljs-comment">/* Standard input (descriptor 0) */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-built_in">stdout</span>; <span class="hljs-comment">/* Standard output (descriptor 1) */</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-built_in">stderr</span>; <span class="hljs-comment">/* Standard error (descriptor 2) */</span><br></code></pre></td></tr></table></figure><p>​类型为 FILE 的流是对文件描述符和流缓冲区的抽象。<strong>流缓冲区</strong>的目的和 RIO 读缓冲区的一样:就是使开销较高的 Unix I/O 系统调用的数量尽可能的小。例如，假设我们有一个程序，它反复调用标准 IO的 getc函数，每次调用返回文件的下一个字符。当第一次调用 getc时，库通过调用一次 read 函数来填充流缓冲区，然后将缓冲区中的第一个字节返回给应用程序。只要缓冲区中还有未读的字节，接下来对 getc的调用就能直接从流缓冲区得到服务。</p><h1>9.综合:我该使用哪些 1/0 函数</h1><p>​Unix I/O、标准 I/O 和 <em>Rio</em> 包函数之间的关系如下图所示：</p><p><img src="06e0473c31e4f344d476dc1facdfaa9d.png" alt=""></p><p>​那么我们应当使用哪种 I/O 函数呢？以下是一些建议：</p><ul><li>尽可能使用标准 I/O 函数，它们是在磁盘和终端上执行 I/O 操作的最佳选择；</li><li>不要使用<code>scanf</code>或<code>rio_readlineb</code>函数读取二进制文件，它们是专门为读取文本文件设计的；</li><li>将标准 I/O 函数用于 <strong>Socket</strong> 时可能会出现一些令人讨厌的问题，因此我们应当在网络编程时使用 <strong><em>Rio</em> 包函数。</strong></li></ul><h1>总结：</h1><p>一切都是文件，都可以用 “”打开open –&gt; 读写write/read –&gt; 关闭close” 模式来操作。输入/输出(I/O) 是指主存和外部设备(如磁盘，终端，网络)之间拷贝数据过程。</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_9_虚拟内存</title>
    <link href="/2024/08/31/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-9-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <url>/2024/08/31/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-9-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>​为了更加有效地管理内存并减少错误的发生，现代系统提供了一种对主存储器的抽象，即<strong>虚拟内存（Virtual Memory，VM）</strong>。虚拟内存是硬件异常、硬件地址转换、主存储器、磁盘文件和内核软件之间的优雅交互，它为每个进程提供了一个大的、统一的和私有的地址空间。</p><p>虚拟内存有以下三个重要功能：</p><ul><li>将主存储器作为磁盘的缓存，只保留主存中的活跃区域并根据需要不断地在两者之间传输数据；</li><li>为每个进程提供统一的地址空间，从而简化内存管理；</li><li>保护每个进程的地址空间不被其他进程所破坏。</li></ul><p>​虚拟存储器是计算机系统最重要的概念之一。它成功的一个主要原因就是因为它是沉默地自动地工作的，不需要应用程序员的任何干涉。既然虚拟存储器在幕后工作得如此之好，为什么程序员还需要理解它呢?有以下几个原因:</p><ul><li>虚拟存储器是中心的。虚拟存储器遍及计算机系统的所有层面，在硬件异常、汇编器、链接器、加载器、共享对象、文件和进程的设计中扮演着重要角色。理解虚拟存储器将帮助你更好地理解系统通常是如何工作的。</li><li>虚拟存储器是强大的。虚拟存储器给予应用程序强大的能力，可以创建和销毁存储器片(chunk)、将存储器片映射到磁盘文件的某个部分，以及与其他进程共享存储器。比如，你知道你可以通过读写存储器位置读或者修改一个磁盘文件的内容吗?或者是你可以加载一个文件的内容到存储器中，而不需要进行任何显式的拷贝吗?理解虚拟存储器将帮助你利用它的强大功能在你的应用程序中添加动力。</li><li>虚拟存储器是危险的。每次应用程序引用一个变量、间接引用一个指针，或者调用一个诸如 malloc这样的动态分配程序时，它就会和虚拟存储器发生交互。如果虚拟存储器使用不当，应用将遇到复杂危险的与存储器有关的错误。例如，一个带有错误指针的程序可以立即崩溃于“段错误”或者“保护错误”，它可能在崩溃之前还默默地运行几个小时，或者是最令人惊慌地，运行完成却产生不正确的结果。理解虚拟存储器以及诸如malloc之<br>类的管理虚拟存储器的分配程序，可以帮助你避免这些错误。</li></ul><h1>1.物理和虚拟寻址</h1><p>​主存中的每个字节都有一个唯一的物理地址（Physical Address，PA），CPU 使用物理地址访问内存的方式被称为物理寻址（Physical Addressing）：</p><p><img src="26b4f68fc71ade4aba0f9fadb414b806.png" alt=""></p><p>​如上图所示，当CPU执行这条加载指令时，它会生成一个有效物理地址，通过存储器总线，把它传递给主存。主存取出从物理地址4处开始的4字节的字，并将它返回给CPU，CPU 会将它存放在一个寄存器里。</p><p>​CPU 也可以通过<strong>虚拟地址（Virtual Address，VA）<strong>访问主存，只不过该地址在发送到主存之前需要被转换为适当的物理地址。这种寻址方式被称为</strong>虚拟寻址（Virtual Addressing）</strong>：</p><p><img src="a530c248a1e28be827d6154add76ea8b.png" alt=""></p><p>​地址转换（Address Translation ）需要 CPU 硬件和操作系统之间密切合作，位于 CPU 芯片上的内存管理单元（Memory Management Unit，MMU）根据 <strong>页表（Page Table)</strong> 动态地将虚拟地址转换为物理地址。页表存储在主存中，其内容由操作系统维护。</p><h1>2.地址空间</h1><p>地址空间（Address Space）是一组有序的非负整数地址：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">{0,1,2,...}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span></span></span></p><p>如果这些整数是连续的，我们就称其为线性地址空间（Linear Address Space）。在拥有虚拟内存的系统中，CPU 从 n 位线性地址空间中生成虚拟地址，该虚拟地址空间共有 N = 2^n 个地址：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{0,1,2,…,N−1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span></span></span></p><p>现代系统通常支持 32 位或 64 位虚拟地址空间。同样地，系统也有一个物理地址空间：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{0,1,2,…,M−1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span></span></span></p><p>与虚拟地址空间不同，M 不一定为 2 的幂。但为了简化讨论，我们假设 M = 2^m。</p><p>​地址空间明确地将数据对象（字节）和其属性（地址）区分开来，因此每个数据对象都可以有多个独立的地址，这便是虚拟内存的基本思想。主存中的每个字节都有一个从物理地址空间中选择的物理地址，以及一个从虚拟地址空间中选择的虚拟地址。</p><h1>3.虚拟内存作为缓存的工具</h1><p>​概念上而言，虚拟存储器(VM)被组织为<strong>一个由存放在磁盘上的N个连续的字节大小的单元组成的数组</strong>。每字节都有一个唯一的虚拟地址，这个唯一的虚拟地址是作为到数组的索引的。磁盘上数组的内容被缓存在主存中。和存储器层次结构中其他缓存一样，磁盘与主存之间以 Block为单位传输数据。而在虚拟内存系统中，Block 被称为虚拟页面（Virtual Page，VP），其大小为 P = 2^p。类似地，物理内存也可以被划分为多个大小为 P 的物理页面（Physical Page，PP)。</p><p>虚拟页面有以下三种状态：</p><ul><li>未分配（Unallocated）：没有被进程申请使用的页面，不占用任何磁盘空间；</li><li>未缓存（Uncached）：仅加载到磁盘而未缓存到主存中的页面；</li><li>已缓存（Cached）：已缓存在主存中的页面。</li></ul><p><img src="78e3378142d7dc3ba0c0667c11db5534.png" alt=""></p><p>​示例展示了一个有8个虚拟页的小虚拟存储器。虚拟页0和3还没有被分配，因此在磁盘上还不存在。虚拟页1、4和6被缓存在物理存储器中。页2、5和7已经被分配了，但是当前并未缓存在主存中。</p><h2 id="3-1-DRAM-缓存">3.1 DRAM 缓存</h2><p>​我们将 CPU 和主存之间的 L1、L2 和 L3 级缓存称为 SRAM 缓存，而将主存中用来缓存虚拟页面的缓存称为 DRAM 缓存。</p><p>​与 SRAM 缓存相比，DRAM 缓存发生缓存缺失的成本很高（需要从磁盘中加载数据），因此虚拟页面往往比较大——通常为 4 KB 到 2 MB。DRAM 缓存是全关联型的，这样任何一个虚拟页面都可以放在任何一个物理页面中。</p><h2 id="3-2-页表">3.2 页表</h2><p>​页表是由**页表条目（Page Table Entries，PTEs）**组成的数组。每个虚拟页面在页表都有一条 PTE，它在页表中的偏移量是固定的。每条 PTE 中都包含了一个表示该虚拟页面是否已缓存的有效位，以及一个 n 位的地址字段。若有效位为 1，则地址字段是缓存该页面的物理页面的起始地址；若有效位为 0 且地址字段为空，则代表该虚拟页面未分配；若有效位为 0 且地址字段非空，则地址字段是该页面在磁盘上的起始地址。</p><p><img src="08794d989540e2d86715fcb19c1fbbf3.png" alt=""></p><p>如上图所示，系统中存在 8 个虚拟页面和 4 个物理页面：页面 1，2，4 和 7 缓存在 DRAM 中；页面 3 和 6 已分配但未缓存；页面 0 和 5 未分配。</p><h2 id="3-3-缺页故障">3.3 缺页故障</h2><p>​我们将访问 DRAM 缓存时发生的缓存缺失称为缺页故障（Page Fault）。若 CPU 引用上图页面 3 中的某个字，地址转换硬件会从主存中读取 PTE 3 ，然后根据其有效位判断出该页面未缓存。缺页故障异常将调用内核中的异常处理程序，选择受害者页面（Victim Page）逐出主存。</p><p>在本例中，受害者页面为 VP 4，因此内核会先将 PTE 4 中的有效位重置为 0。如果该页面已发生更改，内核还需要将其复制回磁盘。接下来，内核把 VP 3 从磁盘复制到主存中的 PP 3，并更新 PTE 3 中的有效位。下图展示了异常处理程序返回后示例页表的状态：</p><p><img src="59a3848a159eff722efc06f6865881d8.png" alt=""></p><h2 id="3-4-分配页面">3.4 分配页面</h2><p><img src="f661330612a1a14c0592c475fb443032.png" alt=""></p><p>上图展示了分配一个新的虚拟页面（如进程调用<code>malloc</code>）后页表的变化。操作系统先在磁盘上开辟空间，然后更新 PTE 5 使 VP 5 指向磁盘上新创建的页面。</p><div class="note note-secondary">            <p>​<strong>又是局部性救了我们</strong>：</p><p>​当我们中的许多人都了解了虚拟存储器的概念之后，我们的第一印象通常是它的效率应该是非常低的。因为不命中处罚很大，我们会担心页面调度会破坏程序性能。实际上，虚拟存储器工作得相当好，这主要归功于我们的老朋友局部性(locality)。尽管在整个运行过程中程序引用的不同页面的总数可能超出物理存储器总的大小，但是局部性原则保证了在任意时刻，程序将往往在一个较小的活动页面(active page)集合上工作，这个集合叫做工作集(working set)或者常驻集(residentset)。在初始开销，也就是将工作集页面调度到存储器中之后，接下来对这个工作集的引用将导致命中，而不会产生额外的磁盘流量。只要我们的程序有好的时间局部性，虚拟存储器系统就能工作得相当好。但是，当然不是所有的程序都能展现良好的时间局部性。如果工作集的大小超出了物理存储器的大小，那么程序将产生一种不幸的状态，叫做颠簸(thrashing)，这时页面将不断地换进换出。虽然虚拟存储器通常是有效的，但是如果一个程序性能慢得像爬一样，那么聪明的程序员会考虑是不是发生了颠簸。</p>          </div><h1>4.虚拟存储器作为存储器管理的工具</h1><p>​操作系统为每个进程都维护了一个单独的页表，因此所有进程都拥有自己的虚拟地址空间：</p><p><img src="6d4bdd36d4a88baaf291aa121570fffb.png" alt=""></p><p>​如上图所示，进程 i 的页表将 VP 1 映射到 PP 2，将 VP 2 映射到 PP 7；进程 j 的页表将 VP 1 映射到 PP 7，将 VP 2 映射到 PP 10。多个虚拟页面可以映射到同一个共享物理页面。VM简化了链接、加载、代码和数据的共享以及应用程序的内存分配：</p><ul><li>简化链接：独立的虚拟地址空间允许每个进程使用相同的内存结构，因此链接器无需考虑可执行文件的代码和数据在物理内存中的实际位置。这种统一性极大地简化了链接器的设计和实现；</li><li>简化加载：若要将目标文件的 .text 和 .data 段加载到一个新进程的地址空间中，**加载器只需为它们分配虚拟页面，然后将其标记为未缓存，最后再将页表条目指向目标文件中对应的位置。**实际上加载器从未将任何数据从磁盘复制到主存中，代码和数据只有在被第一次引用时才会按需分页；</li></ul><p>将一组连续的虚拟页映射到任意一个文件中的任意位置的表示法称做<strong>存储器映射(memory mapping)</strong>。Unix提供一个称为 mmap 的系统调用，允许应用程序自己做存储器映射。</p><ul><li>简化共享：操作系统可以将不同进程中的不同虚拟页面映射到相同的物理页面，从而实现进程之间代码和数据的共享；</li><li>简化内存分配：当应用程序申请额外的内存时，<strong>操作系统会为其分配一定数量的连续虚拟页面</strong>，然后将它们映射到任意位置的物理页面。这些物理页面无需连续，并且可以在物理内存中随机分布。</li></ul><h1>5.虚拟存储器作为存储器保护的工具</h1><p>​</p><p>​任何现代计算机系统必须为操作系统提供手段来控制对存储器系统的访问。不应该允许一个用户进程修改它的只读文本段。而且也不应该允许它读或修改任何内核中的代码和数据结构。不应该允许它读或者写其他进程的私有存储器，并且不允许它修改任何与其他进程共享的虚拟页面，除非所有的共享者都显式地允许它这么做(通过调用明确的进程间通信系统调用)。</p><p>​我们可以在 PTE 中添加一些权限位来管理进程对页面的访问：</p><p><img src="2a27b556d0d4e6997e14bf78f398bf65.png" alt=""></p><p>​如上图所示，SUP 表示是否只有在内核态运行的进程才能访问该页面，READ 和 WRITE 则分别表示页面是否可读写。例如，进程 i 在用户态中运行，那么它可以读取 VP 0，读取和写入 VP 1，但无法访问 VP 2。</p><p>​如果某条指令违反了上述权限，CPU 就会触发通用保护故障，并将控制权转移到内核中的异常处理程序。该处理程序会向问题进程发送一个 SIGSEGV 信号，Linux Shell 通常将此异常报告为<strong>分段故障（Segmentation Fault）</strong>。</p><h1>6.地址翻译</h1><p><img src="bedce0d3cdd7c195fbd7a4222e86012b.png" alt=""></p><p>​形式上来说，地址翻译是一个N元素的虚拟地址空间(VAS)中的元素和一个M元素的物理地址空间(PAS)中元素之间的映射。</p><p><strong>MAP(A)</strong></p><ul><li><p>A’          如果虚拟地址A处的数据在PAS的物理地址A’处</p></li><li><p>NULL    如果虚拟地址A处的数据不在物理存储器中</p></li></ul><p><img src="05efaef3d69509139b96bba236ad1e18.png" alt=""></p><p>​CPU 中的<strong>页表基址寄存器（Page Table Base Register ，PTBR</strong>）指向当前页表，n 位的虚拟地址由 p 位的虚拟页面**偏移量（Virtual Page Offset，VPO）<strong>和 n-p 位的</strong>虚拟页面编号（Virtual Page Number，VPN）<strong>组成。MMU 根据 VPN 的值选择对应的 PTE，如 VPN 0 选择 PTE 0，VPN 1 选择 PTE 1。由于物理页面和虚拟页面的大小相同，VPO 与物理页面偏移量（Physical Page Offset，PPO）也就相同，因此页表条目中的</strong>物理页面编号（Physical Page Number，PPN）**与 <strong>VPO</strong> 共同组成了转换后的物理地址。</p><p><img src="e8dfc363d9805b4ffed7f102c8132d3f.png" alt=""></p><p>上图展示了页面命中时的 CPU 硬件操作步骤：</p><ol><li>处理器生成一个虚拟地址 VA 并发送到 MMU；</li><li>MMU 生成 PTE 地址 PTEA 并向高速缓存或主存发起请求；</li><li>高速缓存或主存将 PTE 返回给 MMU；</li><li>MMU 构造物理地址 PA 并将其发送到高速缓存或主存；</li><li>高速缓存或主存将请求的数据返回给处理器。</li></ol><p><img src="278546386ea435a680d242580f4b3408.png" alt=""></p><p>上图展示了缺页故障时的 CPU 硬件操作步骤：</p><ol><li>处理器生成一个虚拟地址 VA 并发送到 MMU；</li><li>MMU 生成 PTE 地址 PTEA 并向高速缓存或主存发起请求；</li><li>高速缓存或主存将 PTE 返回给 MMU；</li><li>PTE 中的有效位为 0，因此 MMU 触发异常并将控制权转移给内核中的异常处理程序；</li><li>处理程序从物理内存中选取受害者页面换出。若该页面已被修改，则还要将其复制到磁盘中；</li><li>处理程序将新页面换入并更新 PTE；</li><li>处理程序返回到原来的进程，之前引发缺页故障的指令重新执行。此时进程请求的页面已缓存，因此 CPU 随后的操作与页面命中时相同。</li></ol><h2 id="6-1-结合高速缓存和虚拟存储器">6.1 结合高速缓存和虚拟存储器</h2><p>​大部分同时使用虚拟内存和高速缓存（SRAM 缓存）的系统均采用物理寻址的方式访问高速缓存。下图展示了两者的集成方式：</p><ul><li>注意： 页表条目可以缓存</li></ul><p><img src="1dba5da0850b59d43fb8ff2b0cb67d2e.png" alt=""></p><h2 id="6-2-利用TLB加速地址翻译">6.2 利用TLB加速地址翻译</h2><p>​CPU 每次生成虚拟地址时，MMU 都必须引用 PTE 才能完成地址转换。如果 PTE 位于主存而非高速缓存中，那么地址转换的速度将大大下降。大多数系统的 MMU 中包含了一个被称为**转换后备缓冲区（Translation Lookaside Buffer，TLB）**的小型 PTE 缓存，其每个缓存行中都有一个由单条 PTE 组成的 Block。用于集合选择和行匹配 的 Set Index 和 Tag 是从虚拟地址的 VPN 中提取的：<br><img src="6846577427e658025b185ad379fed5b7.png" alt=""></p><p>​如果 TLB 有 T = 2^<em>t</em> 个集合，则 Set Index（TLBI）由 VPN 中 t 个最低位组成，Tag（TLBT）由 VPN 中的剩余高位组成。</p><p><img src="7ef9aea621bed462fe8e94175e3fa767.png" alt=""></p><p>​上图展示了 TLB 命中时的 CPU 硬件操作步骤。由于地址转换均在 CPU 芯片上的 MMU 中执行，因此速度很快：</p><ol><li>CPU 生成一个虚拟地址 VA；</li><li>MMU 向 TLB 发送 VPN 以请求 PTE；</li><li>TLB 将 PTE 返回给 MMU；</li><li>MMU 将虚拟地址转换为物理地址 PA 并发送到高速缓存或主存；</li><li>高速缓存或主存将请求的数据返回给处理器。</li></ol><p><img src="55eeea9b46270d2a06c450bf6288ab50.png" alt=""></p><p>上图展示了 TLB 未命中时的 CPU 硬件操作步骤。MMU 必须从高速缓存或主存中获取 PTE 并将其存储在 TLB 中，这可能会覆盖现有条目。</p><h2 id="6-3-多级页表">6.3 多级页表</h2><p>在之前的讨论中，我们假设系统只使用单级页表进行地址转换。但如果地址空间有 32 位，一个页面 4 KB 并且一条 PTE 4 字节。那么即使应用程序只引用一小部分虚拟内存，我们也需要一个 4 MB 的页表常驻在内存中：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><mn>32</mn><mo separator="true">,</mo><mi>P</mi><mo>=</mo><mn>4</mn><mi>K</mi><mo>=</mo><msup><mn>2</mn><mn>12</mn></msup><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">(</mo><mi>P</mi><mi>T</mi><mi>E</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mi>p</mi></mrow></msup><mo>=</mo><mn>220</mn><mo>=</mo><mn>1</mn><mi>M</mi></mrow><annotation encoding="application/x-tex">n=32,P=4K=2^{12},n(PTE)=2^{np}=220=1M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">32</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">PTE</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">220</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>我们可以通过对页表分级来压缩页表的大小：</p><p><img src="0a2376af0cff698d6e0e70a617542cf0.png" alt=""></p><p>​如上图所示，一级页表中有 1024 条 PTE，每条 PTE 都映射到一个包含 1024 个连续虚拟页面的地址空间块。每个地址空间块的大小为 1024 * 4 KB = 4 MB，因此 1024 条 PTE 就可以覆盖 32 位（4 MB * 1024 = 4 GB = 2^{32} B）地址空间。</p><p>​如果地址空间块中的所有页面均未分配，则一级页表中对应的 PTE 为空（如上图中的 PTE 2～7）；如果地址空间块中至少有一个页面已分配，那么一级页表中对应的 PTE 就指向二级页表中该块的起始位置（如上图中的 PTE 0～1）。二级页表中的每条 PTE 都映射到一个 4 KB 的物理内存页，这与我们之前查看的单级页表相同。</p><p>​若一级页表中的 PTE 为空，那么二级页表内对应的条目就无需存在。多数应用程序的虚拟地址空间中大部分页面是未分配的，因此这将显著地降低页表的内存占用。另外，我们只需在主存中维护一级页表和被调用最为频繁的二级页表，其它的二级页表可以由操作系统按需创建和分页。</p><p><img src="7cd1ee52bc8ebf139d2503ba2b63c4d0.png" alt=""></p><p>​在 k 级页表中，虚拟地址被划分为 k 个 VPN 和一个 VPO，VPN i（1 ≤ i ≤ k）是第 i 级页表的索引。除第 k 级页表外，每个页表中的 PTE 均指向下一级页表的起始位置，而第 k 级表内的每条 PTE 则保存了对应物理页面的 PPN。与单级页表一样，PPO 与 VPO 相同。MMU 必须先请求 k 个 PTE，然后才能确定 PPN 以生成完整的物理地址。TLB 可以缓存多级页表中的 PTE，这使得多级页表的地址转换速度并不比单级页表慢很多。</p><h1>7.Intel Core i7/Linux 内存系统</h1><p>​尽管底层的 Haswell 微架构能够支持完整的 64 位虚拟和物理地址空间，但目前 Core i7 仅提供了 48 位 (256 TB) 的虚拟地址空间和 52 位 (4 PB ) 的物理地址空间，以及一个支持 32 位 (4 GB) 虚拟和物理地址空间的兼容模式。</p><p>​下图给出了Core i7存储器系统的重要部分。**处理器包(processor package)**包括四个核，一个大的所有核共享的L3高速缓存，以及一个 DDR3 存储器控制器。每个核包含一个层次结构的 TLB、一个层次结构的数据和指令高速缓存，以及一组快速的点到点连接，这种连接是基于Imntel QuickPath 技术的，是为了让一个核与其他核和外部IO桥直接通信。TLB 是虚拟寻址的,是四路组相连的。L1、L2和L3高速缓存是物理寻址的，是八路组相连的，块大小为64字节页大小在启动时被配置为4KB或4MB。Linux 使用的是4KB的页。</p><p><img src="16835a2054533f03604c76375313baca.png" alt=""></p><h2 id="7-1-Core-i7-地址翻译">7.1 Core i7 地址翻译</h2><p><img src="428c933bfea1e39ff826172866228239.png" alt=""></p><p>​如上图所示，Core i7 使用四级页表结构。CR 3 控制寄存器中保存了一级 (L1) 页表的起始物理地址，其值是每个进程上下文的一部分并在上下文切换时恢复。48 位的虚拟地址包含了 36 位的 VPN 和 12 位（4 K = 2^{12}）的 VPO，其中 VPN 又被划分为四个 9 位的地址空间块。</p><h2 id="7-2-Linux虚拟内存系统">7.2 Linux虚拟内存系统</h2><p><img src="c0247360aa69b9ba4972369cdb2c4a4b.png" alt=""></p><p>​内核虚拟存储器包含内核中的代码和数据结构。内核虚拟存储器的某些区域被映射到所有进程共享的物理页面。例如，每个进程共享内核的代码和全局数据结构**。有趣的是，Linux也将一组连续的虚拟页面(大小等于系统中DRAM的总量)映射到相应的一组连续的物理页面**。这就为内核提供了一种便利的方法来访问物理存储器中任何特定的位置，例如，当它需要访间页表，或在一些设备上执行存储器映射的 I/O 操作，而这些设备被映射到特定的物理存储器位置时。</p><p>​内核虚拟存储器的其他区域包含每个进程都不相同的数据。例如，页表、内核在进程的上下文中执行代码时使用的栈，以及记录虚拟地址空间当前组织的各种数据结构。</p><h3 id="1-Linux虚拟存储器区域">1. Linux虚拟存储器区域</h3><p>​  Linux 将虚拟内存划分为多个区域或段（Area 或 Segment），每个区域都是一些已分配且在某些方面相关的连续页面(chunk)。例如，代码段、数据段、堆、共享库段和用户栈分别是不同的区域。每个已分配的页面都属于某个区域，因此不属于任何区域的页面不存在也无法被进程引用。区域概念的引入使得 Linux 允许虚拟地址空间存在间隙.</p><p><img src="d58c9760f89607eb642b9d8ab19b8ab5.png" alt=""></p><p>​如上图所示，Linux 内核为每个进程维护了一个独特的数据结构<code>task_struct</code>，其字段包含或指向内核运行该进程所需的全部信息（如 PID、用户栈指针、可执行目标文件名称和程序寄存器等）。</p><p>​其中，字段<code>mm</code>指向<code>mm_struct</code>，该结构体描述了虚拟内存的当前状态。<code>mm_struct</code>中的<code>pgd</code>字段指向一级页表的起始位置，它在进程运行时被内核存储在 CR 3 控制寄存器中。而<code>mmap</code>字段则指向一个由<code>vm_area_structs</code>组成的链表。描述区域信息的结构体<code>vm_area_structs</code>包含以下字段：</p><ul><li><code>vm_start</code>：指向区域的起点；</li><li><code>vm_end</code>：指向区域的末端；</li><li><code>vm_prot</code>：描述该区域中所有页面的读/写权限；</li><li><code>vm_flags</code>：描述该区域中的页面是否与其他进程共享；</li><li><code>vm_next</code>：指向链表中下一个<code>vm_area_structs</code>。</li></ul><h3 id="2-linux缺页异常处理">2. linux缺页异常处理</h3><p>​假设 MMU在试图翻译某个虚拟地址 A时，触发了一个缺页。这个异常导致控制转移到内<br>核的缺页处理程序，处理程序随后就执行下面的步骤:</p><ol><li><p>虚拟地址 A是合法的吗?换句话说，A在某个区域结构定义的区域内吗?为了回答这个问题，的缺页处理程序搜索区域结构的链表，把A和每个区域结构中的vm_start和vm_end 做比较。如果这个指令是不合法的，那么缺页处理程序就触发一个段错误，从而终止这个进程。这种情况在下图中标识为“1”。</p><p>因为一个进程可以创建任意数量的新虚拟存储器区域(使用在下一节中描述的 mmap 函数)，<br>所以顺序搜索区域结构的链表花销可能会很大。因此在实际中，Linux 使用某些我们没有显示出<br>来的字段，Linux在链表中构建了一棵树，并在这棵树上进行查找。</p></li><li><p>试图进行的存储器访问是否合法?换句话说，进程是否有读、写或者执行这个区域内页<br>面的权限?例如，这个缺页是不是由一条试图对这个代码段里的只读页面进行写操作的存储指令<br>造成的?这个缺页是不是因为一个运行在用户模式中的进程试图从内核虚拟存储器中读取字造成<br>的?如果试图进行的访问是不合法的，那么缺页处理程序会触发一个保护异常，从而终止这个进<br>程。这种情况在图 9-28 中标识为“2”。</p></li><li><p>此刻，内核知道了这个缺页是由于对合法的虚拟地址进行合法的操作造成的。它是这样<br>来处理这个缺页的:选择一个牺牲页面，如果这个牺牲页面被修改过，那么就将它交换出去，换<br>人新的页面并更新页表。当缺页处理程序返回时，CPU重新启动引起缺页的指令，这条指令将<br>再次发送 A到 MMU。这次，MMU就能正常地翻译 A，而不会再产生缺页中断了。</p></li></ol><p><img src="78785d4bdb449b4051d3f00015fe1cc4.png" alt=""></p><h1>8. 内存映射</h1><p>​Linux 使用内存映射（Memory Mapping）技术初始化虚拟内存区域并将其与磁盘上的“对象”相关联。该“对象”有两种类型：</p><ol><li><p>文件系统中的常规文件（Regular File）：文件被分成多个与页面大小相同的片段，而每个片段都包含了一个虚拟页面的初始内容。由于操作系统采用按需分页的策略，因此页面在第一次被 CPU 引用前不会被换入到物理内存中。如果虚拟内存区域比文件大，则多余部分用零填充；</p></li><li><p>匿名文件（Anonymous File）：由内核创建，其内容全部为二进制零。当 CPU 第一次引用该区域内的虚拟页面时，内核会先在物理内存中选择一个合适的受害者页面（若该页面已被修改则需要将其换出）并用二进制零将其覆盖，然后更新页表使虚拟页面指向被覆盖后的物理页面。整个过程中没有数据被换入到物理内存，因此该区域内的页面又被称为零需求页面（Demand-zero Page）。</p></li></ol><p>一旦我们使用内存映射初始化一个虚拟页面，它就会在由内核维护的交换文件（Swap File）与物理内存之间来回交换。交换文件又称交换区（Swap Area）或交换空间（Swap Space），<strong>它的大小限制了当前运行进程所能申请的虚拟页面总量</strong>。</p><h2 id="8-1-再看共享对象">8.1 再看共享对象</h2><p>​存储器映射的概念来源于一个聪明的发现:如果虚拟存储器系统可以集成到传统的文件系统中，那么就能提供一种简单而高效的把程序和数据加载到存储器中的方法。<br>​正如我们已经看到的，进程这一抽象能够为每个进程提供自己私有的虚拟地址空间，可以免受其他进程的错误读写。不过，许多进程有同样的只读文本区域。例如，每个运行Unix 外壳程序 tcsh 的进程都有相同的文本区域。而且，许多程序需要访问只读运行时库代码的相同拷贝。例如，每个C程序都需要来自标准C库的诸如printf这样的函数。那么，如果每个进程都在物理存储器中保持这些常用代码的复制拷贝，那就是极端的浪费了。幸运的是，存储器映射给我们提供了一种清晰的机制，用来控制多个进程如何共享对象。<br>​一个对象可以被映射到虚拟存储器的一个区域，要么作为共享对象，要么作为私有对象。如果一个进程将一个共享对象映射到它的虚拟地址空间的一个区域内，那么这个进程对这个区域的任何写操作，对于那些也把这个共享对象映射到它们虚拟存储器的其他进程而言也是可见的。而且，这些变化也会反映在磁盘上的原始对象中。<br>​另一方面，对一个映射到私有对象的区域做的改变，对于其他进程来说是不可见的，并且进程对这个区域所做的任何写操作都不会反映在磁盘上的对象中。一个映射到共享对象的虚拟存储器区域叫做共享区域。类似地，也有私有区域。</p><p><img src="0e5322bba76ef59fea5b50f2c15c93be.png" alt=""></p><p>​如上图所示，两进程将相同的 共享目标文件映射到各自虚拟地址空间中的不同区域，而物理内存中只需存在单个文件副本。进程 1 对该共享区域的任何写入操作都对进程 2 可见，并且这些更改还会同步到磁盘上的原始文件。</p><p><img src="7c36b3fdf6d7f1ed5e62f62b4f25001e.png" alt=""></p><p>​如上图 (a) 所示，两进程将私有目标文件映射到各自虚拟地址空间的不同区域。进程 1 对该私有区域的任何写入操作都对进程 2 不可见，并且这些更改也不会同步到磁盘上的原始文件。如上图 (b) 所示，当进程 2 试图修改该区域中的内容时，<strong>内核会在物理内存中为页面创建一个新副本并更新页表条目使其指向它</strong>。由于页面复制发生在写入操作前，这种技术被称为<strong>写时复制（Copy-on-Write）</strong>，这些区域则是<strong>私有写时复制的（Private Copy-on-Write）</strong>。</p><h2 id="8-2-再看fork函数">8.2 再看<code>fork</code>函数</h2><p>​进程调用 <code>fork</code> 函数后，内核会为子进程分配一个唯一的 PID 并为其创建与父进程相同的<code>mm_struct</code>、<code>vm_area_structs</code>以及页表。当任意进程后续执行写入操作时，内核将使用写时复制技术创建新页面，这便保证了进程虚拟地址空间的私有性。</p><h2 id="8-3-再看execve函数">8.3 再看<code>execve</code>函数</h2><p>​如果进程调用 <code>execve</code> 函数，如<code>execve(&quot;a.out&quot;, NULL, NULL)</code>，则加载并运行<code>a.out</code>的步骤如下：</p><ol><li><strong>删除已存在的用户区域</strong>。删除当前进程虚拟地址空间中用户区域的<code>vm_area_structs</code>；</li><li><strong>映射私有区域</strong>。为新程序的代码、数据、bss 和堆栈区域创建<code>vm_area_structs</code>。这些区域都是私有写时复制的，代码和数据区域被映射到<code>a.out</code>文件中的 <a href="https://koktlzz.github.io/posts/linking-note/#%E5%8F%AF%E9%87%8D%E5%AE%9A%E4%BD%8D%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6">.text 和 .data</a>，bss 区域则被映射到大小包含在<code>a.out</code>内的匿名文件。堆栈的初始长度均为 0，其页面是零需求的；</li><li><strong>映射共享区域</strong>。如果<code>a.out</code>文件链接了共享库，如 C 标准库<code>libc.so</code>，那么还需要把这些对象动态链接到程序中，并将其映射到虚拟地址空间中的共享区域内；</li><li><strong>设置程序计数器(PC)</strong>。使当前进程上下文中的程序计数器指向新程序代码区域的入口点。</li></ol><p><img src="845975a26f00fa721b45a14beed48223.png" alt=""></p><h2 id="8-4-使用-mmap-函数的用户级存储器映射">8.4 使用 <code>mmap</code> 函数的用户级存储器映射</h2><p>Linux 进程可以使用 mmap 函数来创建新的虚拟存储器区域，并将对象映射到这些区域中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-type">void</span>  *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *start, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span>;<br><span class="hljs-comment">// Returns: pointer to mapped area if OK, MAP_FAILED (−1) on error</span><br></code></pre></td></tr></table></figure><p>​<code>mmap</code>函数请求内核创建一个起始地址为参数<code>start</code>的虚拟内存区域，该区域映射到文件描述符<code>fd</code>所指定的对象。连续对象的长度为参数<code>length</code>，其首部在文件中的偏移量为参数<code>offset</code>：</p><p><img src="6c7bf93e529ee550e548321ea3bb87a6.png" alt=""></p><p>参数<code>prot</code>中包含了描述虚拟内存区域访问权限的位，即<code>vm_area_structs</code>中的<code>vm_prot</code>：</p><ul><li><code>PROT_EXEC</code>：该区域中的页面包含可执行指令；</li><li><code>PROT_READ</code>：可以阅读该区域中的页面；</li><li><code>PROT_WRITE</code>：可以写入该区域中的页面；</li><li><code>PROT_NONE</code>：无法访问该区域中的页面。</li></ul><p>参数<code>flag</code>中包含了描述了映射对象类型的位：</p><ul><li><code>MAP_SHARED</code>：共享对象；</li><li><code>MAP_PRIVATE</code>：私有写时复制对象；</li><li><code>MAP_ANON</code>：匿名对象，对应的虚拟页面是零需求页面。</li></ul><p>​让内核创建一个新的包含 size 字节的只读、私有、请求二进制零的虚拟存储器区域。如果调用成功，那么 bufp 包含新区域的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">bufp=Mmap(<span class="hljs-number">-1</span>,Size,PROT_READ，MAP_PRIVATEIMAP_ANON，O，<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><code>munmap</code>函数删除起始于虚拟地址<code>start</code>、长度为<code>length</code>的区域，后续对已删除区域的引用会引发分段故障。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">munmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *start, <span class="hljs-type">size_t</span> length)</span>;<br><span class="hljs-comment">// Returns: 0 if OK, −1 on error</span><br></code></pre></td></tr></table></figure><h1>9.动态内存分配</h1><p>​虽然可以使用低级的mmap和munmap函数来创建和删除虚拟存储器的区域，但是C程序员还是会觉得当运行时需要额外虚拟存储器时，用**动态存储器分配器(dyamic memory allocator)**来创建虚拟内存区域。更方便，也有更好的可移植性。</p><p><strong>动态内存分配器为进程维护的虚拟内存区域被称为堆（Heap）</strong>，其一般结构为：</p><p><img src="88b3e2b633102a7fb450f185f304b3d4.png" alt=""></p><p>​<strong>堆向上增长</strong>，内核为每个进程都维护了一个指向堆顶的变量<code>brk</code>。分配器将堆看作一个包含<strong>不同尺寸 Block 的集合</strong>，<strong>每个 Block 都是一个连续的虚拟内存块</strong>。Block 有两种状态，已分配（Allocated）和空闲（Free）。所有分配器均显式地为应用程序分配 Block，但负责释放已分配 Block 的实体可能有所不同：</p><ul><li><strong>显式分配器</strong>：应用程序显式地释放已分配的 Block。C 和 C++ 程序分别调用<code>malloc</code>和<code>new</code>函数请求 Block，调用<code>free</code>和<code>delete</code>函数释放 Block；</li><li><strong>隐式分配器</strong>：分配器自行释放程序不再使用的已分配 Block，该过程被称为<strong>垃圾回收（Garbage Collection）</strong>。Lisp、ML 和 Java 等高级语言均采用这种方法。</li></ul><p>​本节剩下的部分讨论的是显式分配器的设计和实现。我们将在下一节中讨论隐式分配器。为了更具体，我们的讨论集中于管理堆存储器的分配器。然而，应该明白存储器分配是一个普遍的概念，可以出现在各种上下文中。例如，图形处理密集的应用程序就经常使用标准分配器来要求获得一大块虚拟存储器，然后使用与应用相关的分配器来管理块中的存储器，以支持图形节点的创建和销毁。</p><h2 id="9-1-malloc和free函数">9.1 malloc和free函数</h2><pre><code class="hljs">C标准库提供了一个称为malloc程序包的显式分配器。程序通过调用malloc函数来从堆中分配块。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br><span class="hljs-comment">// Returns: pointer to allocated block if OK, NULL on error</span><br></code></pre></td></tr></table></figure><p>​<code>malloc</code>函数请求堆中的一块 Block 并返回指向该 Block 的指针。Block 的大小至少为参数<code>size</code>，并可能根据其保存的数据对象类型进行适当对齐。在 32 位编译模式下，Block 的地址始终为 8 的倍数，而在 64 位中则为 16 的倍数。如果执行<code>malloc</code>遇到问题，如程序请求的 Block 大小超过了可用的虚拟内存，则函数返回<code>NULL</code>并设置 <a href="https://man7.org/linux/man-pages/man3/errno.3.html"><code>errno</code></a>。我们还可以使用<code>malloc</code>的包装函数<code>calloc</code>，它会将分配的内存初始化为零。类似地，<code>realloc</code>函数可以更改已分配 Block 的大小</p><p>​</p><p>​还可以使用<code>sbrk</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">sbrk</span><span class="hljs-params">(<span class="hljs-type">intptr_t</span> incr)</span>;<br><span class="hljs-comment">// Returns: old brk pointer on success, −1 on error</span><br></code></pre></td></tr></table></figure><p>​<code>sbrk</code>函数将参数<code>incr</code>与内核中的<code>brk</code>指针相加以增大或缩小堆。若执行成功，则返回<code>brk</code>的旧值，否则将返回 -1 并将<code>errno</code>设置为<code>ENOMEM</code>。</p><p>​程序通过调用<code>free</code>函数来释放已分配的堆块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span>;<br><span class="hljs-comment">// Returns: nothing</span><br></code></pre></td></tr></table></figure><p>​<code>free</code>函数将参数<code>ptr</code>指向的 Block 释放，而这些 Block 必须是由<code>malloc</code>、<code>calloc</code>或<code>realloc</code>分配的。该函数没有返回值，因此很容易产生一些令人费解的运行时错误。</p><p><img src="ed12d6c6d8d77d14f4befcb68d01c124.png" alt=""></p><p>上图展示了 C 程序如何使用<code>malloc</code>和<code>free</code>管理一个大小为 16 字（字长为 4 字节）的堆。图中的每个方框代表一个字，每个被粗线分隔的矩形代表一个 Block。有阴影的 Block 代表已分配，无阴影的 Block 则代表空闲。</p><ul><li>如上图 (a) 所示，程序请求一个 4 字的 Block，<code>malloc</code>从空闲块中切出一个 4 字的 Block 并返回指向该 Block 中第一个字的指针<code>p1</code>；</li><li>如上图 (b) 所示，程序请求一个 5 字的 Block，<code>malloc</code>从空闲块中切出一个 6 字的 Block 以实现双字对齐；</li><li>如上图 © 所示，程序请求一个 6 字的 Block，<code>malloc</code>从空闲块中切出一个 6 字的 Block；</li><li>如上图 (d) 所示，程序释放图 (b) 中分配的 Block。<code>free</code>返回后，指针<code>p2</code>依然指向已释放的 Block，因此程序不应在重新初始化<code>p2</code>前继续使用它；</li><li>如上图 (e) 所示，程序请求一个 2 字的 Block。<code>malloc</code>从上一步释放的 Block 中切出一部分并返回指向新 Block 的指针<code>p4</code>。</li></ul><h2 id="9-2-动态内存分配的原因">9.2 动态内存分配的原因</h2><p>​在程序实际运行之前，我们可能并不知道某些数据结构的大小。程序使用动态存储器分配的最重要的原因是<strong>经常直到程序实际运行时，它们才知道某些数据结构的大小</strong>。示例 C 程序将<code>n</code>个 ASCII 整型从标准输入读取到数组<code>array[MAXN]</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 15213</span><br><br><span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[MAXN];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">if</span> (n &gt; MAXN)<br>        app_error(<span class="hljs-string">&quot;Input file too big&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-built_in">array</span>[i]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​由于我们无法预测<code>n</code>的值，因此只能将数组大小写死为<code>MAXN</code>。<code>MAXN</code>的值是任意的，可能超出系统可用的虚拟内存量。另外，一旦程序想要读取一个比<code>MAXN</code>还大的文件，唯一的办法就是增大<code>MAXN</code>的值并重新编译程序。如果我们在运行时根据<code>n</code>的大小动态分配内存，以上问题便迎刃而解：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> *<span class="hljs-built_in">array</span>, i, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">array</span> = (<span class="hljs-type">int</span> *)Malloc(n * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-built_in">array</span>[i]);<br>    <span class="hljs-built_in">free</span>(<span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-3-对分配器的要求和目标">9.3 对分配器的要求和目标</h2><p>显式分配器必须在若干限制条件下运行：</p><ul><li>处理任意顺序的请求：分配器不能对<code>malloc</code>和<code>free</code>的请求顺序作出假设。例如，分配器不能假设所有的<code>malloc</code>都紧跟一个与之匹配的<code>free</code>；</li><li>立即响应请求：分配器不可以对请求重新排序或缓冲（Buffer）以提高性能；</li><li>仅使用堆：分配器使用的数据结构必须存储在堆中；</li><li>对齐 Block：分配器必须对齐 Block 以使其能够容纳任何类型的数据对象；</li><li>不修改已分配的 Block：分配器无法修改、移动或压缩已分配的 Block。</li></ul><p>衡量分配器性能的指标有：</p><ul><li>吞吐量（Throughput）：单位时间内完成的请求数；</li><li>内存利用率（Memory Utilization）：即堆内存的使用率。</li></ul><p>最大化吞吐量和最大化内存利用率之间存在矛盾，因此我们在设计分配器时需要找到二者的平衡。</p><h2 id="9-4-碎片">9.4 碎片</h2><p>​</p><p>​造成堆利用率很低的主要原因是一种称为**碎片(fagmentation)**的现象，当虽然有未使用的存储器但不能用来满足分配请求时，就会发生这种现象。有两种形式的碎片:<strong>内部碎片(intermalfragmentation)<strong>和</strong>外部碎片(external fragmentation)</strong>。</p><ul><li>内部碎片（Internal Fragmentation）：已分配的 Block 比进程请求的 Block（即 Payload）大，通常因分配器为满足对齐要求而产生；</li><li>外部碎片（External Fragmentation）：空闲内存充足但却没有空闲的 Block 能够满足分配请求。例如堆中有 4 个空闲的字且分布在两个不相邻的 Block 上，此时若进程申请一个 4 字的 Block 就会出现外部碎片。</li></ul><p>​内部碎片很容易量化，因为它只是已分配 Block 与 Payload 之间大小差异的总和，其数量仅取决于先前的请求模式和分配器的实现方式；外部碎片则难以量化，因为它还要受到未来请求模式的影响。为了减少外部碎片的产生，分配器力求维护少量较大的空闲 Block 而非大量较小的空闲 Block。</p><h2 id="9-5-实现难点">9.5 实现难点</h2><p>​</p><p>​我们可以想象出的最简单的分配器会把堆组织成一个大的字节数组，还有一个指针p，初始指向这个数组的第一个字节。为了分配size个字节，malloc将p的当前值保存在栈里，将p增加size，并将p的旧值返回到调用函数。free 只是简单地返回到调用函数，而不做其他任何事情。<br>​这个简单的分配器是设计中的一种极端情况。因为每个ma1loc和 free只执行很少量的指吞吐率会极好。然而，因为分配器从不重复使用任何块，存储器利用率将极差。一个实际的分配器要在吞吐率和利用率之间把握好平衡，就必须考虑以下几个问题:</p><ul><li>空闲块组织:我们如何记录空闲块?</li><li>放置:我们如何选择一个合适的空闲块来放置一个新分配的块?</li><li>分割:在我们将一个新分配的块放置到某个空闲块之后，我们如何处理这个空闲块中的剩余部分?</li><li>合并:我们如何处理一个刚刚被释放的块?本节剩下的部分将更详细地讨论这些问题。因为像放置、分割以及合并这样的基本技术贯穿在许多不同的空闲块组织中，所以我们将在一种叫做隐式空闲链表的简单空闲块组织结构中来介绍它们。</li></ul><h2 id="9-6-隐式空闲链表">9.6 隐式空闲链表</h2><p>​大多数分配器通过将一些数据结构嵌入到 Block 中以分辨其<strong>边界和状态</strong>，例如：</p><p><img src="f4db00fff25920c010449ef777dcc779.png" alt=""></p><p>​如上图所示，Block 由一个单字（四字节）的<strong>头部（Header）</strong>、有效负载（Payload）和一些额外**填充（Padding）**组成，头部中包含了 Block 的大小（Block Size）和状态信息（Allocated or Free）。如果系统采用双字对齐策略，那么每个 Block 的大小始终为 8 的倍数，其二进制表达的后 3 位始终为 0。因此我们可以仅在头部中存储该字段的前 29 位，剩余 3 位用来存储其他信息。上图中的位“a”便指示了此 Block 是已分配的还是空闲的。填充的大小是任意的，它可能是分配器为了避免外部碎片产生而设置的，也可能是为了满足对齐要求而存在的。</p><p>例如，假设我们有已分配的块，大小为24(0x18)字节。那么它的头部将是:</p><p><code>0x00000018|0x1=0x00000019</code></p><p>类似地，一个块大小为 40(0x28)字节的空闲块有如下的头部:</p><p><code>0x00000028|0x0=0x00000028</code></p><p>​头部后面就是应用调用malloc 时请求的有效载荷。有效载荷后面是一片不使用的填充块，其大小可以是任意的。需要填充有很多原因，比如，填充可能是分配器策略的一部分，用来对付外部碎片，或者也需要用它来满足对齐要求。</p><p>基于这种 Block 格式，我们可以将堆组织成一系列连续的已分配 Block 和空闲 Block：</p><p><img src="758e1ded8db1b51f85a0c00b1f2ac2fc.png" alt=""></p><p>​Block 通过其头部中的<strong>大小字段隐式地链接起来</strong>（addr(next_block) = addr(current_block) + block_size），因此我们将这种堆组织方式称为隐式空闲链表（Implicit Free List），分配器必须遍历堆中所有的 Block 才能得到全部空闲的 Block。我们还需要一个特殊的 Block 以标记堆的结尾，如上图中的 “0/1”。隐式空闲链表的优点是简单，但任何搜索空闲 Block 的操作（如放置新分配的 Block）的成本都与堆中 Block 的总数成正比。</p><h2 id="9-7-放置新分配的-Block">9.7 放置新分配的 Block</h2><p>​分配器搜索空闲链表，查找一个足够大可以放置所请求当一个应用请求一个k字节的块时，块的空闲块。分配器执行这种搜索的方式是由<strong>放置策略(placement policy)<strong>确定的。一些常见的策略是</strong>首次造配(frst fit)</strong>、<strong>下一次适配(next fit)<strong>和</strong>最佳适配(best fit)</strong>:</p><ul><li>第一次拟合（First Fit）：从头开始遍历空闲链表并选择第一个满足条件的 Block；</li><li>下一次拟合（Next Fit）：从上一次搜索停止的地方开始遍历空闲链表并选择第一个满足条件的 Block；</li><li>最佳拟合（Best Fit）：遍历所有 Block 并选择满足条件且最小的 Block</li></ul><p>第一次拟合的优点是较大的 Block 通常存留在链表末尾，但一些较小的 Block 也会散落在链表开头，这将增加搜索较大 Block 的时间。如果链表开头存在大量较小的 Block，下一次拟合就比第一次拟合快很多。然而研究表明，下一次拟合的内存利用率比第一次拟合低。最佳拟合的内存利用率通常比其他两种策略高，但对隐式空闲链表来说，其搜索时间显然要比它们慢很多。</p><h2 id="9-8-分割空闲的-Block">9.8 分割空闲的 Block</h2><p>​如果分配器找到了合适的 Block 并将整个 Block 分配给程序，就有可能产生内部碎片。为了避免这一问题，分配器可以将选取的 Block 分成一个已分配的 Block 和一个新的空闲 Block：</p><p>​然而，如果匹配不太好，那么分配器通常会选择将这个空闲块分割为两部分。第一部分变成分配块，而剩下的变成一个新的空闲块。下图展示了分配器如何分割8个字的空闲块，来满足一个应用的对堆存储器3个字的请求：</p><p><img src="a76b3b1566d8c2fde6add934ebbfc7b4.png" alt=""></p><h2 id="9-9-获取额外的堆内存">9.9 获取额外的堆内存</h2><p>​如果分配器无法找到合适的 Block，它可以尝试将<strong>物理相邻的空闲 Block 合并以获取更大的 Block</strong>。但如果仍然无法满足请求，分配器便会调用<code>sbrk</code>函数向内核请求额外的堆内存并将其转换为一个新的空闲 Block。</p><h2 id="9-10-合并空闲的-Block">9.10 合并空闲的 Block</h2><p>​当分配器释放一个已分配块时，可能有其他空闲块与这个新释放的空闲块相邻。这些邻接的空闲块可能引起一种现象，叫做<strong>假碎片(fault fragmentation)</strong>，就是有许多可用的空闲块被切割成小的、无法使用的空闲块。比如，下图展示了释放图 9-37中分配的块后得到的结果：</p><p><img src="97dc0e2fe0e88d58d80de31739a9dd1e.png" alt=""></p><p>​结果是两个相邻的空闲块，每一个的有效载荷都为3个字。因此，接下来一个对4个字有效载荷的请求就会失败，即使两个空闲块的合计大小足够大，可以满足这个请求。</p><p>​为了解决假碎片问题，任何实际的分配器都必须合并相邻的空闲块，这个过程称为合并(coalescing)。这就出现了一个重要的策略决定，那就是何时执行合并。分配器可以选择<strong>立即合并(immediate coalescing)</strong>，也就是在每次一个块被释放时，就合并所有的相邻块。或者它也可以选择<strong>推迟合并(deferred coalescing)</strong>，也就是等到某个稍晚的时候再合并空闲块。例如，分配器可以推迟合并，直到某个分配请求失败，然后扫描整个堆，合并所有的空闲块。</p><p>​立即合并很简单明了，可以在常数时间内执行完成，但是对于某些请求模式，<strong>这种方式会产生一种形式的抖动，块会反复地合并</strong>，然后马上分割。例如，在图9-38中，反复地分配和释放一个3个字的块将产生大量不必要的分割和合并。在对分配器的讨论中，我们会假设使用立即合并，但是你应该了解，快速的分配器通常会选择某<strong>种形式的推迟合并</strong>。</p><h2 id="9-11-带边界标记的合并">9.11 带边界标记的合并</h2><p>​我们把即将释放的 Block 称为<strong>当前块（Current Block）</strong>，其头部指向下一个 Block 的头部（addr(next_block) = addr(current_block) + block_size）。因此我们很容易判断下一个 Block 是否空闲，并且只需将当前 Block 头部中的大小字段与之相加即可完成合并。</p><p>​但若要合并上一个 Block，我们只能遍历整个链表，并在到达当前 Block 前不断记下上一个 Block 的位置。因此对于隐式空闲链表，每次调用<code>free</code>函数，合并上一个 Block 的时间与堆内存的大小成正比。</p><p>​我们可以在每个 Block 末尾都添加一个头部的副本以使合并 Block 的时间变为常数，这种技术被称为边界标记（Boundary Tags）：</p><p><img src="e1c09f1f69199ea680604743b875c0e4.png" alt=""></p><p>​上一个 Block 的尾部始终与当前 Block 的头部相距一个字长，因此分配器可以通过检查上一个 Block 的尾部来确定其位置和状态。</p><p>考虑当分配器释放当前块时所有可能存在的情况:</p><ol><li>前面的块和后面的块都是已分配的。</li><li>前面的块是已分配的，后面的块是空闲的。</li><li>前面的块是空闲的，而后面的块是已分配的，</li><li>前面的和后面的块都是空闲的。</li></ol><p>​下图展示了分配器是如何使用边界标记合并 Block 的：</p><p><img src="8a5a3119d483b10be0f532b074385573.png" alt=""></p><ol><li>在情况1中，两个邻接的块都是已分配的，因此不可能进行合并。所以当前块的状态只是简单地从已分配变成空闲。</li><li>在情况2中，当前块与后面的块合并。用当前块和后面块的大小的和来更新当前块的头部和后面块的脚部。</li><li>在情况3中，前面的块和当前块合并。用两个块大小的和来更新前面块的头部和当前块的脚部。</li><li>在情况4中，要合并所有的三个块形成一个单独的空闲块，用三个块大小的和来更新前面块的头部和后面块的脚部。在每种情况中，合并都是在常数时间内完成的。</li></ol><p>​由于每个 Block 都包含头部和尾部，当 Block 数量较多时，边界标记显著地增加了内存的开销。<strong>考虑到分配器只有在上一个 Block 空闲时才需要获取其尾部内的 Block 大小</strong>，因此我们可以将上一个 Block 的状态存储在当前 Block 头部的<strong>多余低位中</strong>，这样已分配的 Block 便不需要尾部了。</p><h2 id="9-12-显式空闲链表">9.12 显式空闲链表</h2><p>​由于分配 Block 的时间与 Block 的总数成正比，隐式空闲链表不适用于通用分配器。我们可以在每个空闲 Block 中加入一个指向上一个空闲 Block 的前驱（Predecessor）指针和一个指向下一个空闲 Block 的后继（Successor）指针，这样堆的组织结构就变成了一个双向链表，我们称其为显式空闲链表（Explicit Free List）。</p><p><img src="805594378ff24f425c41a550224902d6.png" alt=""></p><p>​如果采用第一次拟合策略，显式空闲链表分配 Block 的时间与空闲 Block 的数量成正比，而释放 Block 的时间则取决于空闲 Block 的排序方式：</p><ul><li>后进先出（Last-in First-out，LIFO）：将刚被释放的 Block 插入到链表开头，因此释放 Block 的时间为常数，并且可以通过边界标记使合并 Block 的时间也为常数；</li><li>按地址顺序（Address Order）：使链表中每个 Block 的地址均小于其后继 Block 的地址。在这种情况下，释放 Block 需要一定的时间来寻找合适的位置，但堆内存的利用率比后进先出高。</li></ul><p>显式空闲链表的缺点在于指针的引入增加了空闲 Block 的大小，这将增大<strong>内部碎片</strong>发生的可能性。</p><h2 id="9-13-分离式空闲链表">9.13 分离式空闲链表</h2><p>​就像我们已经看到的，一个使用单向空闲块链表的分配器需要与空闲块数量呈线性关系的时间来分配块。一种流行的减少分配时间的方法，通常称为<strong>分离存储(segregatedstorage)</strong>，就是维护<strong>多个空闲链表</strong>，其中每个链表中的块有大致相等的大小。一般的思路是将所有可能的块大小分成一些等价类，也叫做<strong>大小类(size class)</strong>。有很多种方式来定义大小类。例如，我们可以根据2的幂来划分块大小:</p><p>​<strong>{1},{2},{3,4},{5–8},…,{1025–2048},{2049–4096},{4097–∞}</strong></p><p>也可以让每个较小的 Block 独自成为一个大小类，较大的 Block 依然按 2 的幂划分：</p><p>​<strong>{1},{2},{3},…,{1024},{1025–2048},{2049–4096},{4097–∞}</strong></p><p>​每个空闲链表都属于某个大小类，因此我们可以将堆看成一个按大小类递增的空闲链表数组。当进程请求一个 Block 时，分配器会根据其大小在适当的空闲链表中搜索。如果找不到满足要求的 Block，它便会继续搜索下一个链表。</p><p>​不同的分离式空闲链表在定义大小类的方式、合并 Block 的时机以及是否允许分割 Block 等方面有所不同，其中最基本的两种类型为<strong>简单分离存储（Simple Segregated Storage）<strong>和</strong>分离适配（Segregated Fits）</strong>。</p><ol><li>简单分离存储</li></ol><p>​在简单分离存储中，空闲链表内每个 Block 的大小均等于其所属大小类中最大的元素。如某个大小类为 {17-32}，则其对应的空闲链表中 Block 的大小都是 32。当进程请求一个 Block 时，分配器选取满足请求的空闲链表并分配其中第一个 Block；当某个 Block 被释放后，分配器将其插入到合适的空闲链表前面。因此，简单分离存储分配和释放 Block 的时间均为常量。</p><p>​一个显著的缺点是，简单分离存储很容易造成内部和外部碎片。因为空闲块是不会被分割的，所以可能会造成内部碎片。更糟的是，因为不会合并空闲块，所以某些引用模式会引起极多的外部碎片。</p><ol start="2"><li>分离适配</li></ol><p>​使用分离适配方法，分配器维护着一个空闲链表的数组。每个空闲链表是和一个大小类相关联的，并且被组织成某种类型的显式或隐式链表。每个链表包含潜在的大小不同的块，这些块的大小是大小类的成员。有许多种不同的分离适配分配器。这里，我们描述了一种简单的版本。</p><p>​为了分配一个块，我们必须确定请求的大小类，并且对适当的空闲链表做首次适配，查找一个合适的块。如果我们找到了一个，那么我们(可选地)分割它，并将剩余的部分插入到适当的空闲链表中。如果我们找不到合适的块，那么就搜索下一个更大的大小类的空闲链表。如此重复，直到找到一个合适的块。如果空闲链表中没有合适的块，那么我们就向操作系统请求额外的堆存储器，从这个新的堆存储器中分配出一个块，将剩余部分放置在适当的大小类中。要释放一个块，我们执行合并，并将结果放置到相应的空闲链表中。</p><p>​分离适配方法是一种常见的选择，C标准库中提供的GNU <code>malloc</code>包就是采用的这种方法因为这种方法既快速，对存储器的使用也很有效率。搜索时间减少了，因为搜索被限制在堆的某个部分，而不是整个堆。存储器利用率得到了改善，因为有一个有趣的事实:对分离空闲链表的简单的首次适配搜索，其存储器利用率近似于对整个堆的最佳适配搜索的存储器利用率。</p><p>​3. 伙伴系统</p><p>​伙伴系统(buddy system)是分离适配的一种特例，其中每个大小类都是2的幂。基本的思路是假设一个堆的大小为2&quot;个字，我们为每个块大小2“维护一个分离空闲链表，其中0&lt;k≤m。请求块大小向上舍人到最接近的2的幂。最开始时，只有一个大小为 2&quot;个字的空闲块。<br>​为了分配一个大小为2“的块，我们找到第一个可用的、大小为2的块，其中k≤j≤ m。如果j=k，那么我们就完成了。否则，我们递归地二分割这个块，直到j=k。当我们进行这样的分割时，每个剩下的半块(也叫做伙伴)被放置在相应的空闲链表中。要释放一个大小为2的块，我们继续合并空闲的伙伴。当我们遇到一个已分配的伙伴时，我们就停止合并。关于伙伴系统的一个关键事实是，给定地址和块的大小，很容易计算出它的伙伴的地址。例如，一个块大小为 32字节，地址为：</p><p>​xxx…x00000<br>它的伙伴的地址为：<br>​xxx…x10000<br>换句话说，一个块的地址和它的伙伴的地址只有一位不相同，伙伴系统分配器的主要优点是它的快速搜索和快速合并。主要缺点是要求块大小为2的幂可能导致显著的内部碎片。因此，伙伴系统分配器不适合通用目的的工作负载。然而，对于某些特定应用的工作负载，其中块大小预先知道是2的幂，伙伴系统分配器就很有吸引力了。</p><h1>10. 垃圾收集</h1><p>​垃圾回收器（Garbage Collector）是一种动态存储分配器，它会自动释放程序不再需要的 Block（垃圾）。</p><h2 id="10-1-垃圾收集器的基本知识">10.1 垃圾收集器的基本知识</h2><p>​</p><p>​垃圾回收器将内存看作一个有向可达性图：</p><p><img src="ad931fca0fb534e66d367e94bd7d525d.png" alt=""></p><p>​图中的节点被分为一组根节点（Root Nodes）和一组堆节点（Heap Nodes），每个堆节点都对应于一个堆中已分配的 Block。有向边 <em>p</em>→<em>q</em>表示 Block <em>p</em> 中的某个位置指向 Block <em>q</em> 中的某个位置。根节点对应于不在堆中却包含了指向堆的指针的位置，这些位置可以是寄存器、栈中的变量或可读写数据区域中的全局变量。</p><p>​如果根节点与堆节点之间存在一条有向路径，我们就称该堆节点是<strong>可达的（Reachable）</strong>。在任何时刻，不可达的节点都与程序不再使用的 Block 对应。垃圾回收器<strong>定期释放</strong>不可达节点并将其返回到空闲链表。</p><p>​ML 和 Java 等语言的垃圾回收器对应用程序使用指针的方式进行了严格的限制，因此它可以维护一个精确的可达性图，从而回收所有的垃圾。而 C 和 C++ 等语言的垃圾回收器则无法保证可达性图的精确性，一些不可达的节点可能被错误地识别为可达的，我们称其为<strong>保守垃圾回收器（Conservative Garbage Collector）</strong>。</p><p>​收集器可以按需提供它们的服务，或者它们可以作为一个和应用并行的独立线程，不断地更新可达图和回收垃圾。例如，考虑如何将一个C程序的保守的收集器加入到已存在的malloc包中，如图所示：</p><p><img src="180d20d57ac10a4c1e76571cec65ab1e.png" alt=""></p><p>​无论何时需要堆空间，应用都会用通常的方式调用malloc。如果 malloc 找不到一个合适的空闲块，那么它就调用垃圾收集器，希望能够回收一些垃圾到空闲链表。收集器识别出垃圾块，并通过调用 free函数将它们返回给堆。关键的思想是收集器代替应用去调用free。当对收集器的调用返回时，malloc重试，试图发现一个合适的空闲块。如果还是失败了，那么它就会向操作系统要求额外的存储器。最后，malloc返回一个指向请求块的指针(如果成功)或者返回一个空指针(如果不成功)。</p><h2 id="10-2-Mark-Sweep-垃圾收集器">10.2 Mark&amp;Sweep 垃圾收集器</h2><p>Mark&amp;Sweep 是常用的垃圾回收算法之一，它分为两个阶段：</p><ul><li>标记（Mark）阶段：标记所有可达的根节点后代。通常我们将 Block 头部的多余低位之一用于指示该 Block 是否被标记；</li><li>清除（Sweep）阶段：释放所有未标记且已分配的 Block</li></ul><p>为了更好地理解 Mark&amp;Sweep 算法，我们作出以下假设：</p><ul><li><code>ptr</code>：由<code>typedef void *ptr</code>定义的类型；</li><li><code>ptr isPtr(ptr p)</code>：若<code>p</code>指向已分配 Block 中的某个字，则返回指向该 Block 起始位置的指针<code>b</code>，否则返回<code>NULL</code>；</li><li><code>int blockMarked(ptr b)</code>：如果该 Block 已被标记则返回<code>true</code>；</li><li><code>int blockAllocated(ptr b)</code>：如果该 Block 已分配则返回<code>true</code>；</li><li><code>void markBlock(ptr b)</code>：标记 Block；</li><li><code>int length(ptr b)</code>：返回 Block 除头部外的字长；</li><li><code>void unmarkBlock(ptr b)</code>：将 Block 的状态从已标记转换为未标记；</li><li><code>ptr nextBlock(ptr b)</code>：返回指向下一个 Block 的指针。</li></ul><p>那么此算法就可以用下图中的伪码表示:</p><p><img src="bb2f274c0af56a0404d20277955af535.png" alt=""></p><p>​在标记阶段，垃圾回收器为每个根节点调用一次<code>mark</code>函数。若<code>p</code>未指向已分配且未标记的 Block，则该函数直接返回。否则，它标记该 Block 并将其中的每个字作为参数递归地调用自身（<code>mark(b[i])</code>）。此阶段结束时，任何未标记且已分配的 Block 都是不可达的；在扫描阶段，垃圾回收器只调用一次<code>sweep</code>函数。该函数遍历堆中的每一个 Block，释放所有已分配且未标记的 Block。</p><p><img src="498b2bceec9f573c81c483527665374a.png" alt=""></p><p>​上图中的每个方框代表一个字，每个被粗线分隔的矩形代表一个 Block，而每个 Block 都有一个单字的头部。最初，堆中有 6 个已分配且未标记的 Block。Block 3 中包含指向 Block 1 的指针，Block 4 中包含指向 Block 3 和 6 的指针。根节点指向 Block 4，因此 Block 1、3、4 和 6 从根节点可达，它们会被垃圾回收器标记。在扫描阶段完成后，剩余不可达的 Block 2 和 5 将被释放。</p><h1>小结：</h1><p>设计一个malloc和gc（在后面的博客中我会贴出）</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_8_异常控制流</title>
    <link href="/2024/08/30/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-8-%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <url>/2024/08/30/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-8-%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>​在计算机的运行过程中，程序计数器依次指向一系列的值：<em>a0,a1,…,an</em>。其中，<em>ak</em> 是其对应指令 <em>Ik</em> 的地址。从<em>ak</em> 到 <em>ak</em>+1 的转换被称为<strong>控制转移（Control Transfer）</strong>，一系列的控制转移则被称为<strong>处理器的控制流（Control Flow）</strong>。</p><p>​最简单的控制流便是程序中的指令按顺序执行，即 <em>Ik</em> 与 <em>Ik+1</em> 在内存中相邻。不过，这种“平滑”的控制流通常因指令的跳转、调用和返回而突然改变，此时 <em>Ik</em> 便不再与 <em>Ik+1</em> 相邻。</p><p>​<strong>程序内部的状态是由程序变量表示的</strong>，控制流使得程序可以对其更新做出反应。但系统还必须能够应对自身状态的变化，它们无法被内部程序变量捕获，甚至不一定与程序的执行有关。比如，数据包在到达网络适配器后需要被存储到内存中；程序请求磁盘中的数据时需要得知其何时可用；父进程必须在其子进程终止时收到通知等。</p><p>现代系统通过**异常控制流（Exceptional Control Flow，ECF）**来处理上述情况，它应用于计算机系统的所有级别中。</p><ul><li>比如在硬件层，硬件检测到的事件会触发控制突然转移到异常处理程序。</li><li>在操作系统层，内核通过上下文转换将控制从一个用户进程转移到另一个用户进程。</li><li>在应用层，一个进程可以发送信号到另一个进程，而接收者会将控制突然转移到它的一个信号处理程序。一个程序可以通过回避通常的栈规则，并执行到其他函数中任意位置的非本地跳转来对错误做出反应。</li></ul><div class="note note-secondary">            <p>作为程序员，理解 ECF 很重要，这有很多原因:</p><ul><li>理解ECF将帮助你理解重要的系统概念。ECF是操作系统用来实现IO、进程和虚拟存储器的基本机制。在能够真正理解这些重要概念之前，你必须理解 ECF。</li><li>理解ECF 将帮助你理解应用程序是如何与操作系统交互的。应用程序通过使用一个叫做陷阱(trap)或者系统调用(systemcall)的ECF形式，向操作系统请求服务。比如，向磁盘写数据、从网络读取数据、创建一个新进程，以及终止当前进程，都是通过应用程序调用系统调用来实现的。理解基本的系统调用机制将帮助你理解是如何向应用提供这些服务的理解ECF将帮助你编写有趣的新应用程序。操作系统为应用程序提供了强大的ECF机制用来创建新进程、等待进程终止、通知其他进程系统中的异常事件，以及检测和响应这些事件。如果你理解这些 ECF机制，那么你就能用它们来编写诸如 Unix 外壳和 Web 服务器之类的有趣程序了。</li><li>理解 ECF 将帮助你理解并发。ECF是计算机系统中实现并发的基本机制。中断应用程序、进程和线程(它们的执行在时间上是重叠的)执行的异常处理程序和中断应用程序执行的信号处理程序都是在运行中的并发的例子。理解ECF是理解并发的第一步。我们会在第12 章中更详细地研究并发。</li><li>理解 ECF 将帮助你理解软件异常如何工作。像C+ 和Java这样的语言通过 try、catch 以及throw语句来提供软件异常机制。软件异常允许程序进行非本地跳转(违反通常的调用/返回栈规则的跳转)来响应错误情况。非本地跳转是一种应用层ECF，在C中是通过setimp和 longjmp 函数提供的。理解这些低级函数将帮助你理解高级软件异常如何得以实现。</li></ul>          </div><h1>1.异常</h1><p>​**异常（Exception）**是为了响应处理器状态改变而在控制流中突然发生的变化，其基本思想如下图所示：</p><p><img src="4b1aeafc00f074c455db1328b70d86cf.png" alt=""></p><p>​处理器状态的变化被称为<strong>事件（Event）</strong>，它可能与当前指令（<em>Icurr</em>）的执行直接相关，比如算术溢出或除数为零；也可能与当前指令的执行无关，比如系统计时器关闭或 I/O 请求完成。</p><h2 id="1-1-异常处理">1.1 异常处理</h2><p>​异常处理涉及到软件和硬件的密切合作，因此很容易将不同组件执行的工作相混淆。系统中每种可能的异常都对应了一个唯一的非负整数，即<strong>异常数字（Exception Number）</strong>。当计算机系统启动时，操作系统会初始化一个跳转表，也称<strong>异常表（Exception Table）</strong>。异常数字是异常表的索引，其中的每个条目 k 均包含了异常 k 的处理程序地址,异常表的格式格式如图所示：</p><p><img src="f54bd5d2165b4e0c7d4c4f155306f4a7.png" alt=""></p><p>​异常表的起始地址放在一个叫做<strong>异常表基址寄存器(exception table base register)<strong>的特殊CPU 寄存器里，当处理器检测到事件的发生时，首先将确定异常数字，然后根据异常表进行一个间接过程调用(异常)，到一个专门设计用来处理这类事件的</strong>操作系统子程序(异常处理程序(exception handler))</strong> 。调用过程如图所示：</p><p><img src="bf678f8a3d619f1ce6e8fb3edac5e7ae.png" alt=""></p><p>异常与过程调用类似，但也有一些重要区别：</p><ul><li>异常的返回地址要么是当前指令（<em>Icurr</em>），要么是下一条指令（<em>Inext</em>）；</li><li>处理器还会将一些额外的处理器状态信息压入栈中。当处理程序返回后，这些信息是重启被中断程序所必需的；</li><li>异常处理程序在内核态运行，因此可以访问所有系统资源</li></ul><h2 id="1-2-异常的分类">1.2 异常的分类</h2><p><img src="8b5f71e1c11db0b5a93f3e534bca3dd8.png" alt=""></p><h3 id="1-中断">1.中断</h3><p>​**中断（Interrupt）**异步发生，因为它是由处理器外部的 I/O 设备发出的信号产生的。</p><p><img src="2c8d40e058dfb01af8705778057184a3.png" alt=""></p><p>​当前指令执行完毕后，处理器注意到中断引脚变高，于是从系统总线读取异常数字，然后调用对应的中断处理程序。当处理程序返回时，它将控制权返回给下一条指令。随后程序继续执行，就好像中断从未发生过一样。</p><p>其余几种异常作为当前指令的执行结果<strong>同步发生</strong>，我们称之为<strong>故障指令（Faulting Instruction）</strong>。</p><h3 id="2-陷阱和系统调用">2.陷阱和系统调用</h3><p>​<strong>陷阱（Trap）<strong>是</strong>有意</strong>的异常，是执行一条指令的结果。与中断处理程序一样，陷阱处理程序也将控制返回给下一条指令。其最重要的用途是在用户程序和内核之间提供接口，即<strong>系统调用（System Call）</strong>。</p><p>​用户程序通过系统调用向内核请求服务，如读取文件（<code>read</code>）、创建新进程（<code>fork</code>）、加载新程序（<code>execve</code>）和终止当前进程（<code>exit</code>）等。</p><p><img src="04a892ee33872e2cb91694b94f67b74b.png" alt=""></p><p>​在程序员看来，系统调用和常规函数没有什么区别。但常规函数运行在<strong>用户态(user mode)</strong>，因此其可执行的指令类型受限，也只能访问用户栈。而系统调用运行在<strong>内核态(kernel mode)</strong>，能够执行特权指令并访问内核栈。</p><h3 id="3-故障">3.故障</h3><p>**故障（Faulting）**是由一些错误状况引起的异常，而这些错误情况有可能被处理程序修正，否则将返回到内核中的中止例程（图中的“abort”）：</p><p><img src="ea2f4d53d9c773d236c43ab3228cf316.png" alt=""></p><h3 id="4-中止">4.中止</h3><p>与故障相比，引发中止（Abort）的错误状况无法挽救。通常是硬件出现问题，如 RAM 位损坏引起的奇偶校验错误。中止处理程序永远不会将控制权返回给应用程序：</p><p><img src="d74c0fa7b9e720f42ef509078eb3c973.png" alt=""></p><h2 id="1-3-Linux-x86-64-系统中的异常">1.3 Linux/x86-64 系统中的异常</h2><table><thead><tr><th style="text-align:center">Exception Number</th><th style="text-align:center">Description</th><th style="text-align:center">Exception Class</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">Divide Error</td><td style="text-align:center">Fault</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">General Protection Fault</td><td style="text-align:center">Fault</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">Page Fault</td><td style="text-align:center">Fault</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">Machine Check</td><td style="text-align:center">Abort</td></tr><tr><td style="text-align:center">32-255</td><td style="text-align:center">OS-defined Exception</td><td style="text-align:center">Interrupt or Trap</td></tr></tbody></table><p><img src="ddc0bc7038e66dca8a8b96a41a8f0dab.png" alt="中文版"></p><ul><li>除法故障（Divide Error）：当应用程序尝试除以 0 或除法指令的结果对目标操作数来说太大时，就会发生除法故障。Unix 不会试图纠正除法故障，而是直接中止程序；</li><li>一般保护故障（General Protection Fault）：一般保护故障出现的原因有很多，通常是程序引用了未定义的虚拟内存区域，或试图向只读文本段写入。Linux 不会试图纠正该故障，而 Shell 一般将其报告为分段故障（Segmentation Faults）；</li><li>缺页故障（Page Fault）：程序引用不在内存而在磁盘上的虚拟页面会导致缺页故障。处理程序将磁盘上合适的虚拟内存页面映射到物理内存页面，然后重新执行故障指令；</li><li>机器检查（Machine Check）：一旦系统在执行指令期间检测到致命的硬件错误，便会发生机器检查。处理程序永远不会将控制权返回给应用程序。</li></ul><h2 id="1-4-系统调用">1.4 系统调用</h2><p>x86-64<br><img src="20220213214429.png" alt="Linux/x86-64 的系统调用"></p><p>IA32<br><img src="99ac5a2a8e16aad2548d4232b21078c6.png" alt="Linux/IA32 的系统调用"></p><p>上图中的每个系统调用都有一个唯一的数字，对应了内核中跳转表的偏移量。</p><ul><li>注意，该跳转表与上文提到的异常表不同。</li></ul><p>​C 标准库为大多数系统调用提供了一组包装函数（Wrapper Function），它们比直接使用系统调用更加方便。系统调用及其相关的包装函数被统称为系统级函数。举例来说，我们可以使用系统级函数<code>write</code>代替<code>printf</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hello, world\n&quot;</span>, <span class="hljs-number">13</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​X86-64 系统通过<code>syscall</code>指令使用系统调用，其所有参数均通过寄存器传递。按照惯例，寄存器 %rax 保存系统调用编号，寄存器 %rdi、%rsi、%rdx、%r10、%r8 和 %r9 依次保存各参数的值。系统调用的返回值将写入到寄存器 %rax 中，若为负则表示发生了与负<code>errno</code>相关的错误。因此，上面的程序可以直接用汇编语言表示为：</p><p><img src="20220213221637.png" alt=""></p><h1>2.进程</h1><p>​异常是允许操作系统提供**进程(process)**的概念所需要的基本构造块，进程是计算机科学中最深刻最成功的概念之一。<br>​当我们在一个现代系统上运行一个程序时，会得到一个假象，就好像我们的程序是系统中当前运行着的唯一的程序。我们的程序好像是独占地使用处理器和存储器。处理器就好像是无间断地一条接一条地执行程序中的指令。最后，我们程序中的代码和数据好像是系统存储器中唯一的对象。这些假象都是通过进程的概念提供给我们的。</p><p>​进程是正在执行的程序的实例，系统中的每个程序都在进程的**上下文(context)**中运行。上下文由程序正确运行所需的状态组成，包括存储在内存中的程序代码和数据、栈、通用寄存器中的内容、程序计数器、环境变量以及打开 <a href="https://en.wikipedia.org/wiki/File_descriptor">文件描述符</a> 。</p><p>进程为应用提供了两个关键抽象：</p><ul><li>一个独立的逻辑控制流，让我们产生程序独占处理器的错觉；</li><li>一个私有的地址空间，让我们产生程序独占内存的错觉。</li></ul><h2 id="2-1-逻辑控制流">2.1 逻辑控制流</h2><p>​即使在系统中通常有许多其他程序在运行，进程也可以向每个程序提供一种假象，好像它在独占地使用处理器。如果想用调试器单步执行程序，我们会看到一系列的程序计数器(PC)的值，这些值唯一地对应于包含在程序的可执行目标文件中的指令，或者是包含在运行时动态链接到程序的共享对象中的指令。这个PC值的序列叫做逻辑控制流，或者简称<strong>逻辑流</strong>。</p><p><img src="bbbb9e617557b2f9d8020ed515f93d3d.png" alt=""></p><p>进程轮流使用处理器。每个进程执行其流程的一部分，然后在其他进程执行时被<strong>抢占(preempted)（即暂时挂起）</strong>。</p><h2 id="2-2-并发流">2.2 并发流</h2><p>​一个逻辑流的执行在时间上与另一个流重叠，称为<strong>并发流(Concurrent Flow)</strong>，这两个流被称为并发地运行。更准确地说，流X和Y互相并发，当且仅当X在Y开始之后和Y结束之前开始,或者Y在X开始之后和X结束之前开始。例如，在图8-12中，进程A和B并发地运行，A和C也一样。另一方面，B和C没有并发地运行，<strong>因为B的最后一条指令在C的第一条指令之前执行。</strong><br>​多个流并发地执行的一般现象称为<strong>并发(concurrency)</strong>。一个进程和其他进程轮流运行的概念称为<strong>多任务(multitasking)</strong>。一个进程执行它的控制流的一部分的每一时间段叫做<strong>时间片(time slice)</strong>。因此，多任务也叫做<strong>时间分片(time slicing)</strong>。<br>​注意，并发的思想与流运行的处理器核数或者计算机数无关。如果两个流在时间上重叠，那么它们就是并发的，即使它们是运行在同一个处理器上的。然而，有时我们会发现确认并行流是很有帮助的，它是<strong>并发流的一个真子集</strong>。如果两个流并发地运行在不同的处理器核或者计算机上，那么我们称它们为<strong>并行流(parallel fow)</strong>，它们并行地运行(runninginparallel)，且并行地执行(parallel execution)。</p><h2 id="2-3-私有地址空间">2.3 私有地址空间</h2><p>​进程为程序提供了独享的私有地址空间，与空间内特定地址相关的内存字节通常不能被其他任何进程读取或写入。尽管私有地址空间的内容不同，但其具有相同的组织结构（图中的“%esp”应为“%rsp”）：</p><p><img src="359ff97e4360fe3385dbe5369f5fadd8.png" alt=""></p><p>​地址空间底部是为用户程序保留的，代码段总是从地址 0x400000 开始。地址空间顶部是为内核保留的，包含了内核为进程执行指令（如系统调用）时使用的代码、数据和栈。</p><h2 id="2-4-用户模式和内核模式">2.4 用户模式和内核模式</h2><p>​处理器通过保存在控制寄存器中的模式位（Mode Bit）来识别进程当前享有的特权。当模式位被设置时，进程运行在内核态（Kernel Mode），反之则运行在用户态（User Mode）。在内核态中运行的程序可以执行指令集中的任意指令，并且能够访问系统中的任意位置。而在用户态中运行的程序则受到限制，只能使用系统调用间接地访问内核代码和数据。</p><p>​应用程序的进程只能通过异常来从用户态切换到内核态。当异常发生且控制转移到异常处理程序时，处理器切换到内核态。随后异常处理程序在内核态中运行，处理器将在它返回时切换回用户态。</p><p>​Linux提供了一种聪明的机制，叫做/proc 文件系统，它允许用户模式进程访问内核数据结构的内容。/proc文件系统将许多内核数据结构的内容输出为一个用户程序可以读的文本文件的层次结构。比如，你可以使用/proc文件系统找出一般的系统属性，如CPU类型(/proc/cpuinfo)，或者某个特殊的进程使用的存储器段(/proc/<process id>/maps)。2.6版本的 Limux 内核引人 /sys 文件系统，它输出关于系统总线和设备的额外的低层信息。</p><h2 id="2-5-上下文切换">2.5 上下文切换</h2><p>​内核为每个进程维持一个<strong>上下文(context)</strong>。上下文就是内核重新启动一个被抢占的进程所需的状态。它由一些对象的值组成，这些对象包括通用目的寄存器、浮点寄存器、程序计数器、用户栈、状态寄存器、内核栈和各种内核数据结构，比如描绘地址空间的页表、包含有关当前进程信息的进程表，以及包含进程已打开文件的信息的文件表。</p><p>​在进程执行期间，内核可以暂时挂起当前进程并重启先前被抢占的进程，这一行为被称为<strong>调度（Scheduling）</strong>，是由内核中称为**调度器(scheduler)<strong>的代码处理的。当内核选择一个新的进程运行时，我们就说内核调度了这个进程。在内核调度了一个新的进程运行后，它就抢占当前进程，并使用一种称为上下文切换的机制来将控制转移到新的进程，内核调度新进程是通过</strong>上下文切换（Context Switch）**机制来实现的，该机制：</p><ul><li>保存当前进程的上下文；</li><li>恢复之前被抢占进程的上下文；</li><li>将控制权转移给新进程。</li></ul><p>​程序执行系统调用时可能会发生上下文切换。比如系统调用<code>read</code>需要访问磁盘中的数据，内核可以通过上下文切换来调度另一个进程，这样就无需等待数据从磁盘加载到内存中。</p><p>​中断也可能引发上下文切换。比如，所有的系统都有某种产生周期性定时器中断的机制，典型的为每1毫秒或每10毫秒。每次发生定时器中断时，内核就能判定当前进程已经运行了足够长的时间了，并切换到一个新的进程。</p><p><img src="36335ce328791991ef540186329e22cb.png" alt=""></p><p>​该图展示了一对进程A和 B之间上下文切换的示例。在这个例子中，初始地，进程A运行在用户模式中，直到它通过执行系统调用read陷入到内核。内核中的陷阱处理程序请求来自磁盘控制器的 DMA 传输，并且安排在磁盘控制器完成从磁盘到存储器的数据传输后，磁盘中断处理器。</p><p>​磁盘取数据要用一段相对较长的时间(数量级为几十毫秒)，所以内核执行从进程A到进程B的上下文切换，而不是在这个间歇时间内等待，什么都不做。注意在切换之前，内核正代表进程A在用户模式下执行指令。在切换的第一部分中，内核代表进程A在内核模式下执行指令。然后在某一时刻，它开始代表进程B(仍然是内核模式下)执行指令。在切换之后，内核代表进程 B在用户模式下执行指令。</p><p>​随后，进程B在用户模式下运行一会儿，直到磁盘发出一个中断信号，表示数据已经从磁盘传送到了存储器。内核判定进程B已经运行了足够长的时间了，就执行一个从进程B到进程A的上下文切换，将控制返回给进程A中紧随在系统调用read之后的那条指令。进程A继续运行，直到下一次异常发生，依此类推。</p><div class="note note-secondary">            <p><strong>高速缓存污染(pollution)和异常控制流</strong></p><p>​一般而言，硬件高速缓存存储器不能和诸如中断和上下文切换这样的异常控制流很好地交互。如果当前进程被一个中断暂时中断，那么对于中断处理程序来说高速缓存是冷的(cold)译者注:“高速缓存是冷的”意思是程序所需要的数据都不在高速缓存中)。如果处理程序从主存中访问了足够多的表项，那么当被中断的进程继续时，高速缓存对它来说也是冷的了。在这种情况下，我们就说中断处理程序污染(pollute)了高速缓存。使用上下文切换也会发生类似的现象。当一个进程在上下文切换后继续执行时，高速缓存对于应用程序而言也是冷的，必须再次热身。</p>          </div><h1>3.系统调用错误处理</h1><p>​当执行 Unix 系统级函数遇到错误时，它们会返回 -1 并设置全局整型变量<code>errno</code>的值。因此我们可以在程序中检查调用是否发生错误，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error: %s\n&quot;</span>, strerror(errno));<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>strerror</code>函数会根据<code>errno</code>的值返回相关的文本字符串。我们定义一个<strong>错误报告（Error-reporting）函数</strong>以简化上述代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span> <span class="hljs-comment">/* Unix-style error */</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%s: %s\n&quot;</span>, msg, strerror(errno));<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    unix_error(<span class="hljs-string">&quot;fork error&quot;</span>);<br></code></pre></td></tr></table></figure><p>我们还可以进一步地将代码简化为一个**错误处理（Error-handling）**函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">pid_t</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>        unix_error(<span class="hljs-string">&quot;Fork error&quot;</span>);<br>    <span class="hljs-keyword">return</span> pid;<br>&#125;<br><br>pid = Fork();<br></code></pre></td></tr></table></figure><p>​这样我们便能够使用包装函数<code>Fork</code>代替<code>fork</code>及其错误检查代码。本书使用的包装函数均定义在 <a href="http://csapp.cs.cmu.edu/2e/ics2/code/include/csapp.h"><code>csapp.h</code></a> 和 <a href="http://csapp.cs.cmu.edu/2e/ics2/code/src/csapp.c"><code>csapp.c</code></a> 中。</p><h1>4.进程控制</h1><h2 id="4-1-获取进程ID">4.1 获取进程ID</h2><p>​每个进程都有一个唯一且大于 0 的进程 ID（PID）。函数<code>getpid</code>返回调用进程的 PID，而函数<code>getppid</code>则返回创建调用进程的进程（即父进程） 的 PID。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getppid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p>二者返回值的类型均为<code>pid_t</code>，它在 Linux 系统的<code>sys/types.h</code>文件中被定义为<code>int</code>。</p><h2 id="4-2-创建和终止进程">4.2 创建和终止进程</h2><p>在程序员看来，进程有三种状态：</p><ul><li>运行（Running）：该进程要么在 CPU 中执行，要么在等待内核调度；</li><li>停止（Stopped）：进程的执行被挂起(suspend)，且不会被调度。当收到SIGSTOP、SIGTSTPSIDTTIN 或者 SIGTTOU信号时，进程就停止，并且保持停止直到它收到一个SIGCONT信号，在这个时刻，进程再次开始运行。(信号是一种软件中断的形式，将在5节中详细描述。)</li><li>终止（Terminated）：进程永远地停止了。进程会因为三种原因终止:1)收到一个信号，该信号的默认行为是终止进程，2)从主程序返回，3)调用exit函数。</li></ul><p>函数<code>exit</code>会以参数<code>status</code>作为退出状态终止进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span>;<br></code></pre></td></tr></table></figure><p>父进程可以调用<code>fork</code>函数来创建一个新的子进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p>​子进程将获得一个与父进程相同但独立的用户级虚拟内存空间副本，包括代码、数据、堆、共享库和用户栈等。它还会得到与父进程相同的打开文件描述符副本，因此能够读写任意父进程打开的文件。父进程和子进程之间最显著的区别便是 <strong>PID</strong> 不同。</p><p>​函数<code>fork</code><strong>执行一次却返回两次</strong>：在父进程中返回子进程的 PID，在子进程中返回 0。由于子进程的 PID 始终大于 0 ，我们可以通过返回值判断程序在哪个进程中执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">include <span class="hljs-string">&quot;csapp.h&quot;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><br>    pid = Fork();<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123; <span class="hljs-comment">/* Child */</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child : x=%d\n&quot;</span>, ++x);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* Parent */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent: x=%d\n&quot;</span>, --x);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>该程序编译后运行的可能结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">./fork</span><br>parent: x=0<br>child : x=2<br></code></pre></td></tr></table></figure><p>从结果我们可以看出：</p><ul><li>调用一次，返回两次。fork函数被父进程调用一次，但是却返回两次。一次是返回到父进程，一次是返回到新创建的子进程。对于只创建一个子进程的程序来说，这还是相当简单直接的。但是具有多个 fork实例的程序可能就会令人迷惑，需要仔细地推敲了。</li><li>并发执行。父进程和子进程是并发运行的独立进程。内核能够以任意方式交替执行它们的逻辑控制流中的指令。当我们在系统上运行这个程序时，父进程先完成它的printf语句，然后是子进程。然而，在另一个系统上可能正好相反。一般而言，作为程序员，我们决不能对不同进程中指令的交替执行做任何假设。</li><li>相同的但是独立的地址空间。如果能够在fork函数在父进程和子进程中返回后立即暂停这两个进程，我们会看到每个进程的地址空间都是相同的。每个进程有相同的用户栈、相同的本地变量值、相同的堆、相同的全局变量值，以及相同的代码。因此，在我们的示例程序中，当fork函数在第8行返回时，本地变量x在父进程和子进程中都为1。然而，因为父进程和子进程是独立的进程，它们都有自己的私有地址空间。父进程和子进程对x<br>所做的任何改变都是独立的，不会反映在另一个进程的存储器中。这就是为什么当父进程和子进程调用它们各自的 printf语句时，它们中的变量x会有不同的值的原因。</li><li>共享文件当运行这个示例程序时，我们注意到父进程和子进程都把它们的输出显示在屏<br>幕上。原因是子进程继承了父进程所有的打开文件。当父进程调用fork时，stdout文<br>件是被打开的，并指向屏幕。子进程继承了这个文件，因此它的输出也是指向屏幕的。</li></ul><p>绘制进程图（Process Graph）对理解<code>fork</code>函数很有帮助，如：</p><p><img src="cbc3c80a45df3ecad9fdece41e741bdf.png" alt=""></p><h2 id="4-3-回收子进程">4.3 回收子进程</h2><p>进程终止后，内核不会立即将其移除。它需要被其父进程回收（Reap），否则将成为僵尸（Zombie）进程。当父进程回收其终止的子进程时，内核将子进程的退出状态传递给父进程，然后再丢弃它。</p><p>如果父进程终止，内核会安排<code>init</code>进程（PID 为 1）“收养”孤儿进程；如果父进程在终止前没有回收僵尸子进程，那么则由<code>init</code>进程回收它们。</p><p>进程通过调用函数<code>waitpid</code>等待其子进程终止或停止：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> *statusp, <span class="hljs-type">int</span> options)</span>;<br><span class="hljs-comment">// Returns: PID of child if OK, 0 (if WNOHANG), or −1 on error</span><br></code></pre></td></tr></table></figure><p>默认情况下（参数<code>options</code>为 0 时），函数<code>waitpid</code>会暂停调用进程，直至其等待集（Wait Set）中的某个子进程终止。该函数始终返回第一个终止的子进程 PID。此时，终止的子进程已被回收，内核从系统中删除了它的所有痕迹。</p><ol><li><p><strong>判定等待集合的成员</strong></p><p>等待集合的成员是由参数pid 来确定的:</p><ul><li>如果 pid&gt;0，那么等待集合就是一个单独的子进程，它的进程 等于 pid。</li><li>如果 pid=-1，那么等待集合就是由父进程所有的子进程组成的。</li></ul><p>waitpid 函数还支持其他类型的等待集合，包括 Unix 进程组，对此我们将不做讨论。</p></li><li><p><strong>修改默认行为</strong></p><p>我们可以通过修改参数<code>options</code>的值来改变函数<code>waitpid</code>的行为：</p><ul><li><code>WNOHANG</code>：如果等待集中的子进程还未终止，则立即返回 0；</li><li><code>WUNTRACED</code>：暂停调用进程执行，直到等待集中的进程终止或停止（默认情况下仅返回终止的子进程 PID）；</li><li><code>WCONTINUED</code>：暂停调用进程执行，直到等待集中的进程终止或等待集中停止的进程收到 SIGCONT 信号恢复。</li></ul></li><li><p><strong>检查已回收子进程退出状态</strong></p><p>若参数<code>statusp</code>不为<code>NULL</code>，那么<code>waitpid</code>还会将返回的子进程状态信息编码到<code>status</code>中（<code>*statusp = status</code>）。<code>wait.h</code>文件定义了几个用于解释参数<code>status</code>的宏：</p><ul><li><code>WIFEXITED(status)</code>：如果子进程正常终止（比如调用<code>exit</code>或返回），则返回<code>True</code>；</li><li><code>WEXITSTATUS(status)</code>：如果<code>WIFEXITED()</code>返回<code>True</code>，则返回终止子进程的退出状态；</li><li><code>WIFSIGNALED(status)</code>：如果子进程由于未捕获的信号而终止，则返回<code>True</code>；</li><li><code>WTERMSIG(status)</code>：如果<code>WIFSIGNALED()</code>返回<code>True</code>，则返回导致子进程终止的信号编号；</li><li><code>WIFSTOPPED(status)</code>：如果返回的子进程当前已停止，则返回<code>True</code>；</li><li><code>WSTOPSIG(status)</code>：如果<code>WIFSTOPPED()</code>返回<code>True</code>，则返回导致子进程停止的信号编号；</li><li><code>WIFCONTINUED(status)</code>：如果子进程收到 SIGCONT 信号后恢复，则返回<code>True</code>。</li></ul></li><li><p><strong>错误条件</strong></p><p>如果调用进程没有子进程，那么waitpid返回-1，并且设置errno为ECHILD。如果waitpid 函数被一个信号中断，那么它返回-1，并设置errno为EINTR。</p></li></ol><p>函数<code>wait</code>是<code>waitpid</code>的简化版本，<code>wait(&amp;status)</code>等效于<code>waitpid(-1, &amp;status, 0)</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 2</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> status, i;<br>    <span class="hljs-type">pid_t</span> pid;<br><br>    <span class="hljs-comment">/* Parent creates N children */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        <span class="hljs-keyword">if</span> ((pid = Fork()) == <span class="hljs-number">0</span>) <span class="hljs-comment">/* child */</span><br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">100</span> + i);<br><br>    <span class="hljs-comment">/* Parent reaps N children in no particular order */</span><br>    <span class="hljs-keyword">while</span> ((pid = waitpid(<span class="hljs-number">-1</span>, &amp;status, <span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (WIFEXITED(status))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d terminated normally with exit status=%d\n&quot;</span>, pid, WEXITSTATUS(status));<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d terminated abnormally\n&quot;</span>, pid);<br>    &#125;<br><br>    <span class="hljs-comment">/* The only normal termination is if there are no more children */</span><br>    <span class="hljs-keyword">if</span> (errno != ECHILD)<br>        unix_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如示例程序所示，父进程首先调用<code>Fork</code>创建了两个退出状态唯一的子进程（<code>exit(100+i)</code>）。 随后在 While 循环的测试条件中通过<code>waitpid</code>等待其所有的子进程终止，并打印子进程的退出状态。最终所有的子进程均被回收，<code>waitpid</code>返回 -1 且将全局变量<code>errno</code>设为<code>ECHILD</code>，函数执行完毕。</p><p>在 Linux 系统上运行该程序时，它会产生以下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">./waitpid1</span><br>child 22966 terminated normally with exit status=100 <br>child 22967 terminated normally with exit status=101<br></code></pre></td></tr></table></figure><p>值得注意的是，父进程回收子进程的顺序是随机的。我们可以对上述程序进行一定 <a href="http://csapp.cs.cmu.edu/2e/ics2/code/ecf/waitpid2.c">修改</a>，从而使其按子进程的 PID 顺序输出。</p><h2 id="4-4-休眠">4.4 休眠</h2><p>​</p><p>函数<code>sleep</code>可以让进程暂停执行一段时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secs)</span>;<br><span class="hljs-comment">// Returns: seconds left to sleep</span><br></code></pre></td></tr></table></figure><p>如果请求的暂停时间已经过去，则函数返回 0；如果该进程被信号中断，则返回剩余的暂停时间。</p><p>函数<code>pause</code>会使调用进程进入休眠状态，直至收到信号。该函数始终返回 -1:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pause</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="4-5-加载并运行程序">4.5 加载并运行程序</h2><p>函数<code>execve</code>在当前进程的上下文中加载并运行一个新程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *argv[], <span class="hljs-type">const</span> <span class="hljs-type">char</span> *envp[])</span>;<br></code></pre></td></tr></table></figure><p>参数<code>filename</code>是加载并运行的可执行文件名称，<code>argv</code>和<code>envp</code>则分别是参数和环境变量列表。函数<code>execve</code>通常没有返回值，仅在出现错误时返回 -1。</p><p>变量<code>argv</code>指向一个以<code>NULL</code>为结尾的指针数组，其中的每个元素都指向一个参数字符串。一般来说，<code>argv[0]</code>是可执行目标文件名称；变量<code>envp</code>也指向一个以<code>NULL</code>结尾的指针数组，其中的每个元素均指向一个环境变量字符串，每个字符串都是一个<code>name=value</code>形式的键值对。两者的数据结构如下：</p><p><img src="ae914cfeb058062b268d69da354c80f3.png" alt=""></p><p><code>execve</code>加载文件名后，会调用启动代码。 启动代码设置栈并将控制权传递给新程序的<code>main</code>函数，其原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[], <span class="hljs-type">char</span> *envp[])</span>;<br></code></pre></td></tr></table></figure><p><code>main</code>函数执行时的用户栈结构如下图所示，从栈底到栈顶分别是：环境变量字符串、参数字符串、指向环境变量字符串的指针数组和指向参数字符串的指针数组。该函数的三个参数分别保存在不同的寄存器中：参数<code>argc</code>给出数组<code>argv[]</code>中的非空指针数量；参数<code>argv</code>指向数组<code>argv[]</code>中第一个元素；参数<code>envp</code>则指向数组<code>envp[]</code>中的第一个元素：</p><p><img src="97c29ce1fd15a29770b5c8bef051ec30.png" alt=""></p><p>Linux 提供了几个用于操作环境变量数组的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">getenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">setenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newvalue, <span class="hljs-type">int</span> overwrite)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">unsetenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br></code></pre></td></tr></table></figure><p>如果数组中包含以参数<code>name</code>为键的字符串，则函数<code>getenv</code>返回其对应的值，函数<code>unsetenv</code>删除该字符串，函数<code>setenv</code>将值替换为参数<code>newvalue</code>（<code>overwrite</code>非零时）；如果不存在以<code>name</code>为键的字符串，则函数<code>setenv</code>会将<code>name=newvalue</code>添加到数组中。</p><div class="note note-secondary">            <p>​<strong>程序与进程</strong></p><p>​这是一个适当的地方，停下来，确认一下你理解了程序和进程之间的区别。程序是一堆代码和数据;程序可以作为目标模块存在于磁盘上，或者作为段存在于地址空间中。进程是执行中程序的一个具体的实例;程序总是运行在某个进程的上下文中。如果你想要理解 fork和execve函数，理解这个差异是很重要的。fork函数在新的子进程中运行相同的程序，新的子进程是父进程的一个复制品。execve 函数在当前进程的上下文中加载并运行一个新的程序。它会覆盖当前进程的地址空间，但并没有创建一个新进程。新的程序仍然有相同的PID，并且继承了调用<br>execve 函数时已打开的所有文件描述符。</p>          </div><h2 id="4-6-使用fork和execve运行程序">4.6 使用fork和execve运行程序</h2><p>​Unix shell 和 Web 服务器等程序大量使用了<code>fork</code>和<code>execve</code>函数。外壳是一个交互型的应用级程序，它代表用户运行其他程序。最早的外壳是sh程序，后面出现了些变种，比如 csh、tcsh、ksh和bash。外壳执行一系列的读/求值(read/evaluate)步骤然后终止。读步骤读取来自用户的一个命令行。求值步骤解析命令行，并代表用户运行程序。本书提供了一个简单的 <a href="http://csapp.cs.cmu.edu/2e/ics2/code/ecf/shellex.c">shell 程序</a>，其缺陷在于没有回收任何后台运行的子进程。我们需要使用下一节介绍的信号来解决这一问题。</p><h1>5.信号</h1><p>​信号（Signal）是一种高级的异常控制流，它允许进程和内核将某些类型的系统事件通知给其他进程。</p><p>​一个信号就是一条小消息，它通知进程系统中发生了一个某种类型的事件。Linux 系统上支持的 30种不同类型的信号。在外壳命令行上输入“man 7 signal”就能得到这个列表。</p><p><img src="7a833933ce9bfcbdef02aa0e1776a7b5.png" alt=""></p><p>​低级别的硬件异常由内核中的异常处理程序处理，通常不会对用户进程可见，而信号则可以将此类异常暴露给用户进程。如果一个进程试图除以 0，内核就会向它发送一个 SIGFPE（编号 8）信号。</p><h2 id="5-1-信号术语">5.1 信号术语</h2><p>发送信号到目标进程需要完成两个步骤：</p><ul><li>发送（传递）信号：内核通过更新目标进程上下文中的某些状态来向目标进程发送信号。发送信号的原因有两种：① 内核检测到系统事件的发生，如被 0 除错误或子进程终止等；② 进程调用了<code>kill</code>函数（将在下一节介绍）。进程可以向自己发送信号；</li><li>接收信号：当内核强制目标进程以某种方式对信号做出响应时，它便接收到了信号。该进程可以通过执行用户级别的信号处理程序（Signal Handler）来忽略、终止或捕获信号。</li></ul><p><img src="df7c97d463c49fa506c323610ab7b4c2.png" alt=""></p><p>​已发送但还未接收的信号被称为<strong>待处理信号（Pending Signal）</strong>。在任意时间点，相同类型的待处理信号最多只能有一个。这意味着如果一个进程已经有一个类型为 k 的待处理信号，那么后续所有发送给该进程的 k 类型信号都将被丢弃。进程还可以选择性地**阻塞（Block）**某些信号的接收。</p><h2 id="5-2-发送信号">5.2 发送信号</h2><p>​Linux系统提供了大量向进程发送信号的机制。所有这些机制都是基于**进程组(process group)**这个概念的。</p><h3 id="1-进程组">1. <strong>进程组</strong></h3><p>​每个进程都属于一个进程组（Process Group），它由一个正整数的进程组 ID 所标识。<code>getpgrp</code>函数返回当前进程的进程组 ID：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgrp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p>默认情况下，子进程与其父进程属于同一个进程组。进程可以通过<code>setpgid</code>函数改变自己或另一个进程的进程组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setpgid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">pid_t</span> pgid)</span>;<br></code></pre></td></tr></table></figure><p>该函数会把进程<code>pid</code>的进程组更改为<code>pgid</code>。若将参数<code>pid</code>或<code>pgid</code>设为 0，则相当于使用调用进程的 PID 作为参数。举例来说，如果进程 15213 调用函数<code>setpgid(0, 0)</code>，那么将会创建一个进程组 ID 为 15213 的新进程组，并使该进程加入此组。</p><h3 id="2-用-bin-kill-程序发送信号">2. <strong>用 /bin/kill 程序发送信号</strong></h3><p>​/bin/kill 程序可以可以向另外的进程发送任意的信号。比如，命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt;</span><span class="language-bash">/bin/kill -9 15213</span><br></code></pre></td></tr></table></figure><p>发送信号9(SIGKILL)给进程15213。一个为负的PID会导致信号被发送到进程组PID中的每个进程。比如，命令:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">unix</span>&gt;/bin/kill -<span class="hljs-number">9</span> -<span class="hljs-number">15213</span><br></code></pre></td></tr></table></figure><p>发送一个SIGKIL信号给进程组15213中的每个进程。注意，在此我们使用完整路径/bin/kill，因为有些 Linux 外壳有自己内置的 kill 命令。</p><h3 id="3-用键盘发送信号">3. <strong>用键盘发送信号</strong></h3><p>​Unix Shell 使用**任务（Job）**表示单个命令行（如<code>ls | sort</code>）创建的进程，同一时间内只能有一个前台任务和多个后台任务。</p><p><img src="30afcac9e0147e4dcf6227e8fa9f4c73.png" alt=""></p><p>在键盘上输入 Ctrl+C 会使内核向前台进程组中的所有进程发送 SIGINT 信号，这将终止前台任务。同样，输入 Ctrl+Z 会使内核向前台进程组中的所有进程发送 SIGTSTP 信号，这将停止（挂起）前台任务。</p><h3 id="4-用kill函数发送信号">4. 用kill函数发送信号</h3><p>​进程可以调用<code>kill</code>函数向其他进程（包括其自身）发送信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">kill</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> sig)</span>;<br><span class="hljs-comment">// Returns: 0 if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>若参数<code>pid</code>大于 0，则该函数将编号为<code>sig</code>的信号发送给进程<code>pid</code>；若参数<code>pid</code>等于 0，则该函数将信号发送给调用进程所在进程组中的所有进程；如果参数<code>pid</code>小于 0，则该函数将信号发送给进程组 ID 为<code>|pid|</code>的进程组中的所有进程。</p><h3 id="5-使用-alarm-函数发送信号">5. 使用 alarm 函数发送信号</h3><p>​进程可以调用<code>alarm</code>函数向自己发送 SIGALRM 信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alarm</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secs)</span>;<br><span class="hljs-comment">// Returns: remaining seconds of previous alarm, or 0 if no previous alarm</span><br></code></pre></td></tr></table></figure><p>内核将在<code>secs</code>秒后向调用进程发送 SIGALRM 信号，取消所有之前设置的<code>alarm</code>，并返回其剩余的秒数。</p><h2 id="5-3-接收信号">5.3 接收信号</h2><p>当内核将进程 p 从内核态切换到用户态时，它会检查 p <strong>未阻塞且未处理（Pending &amp; ~Blocked）<strong>的信号集。通常该集合为空，内核将控制权转移给 p 的逻辑控制流中的下一条指令。但如果该集合非空，内核就会选择信号集中的某个信号 k 并强制 p 接收它。信号将触发进程完成一些</strong>动作（Action）</strong>，预定义的默认动作有：</p><ul><li>进程终止；</li><li>进程终止并转储核心（Dump Core，即将代码和数据内存段的镜像写入磁盘）；</li><li>进程停止（暂停），直到接收 SIGCONT 信号重新启动；</li><li>进程忽略该信号。</li></ul><p>每种信号的默认动作见 <a href="#5.%E4%BF%A1%E5%8F%B7">图 8.25</a>。除 SIGSTOP 和 SIGKILL 信号外，进程还可以通过函数<code>signal</code>修改信号的默认动作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*<span class="hljs-type">sighandler_t</span>)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">sighandler_t</span> <span class="hljs-title function_">signal</span><span class="hljs-params">(<span class="hljs-type">int</span> signum, <span class="hljs-type">sighandler_t</span> handler)</span>;<br><span class="hljs-comment">// Returns: pointer to previous handler if OK, SIG_ERR on error (does not set errno)</span><br></code></pre></td></tr></table></figure><ul><li>若参数<code>handler</code>为<code>SIG_IGN</code>，则<code>signum</code>类型的信号将会被忽略；</li><li>若参数<code>handler</code>为<code>SIG_DFL</code>，则<code>signum</code>类型的信号的动作将恢复为默认；</li><li>若参数<code>handler</code>为<strong>用户定义的信号处理程序地址</strong>，则进程接收到<code>signum</code>类型的信号后会调用该程序，这种方法被称为安装处理程序（Installing Handler）。在这种情况下，调用处理程序被称为捕获信号（Catching Signal），执行处理程序被称为<strong>处理信号（Handling Signal）</strong>。</li></ul><p>如果我们在示例程序运行时按下 Ctrl+C，该进程就不会直接终止而是输出一段信息后才终止：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> <span class="hljs-comment">/* SIGINT handler */</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Caught SIGINT\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">/* Install the SIGINT handler */</span><br>    <span class="hljs-keyword">if</span> (signal(SIGINT, handler) == SIG_ERR)<br>        unix_error(<span class="hljs-string">&quot;signal error&quot;</span>);<br><br>    Pause(); <span class="hljs-comment">/* Wait for the receipt of a signal */</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>信号处理程序还可以被其他处理程序中断（信号 <em>s≠t</em>）：</p><p><img src="20220223154049.png" alt=""></p><h2 id="5-4-阻塞信号">5.4 阻塞信号</h2><p>Linux 为阻塞信号提供了显式和隐式的实现机制：</p><ul><li>隐式：默认情况下，内核会阻塞任何与处理程序当前正在处理的信号类型相同的未处理信号。比如上图 8.31 中，若信号 <em>t</em> 的类型与 <em>s</em> 相同，则 <em>t</em> 将在处理程序 <em>S</em> 返回前持续挂起；</li><li>显式：应用程序可以调用<code>sigprocmask</code>等函数阻塞信号或解除信号的阻塞。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigprocmask</span><span class="hljs-params">(<span class="hljs-type">int</span> how, <span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-type">sigset_t</span> *oldset)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigemptyset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigfillset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigaddset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigdelset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-comment">// Returns: 0 if OK, −1 on error</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigismember</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-comment">// Returns: 1 if member, 0 if not, −1 on error</span><br></code></pre></td></tr></table></figure><p><code>sigprocmask</code>函数可以改变当前阻塞信号的集合（设为<code>blocked</code>），具体行为取决于参数<code>how</code>的值：</p><ul><li><code>SIG_BLOCK</code>：将参数<code>set</code>中的信号阻塞（<code>blocked = blocked | set</code>）；</li><li><code>SIG_UNBLOCK</code>：为<code>set</code>中的信号解除阻塞（<code>blocked = blocked &amp; ~set</code>）；</li><li><code>SIG_SETMASK</code>：将阻塞信号集合设为<code>set</code>（<code>blocked = set</code>）。</li></ul><p>如果参数<code>oldset</code>非空，则先前<code>blocked</code>的值会存储在<code>oldset</code>中。</p><p>除此之外，函数<code>sigemptyset</code>将<code>set</code>初始化为空集；<code>sigfillset</code>将所有信号加入到<code>set</code>中；<code>sigaddset</code>将编号为<code>signum</code>的信号加入到<code>set</code>中；<code>sigdelset</code>将编号为<code>signum</code>的信号从<code>set</code>中删除；如果<code>signum</code>信号在<code>set</code>中，则函数<code>sigismember</code>返回 1，否则返回 0。</p><p>示例程序暂时阻塞了 SIGINT 信号的接收：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">sigset_t</span> mask, prev_mask;<br>sigemptyset(&amp;mask);<br>sigaddset(&amp;mask, SIGINT);<br><span class="hljs-comment">/* Block SIGINT and save previous blocked set */</span><br>sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev_mask);<br><br><span class="hljs-comment">// Code region that will not be interrupted by SIGINT</span><br><br><span class="hljs-comment">/* Restore previous blocked set, unblocking SIGINT */</span><br>sigprocmask(SIG_SETMASK, &amp;prev_mask, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><h2 id="5-5-编写信号处理程序">5.5 编写信号处理程序</h2><p>​</p><h3 id="1-安全的信号处理">1. 安全的信号处理</h3><p>​如果处理程序和主程序并发地访问同一个全局数据结构，就会发生不可预知的严重问题。因此我们在编写信号处理程序时应当遵循以下守则：</p><ul><li>使信号处理程序尽可能的简单；</li><li>仅调用异步信号安全（Async-Signal-Safe）的函数。这种函数一般只访问局部变量，或者不会被其他信号处理程序中断。值得注意的是，许多常用的函数，如<code>printf</code>、<code>sprintf</code>、<code>malloc</code>和<code>exit</code>等并非异步信号安全。调用<code>write</code>函数是信号处理程序生成输出的唯一安全方法；</li><li>保存并恢复变量<code>errno</code>：许多 Linux 异步信号安全函数返回错误时会设置变量<code>errno</code>的值，因此可能会干扰程序中其他依赖<code>errno</code>的部分。当处理程序有返回时，我们应当在调用前将<code>errno</code>保存到局部变量中，并在返回前恢复其值；</li><li>访问全局数据结构时阻塞所有信号；</li><li>假设主程序和信号处理程序共享全局变量<code>g</code>，处理程序更新<code>g</code>的值，主程序定期读取<code>g</code>的值。优化的编译器会从寄存器中读取已缓存的<code>g</code>，因此主函数中的<code>g</code>可能永远不变，并且每次对<code>g</code>的引用也都是安全的。若使用<code>volatile</code>声明全局变量，如<code>volatile int g;</code>，那么当代码引用<code>g</code>时，编译器就会从内存中读取其值。在这种情况下，我们应当临时阻塞信号以保护对<code>g</code>的访问；</li><li>在常见的设计中，处理程序通过写入全局标识（Flag）来记录信号的接收。若使用<code>sig_atomic_t</code>类型声明标识，如<code>volatile sig_atomic_t flag;</code>，那么便可以保证<code>flag</code>写入的原子性（Atomic/Uninterruptible）。</li></ul><h3 id="2-正确的信号处理">2. 正确的信号处理</h3><p>​上文提到，父进程必须回收子进程以避免在系统中留下僵尸进程，但我们也希望父进程可以在子进程运行时自由地执行其他任务。因此我们使用 SIGCHILD 处理程序来回收子进程，而不是显式地调用<code>waitpid</code>等待子进程终止：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler1</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br><br>    <span class="hljs-keyword">if</span> ((pid = waitpid(<span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>        unix_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Handler reaped child %d\n&quot;</span>, (<span class="hljs-type">int</span>)pid);<br>    Sleep(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i, n;<br>    <span class="hljs-type">char</span> buf[MAXBUF];<br><br>    <span class="hljs-keyword">if</span> (signal(SIGCHLD, handler1) == SIG_ERR)<br>        unix_error(<span class="hljs-string">&quot;signal error&quot;</span>);<br><br>    <span class="hljs-comment">/* Parent creates children */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (Fork() == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-string">&quot;Hello from child %d\n&quot;</span>, (<span class="hljs-type">int</span>)getpid());<br>            Sleep(<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* Parent waits for terminal input and then processes it */</span><br>    <span class="hljs-keyword">if</span> ((n = read(STDIN_FILENO, buf, <span class="hljs-keyword">sizeof</span>(buf))) &lt; <span class="hljs-number">0</span>)<br>        unix_error(<span class="hljs-string">&quot;read&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent processing input\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        ;<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例程序中，父进程安装了处理程序<code>handler1</code>并创建三个子进程。它等待来自终端的输入，然后进入 While 循环。每当一个子进程终止时，内核将发送一个 SIGCHLD 信号通知父进程。父进程捕获信号后回收子进程，输出一段信息然后返回。</p><p>​在 Linux 上运行该程序得到的输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">linux&gt; ./signal1<br>Hello from child <span class="hljs-number">14073</span> <br>Hello from child <span class="hljs-number">14074</span> <br>Hello from child <span class="hljs-number">14075</span> <br>Handler reaped child <br>Handler reaped child<br>CR<br>Parent processing input<br></code></pre></td></tr></table></figure><p>​父进程创建了三个子进程，然而却只回收了两个，这是因为同一时间内相同类型的未处理信号最多只能有一个。信号处理程序在处理第一个信号时，第二个信号到达并被添加到未处理信号集中。由于已有一个未处理的 SIGCHLD 信号，此时若第三个信号到达便会被直接丢弃。当处理程序返回后，内核发现第二个信号还未处理，于是强制父进程接收该信号并重新执行处理程序。等到处理程序再次返回，父进程就不再有任何未处理的 SIGCHLD 信号了。</p><p>我们可以让处理程序在被调用时尽可能多地回收子进程以解决这一问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">handler2</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br><br>    <span class="hljs-keyword">while</span> ((pid = waitpid(<span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, WNOHANG)) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Handler reaped child %d\n&quot;</span>, (<span class="hljs-type">int</span>)pid);<br>    <span class="hljs-keyword">if</span> (errno != ECHILD)<br>        unix_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>    Sleep(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-可移植的信号处理">3. 可移植的信号处理</h3><p>​不同的系统有着不同的信号处理语义，因此 Posix 标准定义了<code>sigaction</code>函数，它允许用户在安装信号处理程序时明确地指定他们想要的语义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigaction</span><span class="hljs-params">(<span class="hljs-type">int</span> signum,  <span class="hljs-keyword">struct</span> sigaction *act,</span><br><span class="hljs-params">              <span class="hljs-keyword">struct</span> sigaction *oldact)</span>;<br><span class="hljs-comment">// Returns: 0 if OK, −1 on error</span><br></code></pre></td></tr></table></figure><p>然而<code>sigaction</code>函数十分笨重，因此我们常使用它的包装函数<code>Signal</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">handler_t</span> *<span class="hljs-title function_">Signal</span><span class="hljs-params">(<span class="hljs-type">int</span> signum, <span class="hljs-type">handler_t</span> *handler)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">action</span>, <span class="hljs-title">old_action</span>;</span><br>    action.sa_handler = handler;<br>    sigemptyset(&amp;action.sa_mask); <span class="hljs-comment">/* Block sigs of type being handled */</span><br>    action.sa_flags = SA_RESTART; <span class="hljs-comment">/* Restart syscalls if possible */</span><br><br>    <span class="hljs-keyword">if</span> (sigaction(signum, &amp;action, &amp;old_action) &lt; <span class="hljs-number">0</span>)<br>        unix_error(<span class="hljs-string">&quot;Signal error&quot;</span>);<br>    <span class="hljs-keyword">return</span> (old_action.sa_handler);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-6-避免并发错误">5.6 避免并发错误</h2><p>​上文提到，我们永远无法预测两个同步（并发）运行的函数的调用顺序。如果调用顺序会影响结果的正确性，那么这种错误就被称为竞争（Race）。我们可以通过阻塞相关信号来避免这一问题。</p><h2 id="5-7-显式等待信号">5.7 显式等待信号</h2><p>​有时候主程序需要显式等待某个信号处理程序运行完毕。例如 Linux Shell 创建前台任务后，必须等待任务终止并被 SIGCHLD 处理程序回收，然后才能接收下一条用户命令。示例程序展示了其基本思想：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> pid;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    pid = waitpid(<span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    errno = olderrno;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask, prev;<br>    Signal(SIGCHLD, sigchld_handler);<br>    Signal(SIGINT, sigint_handler);<br>    Sigemptyset(&amp;mask);<br>    Sigaddset(&amp;mask, SIGCHLD);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev); <span class="hljs-comment">/* Block SIGCHLD */</span><br>        <span class="hljs-keyword">if</span> (Fork() == <span class="hljs-number">0</span>)                      <span class="hljs-comment">/* Child */</span><br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">/* Parent */</span><br>        pid = <span class="hljs-number">0</span>;<br>        Sigprocmask(SIG_SETMASK, &amp;prev, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">/* Unblock SIGCHLD */</span><br>        <span class="hljs-comment">/* Wait for SIGCHLD to be received (wasteful) */</span><br>        <span class="hljs-keyword">while</span> (!pid)<br>            ;<br>        <span class="hljs-comment">/* Do some work after receiving SIGCHLD */</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​父进程先为信号 SIGCHLD 和 SIGINT 安装处理程序，然后创建子进程并将全局变量<code>pid</code>设为 0，最后进入自旋循环（<code>while (!pid)</code>）。子进程终止后，<code>pid</code>变为非 0，于是父进程退出自旋循环。为了防止父进程进入自旋循环前接收到 SIGCHLD ，我们需要在创建子进程之前阻塞该信号。</p><p>这段代码是正确的，但自旋循环会浪费处理器资源。我们可以将其改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (!pid) <span class="hljs-comment">/* Race! */</span><br>    pause();<br></code></pre></td></tr></table></figure><p>问题在于：如果父进程在 While 的条件测试之后而<code>pause</code>的执行之前接收到 SIGCHLD，那么程序就会永远休眠。我们还可以将<code>pause</code>改为<code>sleep</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (!pid) <span class="hljs-comment">/* Too slow! */</span><br>    sleep(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>这样虽然避免了竞争问题，但会增加程序的运行时间。正确的解决方案是调用函数<code>sigsuspend</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigsuspend</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *mask)</span>;<br><span class="hljs-comment">// Returns: -1</span><br></code></pre></td></tr></table></figure><p>该函数使用参数<code>mask</code>替换当前的阻塞信号集合，然后暂停进程直至其接收信号。如果该信号的动作是终止进程，则进程终止且不从<code>sigsuspend</code>返回；如果该信号的动作是运行一个处理程序，则<code>sigsuspend</code>在处理程序返回后返回，并将阻塞信号集合的状态恢复。</p><p>实际上它等效于下列函数组合的原子性（Atomic，即不可中断）版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">sigprocmask(SIG_SETMASK, &amp;mask, &amp;prev);<br>pause();<br>sigprocmask(SIG_SETMASK, &amp;prev, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>因此我们可以将示例函数修改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>    Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev); <span class="hljs-comment">/* Block SIGCHLD */</span><br>    <span class="hljs-keyword">if</span> (Fork() == <span class="hljs-number">0</span>)                      <span class="hljs-comment">/* Child */</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">/* Wait for SIGCHLD to be received */</span><br>    pid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!pid)<br>        sigsuspend(&amp;prev);<br>    <span class="hljs-comment">/* Optionally unblock SIGCHLD */</span><br>    Sigprocmask(SIG_SETMASK, &amp;prev, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">/* Do some work after receiving SIGCHLD */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1>6. 非本地跳转</h1><p>​C 提供了一种用户级别的异常控制流，即<strong>非本地跳转（Nonlocal Jump）</strong>。它无需完成正常的调用/返回序列，就可以将控制权从一个函数直接转移到另一个当前正在执行的函数。非本地跳转是通过<code>setjmp</code>和<code>longjmp</code>函数实现的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setjmp</span><span class="hljs-params">(jmp_buf env)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigsetjmp</span><span class="hljs-params">(sigjmp_buf env, <span class="hljs-type">int</span> savesigs)</span>;<br><span class="hljs-comment">// Returns: 0 from setjmp, nonzero from longjmps</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">longjmp</span><span class="hljs-params">(jmp_buf env, <span class="hljs-type">int</span> retval)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">siglongjmp</span><span class="hljs-params">(sigjmp_buf env, <span class="hljs-type">int</span> retval)</span>;<br><span class="hljs-comment">// Never returns</span><br></code></pre></td></tr></table></figure><ul><li><code>setjmp</code>函数将当前调用环境（Calling Environment，包括程序计数器、栈指针和通用寄存器等），保存在参数<code>env</code>指定的缓冲区中并返回 0。</li><li><code>longjmp</code>函数会从<code>env</code>缓冲区恢复调用环境，然后触发最近调用的<code>setjmp</code>函数的返回。这种情况下，<code>setjmp</code>会返回一个非零值<code>retval</code>。</li><li>在信号处理程序中，我们使用<code>sigsetjmp</code>和<code>siglongjmp</code>代替它们。</li></ul><p>非局部跳转的一个重要应用是可以在检测到某些错误条件时，从深度嵌套的函数调用中立即返回。我们使用非本地跳转直接返回到常见的错误处理程序，无需费力地<strong>展开栈（Unwind Stack）</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br>jmp_buf buf;<br><br><span class="hljs-type">int</span> error1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> error2 = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>, <span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (setjmp(buf))<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        foo();<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detected an error1 condition in foo\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detected an error2 condition in foo\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unknown error condition in foo\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/* Deeply nested function foo */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (error1)<br>        longjmp(buf, <span class="hljs-number">1</span>);<br>    bar();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (error2)<br>        longjmp(buf, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例程序中主函数首先调用<code>setjmp</code>保存当前调用环境，然后依次调用函数<code>foo</code>和<code>bar</code>。 一旦函数执行发生错误，它们会立即通过<code>longjmp</code>从<code>setjmp</code>返回。<code>setjmp</code>的非零返回值表示错误的类型，因此我们可以在代码中的某处对其进行处理。</p><p>非局部跳转的另一个重要应用是从信号处理程序跳转到特定代码位置，而不是像往常那样返回到因信号中断的指令。</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_7_链接</title>
    <link href="/2024/08/28/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/"/>
    <url>/2024/08/28/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-7-%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>​   <strong>链接(linking)</strong> 是将各种代码和数据部分收集起来并组合成为一个单一文件的过程，这个文件可<strong>被加载</strong>到存储器并执行。链接可以执行于 <strong>编译时(compile time)</strong> ，也就是在源代码被翻译成机器代码时;也可以执行于 <strong>加载时(loadtime)</strong> ，也就是在程序被 <strong>加载器(loader)</strong> 加载到存储器并执行时;甚至执行于 <strong>运行时(run time)</strong> ，由应用程序来执行。在早期的计算机系统中，链接是手动执行的。在现代系统中，链接是由叫做 <strong>链接器(linker)</strong> 的程序自动执行的。<br>​链接器在软件开发中扮演着一个关键的角色，因为它们使得 <strong>分离编译(separate compilation)</strong> 成为可能。我们不用将一个大型的应用程序组织为一个巨大的源文件，而是可以把它分解为更小、更好管理的模块，可以独立地修改和编译这些模块。当我们改变这些模块中的一个时，只需简单地重新编译它，并重新链接应用，而不必重新编译其他文件。</p><h1>1.编译器驱动程序</h1><p>​大多数编译系统都提供了一个<strong>编译器驱动（Compiler Driver）</strong>，它可以根据用户需求调用<strong>语言预处理器（Language Preprocessor）</strong>、编译器、汇编器和链接器等。例如要在 GNU 编译系统中构建下列程序，我们可以 使用命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gcc -<span class="hljs-number">02</span> -<span class="hljs-selector-tag">g</span> -o <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> swap.c<br></code></pre></td></tr></table></figure><p><img src="c5dbec50679efcb44fdf4986480d2b7d.png" alt=""></p><p><img src="8686ddb2b4177e202d5493a7cdd4a93c.png" alt=""></p><p>​上图概括了驱动程序在将示例程序从ASCI码源文件翻译成可执行目标文件时的行为。(如果你想看看这些步骤，用-v选项来运行GCC)</p><p>驱动程序首先运行C预处理器(cpp)，它将C源程序 main.c翻译成一个 <strong>ASCII码的中间文件</strong> main.i.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cpp <span class="hljs-selector-attr">[other arguments]</span> <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> /tmp/<span class="hljs-selector-tag">main</span>.i<br></code></pre></td></tr></table></figure><p>接下来，驱动程序运行C编译器(cc1)，它将main.i翻译成一个<strong>ASCI 汇编语言文件</strong>main.s.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cc1 /tmp/<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.i</span> <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -<span class="hljs-number">02</span> <span class="hljs-selector-attr">[other arguments]</span> -o /tmp/<span class="hljs-selector-tag">main</span>.s<br></code></pre></td></tr></table></figure><p>然后，驱动程序运行汇编器(as)，它将main.s翻译成一个**可重定位目标文件(relocatable object file)**main.o .</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">as <span class="hljs-selector-attr">[other arguments]</span> -o /tmp/<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> /tmp/<span class="hljs-selector-tag">main</span>.s<br></code></pre></td></tr></table></figure><p>驱动程序经过相同的过程生成swap.0。最后，它运行链接器程序1d，将main.o和swap.o以及一些必要的系统目标文件组合起来，创建一个**可执行目标文件(executable object file)**p .</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ld -o <span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[system object files and args]</span>/tmp/<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> /tmp/swap.o<br></code></pre></td></tr></table></figure><p>要运行可执行文件户，我们在命令行上输人它的名字:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./p<br></code></pre></td></tr></table></figure><p>外壳调用操作系统中一个叫做<strong>加载器的函数，它拷贝可执行文件p中的代码和数据到存储器</strong>，然后将控制转移到这个程序的开头，</p><h1>2.静态链接</h1><p>​<strong>静态链接器(Static Linker)<strong>将</strong>可重定位目标文件</strong>和<strong>命令行参数</strong>作为输入，生成完全链接的可执行目标文件。<strong>可重定位目标文件</strong>由各种代码和数据组成，指令、初始化的全局变量和未初始化的变量分别处于不同部分。</p><p>链接器需要完成两个主要任务：</p><ul><li><strong>符号解析（Symbol Resolution）</strong>：目标文件定义并引用符号，每个符号对应一个函数、全局变量或静态变量（即使用<code>static</code>声明的任何变量）。符号解析的目的是将每个符号引用与一个符号定义相关联；</li><li><strong>重定位（Relocation）</strong>：编译器和汇编器生成的代码和数据段是从地址 0 开始的，链接器会重定位所有的符号定义并修改其对应的符号引用。</li></ul><p>注意：<strong>目标文件只是字节块的集合</strong>，其中可能包含代码、数据或指导链接器和加载器的数据结构。链接器将各个块连接在一起，确定整个块的运行时位置，并修改代码和数据块中的不同位置。编译器和汇编器在生成目标文件时已经完成了大部分工作，因而链接器对目标机器的了解甚少。</p><h1>3.目标文件</h1><p>目标文件（Object File）有三种形式：</p><ul><li><strong>可重定位目标文件</strong>：包含二进制代码和数据，可以在编译时与其他可重定位目标文件组合以创建可执行目标文件；</li><li><strong>可执行目标文件</strong>：包含二进制代码和数据形式，可直接被复制到内存中执行；</li><li><strong>共享目标文件</strong>：一种<strong>特殊类型的可重定位目标文件</strong>，可以在加载时或运行时被加载到内存中并动态链接。</li></ul><h1>4.可重定位目标文件</h1><p>​典型的 ELF（Executable and Linkable Format）可重定位目标文件格式如下图所示：</p><p><img src="494e335da73a3b07ea5e1507763be10b.png" alt=""></p><ul><li><p><strong>ELF 头（ELF Header）</strong>：开头是一个**表征系统字长（Word Size）<strong>和</strong>字节顺序（Byte Ordering）**的 16 字节序列。其余部分包括 ELF 头的大小、目标文件的类型（如可重定位、可执行或共享）、机器类型（如 x86-64）、**节头表（Section Header Table）<strong>的文件偏移量以及其中</strong>条目(entry)**的大小和数量；</p></li><li><p>节头表：描述了目标文件中每个 Section 的位置和大小；</p></li><li><p>Section：位于 ELF 头和节头表之间，包括：</p><ul><li>.text：编译后程序的机器码；</li><li>.rodata：只读数据，例如<code>printf</code>中的格式字符串，Switch 语句的跳转表等；</li><li>.data：<strong>已初始化的全局变量和静态变量</strong>。非静态局部变量在运行时位于栈中，不会出现在 .data 或 .bss 中；</li><li>.bss：<strong>未初始化的静态变量，以及初始化为 0 的全局变量和静态变量</strong>。<strong>此 Section 只是一个占位符，在目标文件中不占用实际空间</strong>，因此可以提升空间效率。这些变量在运行时被分配到内存中，初始值为零；</li><li>.symtab ：一个保存了在<strong>程序中被定义和引用的函数和全局变量信息</strong>的符号表（Symbol Table）。与编译器中的符号表不同，.symtab 中的符号表不包含任何局部变量；</li><li>.rel.text：当链接器将目标文件与其他文件组合时，.text 中的许多位置都需要被修改，而 .rel.text 中则保存了与之相关的重定位信息。通常，任何调用外部函数或引用全局变量的指令都需要被修改，而调用局部函数的指令则不变。可执行目标文件一般不需要重定位信息，因此这部分可以省略；</li><li>.rel.data：被引用或定义的任何全局变量的重定位信息。通常，所有初始值为全局变量地址或外部定义函数地址的已初始化全局变量都需要被修改；</li><li>.debug：调试符号表，仅在使用<code>-g</code>选项调用编译器驱动时出现；</li><li>.line：原始程序中行号与 .text 中机器代码指令之间的映射关系，仅在使用<code>-g</code>选项调用编译器驱动时出现；</li><li>.strtab：一个以<code>NULL</code>结尾，包含 .symtab 和 .debug 中的符号表以及 Section 名称的字符串序列。</li></ul></li></ul><h1>5.符号和符号表</h1><p>​每个目标文件都有一个符号表，其中包含了该文件所定义和引用的符号信息。符号有以下三种：</p><ul><li><strong>全局符号（Global Symbols）</strong>：由该文件定义并且可以被其他文件引用的符号；</li><li><strong>外部符号（Externals）</strong>：被该文件引用但由其他文件定义的符号；</li><li><strong>局部符号（Local Symbols）</strong>：由该文件定义且无法被其他文件引用的符号，即使用<code>static</code>声明的函数和变量。</li></ul><p>​注意：非静态局部变量在运行时位于栈中，与链接器无关。而静态局部变量则保存在 .data 或 .bss 中，编译器会在符号表中为其创建名称唯一的局部符号。例如同一文件中的两个函数都定义了静态局部变量<code>x</code>：</p><div class="note note-secondary">            <p><strong>给C语言初学者建议:利用 static 属性隐藏变量和函数名字</strong></p><p>C程序员使用 static属性在模块内部隐藏变量和函数声明，就像你在Java和C++中使用public 和 private 声明一样。C源代码文件扮演模块的角色。任何声明带有 static属性的全局变量或者函数都是模块私有的。类似地，任何声明为不带static属性的全局变量和函数都是公共的，可以被其他模块访问。尽可能用 static属性来保护你的变量和函数是很好的编程习惯。</p>          </div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">f</span>()</span><br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">g</span>()</span><br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>​那么编译器可能将<code>x.1</code>作为函数<code>f()</code>中的变量符号，将<code>x.2</code>作为函数<code>g()</code>中的变量符号发送给汇编器。<strong>汇编器使用接收到的<code>.s</code>文件中的符号构建符号表</strong>，其中每个条目的数据结构为：</p><p><img src="cd1122519cf50a75b23b03a187d9abf8.png" alt=""></p><ul><li><code>name</code>：符号名在字符串表 .strtab 中的偏移量；</li><li><code>value</code>：对于可重定位目标文件是符号在其 Section 中的偏移量，对于可执行目标文件是符号的运行时地址；</li><li><code>size</code>：符号的大小；</li><li><code>type</code>：符号的类型；</li><li><code>binding</code>：符号是局部的还是全局的；</li><li><code>section</code>：符号所在的 Section 在节头表中的索引。</li></ul><p>值得一提的是，有三个伪 Section 在节头表中没有条目：</p><ul><li>ABS：不应重定位的符号；</li><li>UNDEF：在此文件中引用但在其他文件中定义的符号；</li><li>COMMON：未初始化的全局符号</li></ul><p>上述三个 Section 仅存在于可重定位目标文件，在可执行目标文件中并不存在。我们可以使用 <a href="https://man7.org/linux/man-pages/man1/readelf.1.html">READELF</a> 工具阅读目标文件中的内容，<a href="#1.%E7%BC%96%E8%AF%91%E5%99%A8%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F">main.c</a> 生成的目标文件符号表条目如下：</p><p>![619376e7c3e3ec1d76562438dc21c413](C:\Users\Administrator\Documents\Tencent Files\3454523412\nt_qq\nt_data\Pic\2024-08\Ori\619376e7c3e3ec1d76562438dc21c413.png)</p><p>​READELF 通过整数索引 Ndx 标识每个 Section，1 表示 .text，3 表示 .data。全局符号<code>main</code>和<code>array</code>分别位于上述两个 Section 首部，因此其偏移量<code>value</code>均为 0。外部符号<code>sum</code>未在本文件中定义，位于 UNDEF。</p><p>​在这个例子中，我们看到一个关于全局符号buf定义的条目，它是一个位于.data节中偏移为零(即value)处的8字节目标。其后跟随着的是全局符号main的定义，它是个位于.text节中偏移为零处的17字节函数。最后一个条目来自对外部符号swap的引用READELF用一个整数索引来标识每个节。Ndx=1表示.text节，而Ndx=3表示.data节。</p><h1>6.符号解析</h1><p>​链接器将每个符号引用与符号表中的符号定义相关联以完成<strong>符号解析（Symbol Resolution）</strong>。当编译器遇到未在当前文件中定义的符号时，它会假设该符号已在其他文件中定义，然后生成对应的符号表条目。如果链接器无法在任何输入文件中找到该符号的定义，那么它就会终止链接。</p><p>不同文件可能定义了相同名称的全局符号。对于这种情况，链接器要么直接报错，要么选取其中之一。</p><div class="note note-secondary">            <p><strong>对 C++和 Java 中链接器符号的毁坏(mangling)</strong><br>C++和Java都允许重载方法，这些方法在源代码中有相同的名字，却有不同的参数列表。那么链接器是如何区别这些不同的重载函数之间的差异呢?C++和Java 中能使用重载函数，是因为编译器将每个唯一的方法和参数列表组合编码成一个对链接器来说唯一的名字。这种编码过程叫做<strong>毁坏(mangling)</strong>，而相反的过程叫做<strong>恢复(demangling)</strong>。</p><p>​C++ 和 Java ，使用<strong>兼容</strong>的毁坏策略。允许重载名称相同但参数列表不同的方法。编译器会将每个方法和参数列表组合为一个唯一的名称，这样链接器就可以区分它们。例如，<code>Foo::bar(int, long)</code>会被编码为<code>bar__3Fooil</code>。其中，3 代表类名 Foo 的字符数，i 和 l 则分别代表参数列表中的<code>int</code>和<code>long</code>。</p>          </div><h2 id="6-1-解析名称重复的符号">6.1 解析名称重复的符号</h2><p>​Linux 编译系统会在编译时将全局符号分为两种类型：函数和已初始化的全局变量是<strong>强符号（strong）</strong>，未初始化的全局变量是<strong>弱符号（weak）</strong>。汇编器将符号的强弱信息隐式地编码到目标文件的符号表中。</p><p>链接器解析名称重复的符号的规则为：</p><ul><li>不允许多个强符号名称重复；</li><li>若一个强符号和多个弱符号名称重复，选择强符号；</li><li>若多个弱符号名称重复，从中任选其一。</li></ul><div class="note note-secondary">            <p>注意：最新版本的 GCC（如 GCC 10）默认使用标识位<code>-fno-common</code>，因此若程序包含多个名称重复的弱符号将引发链接错误</p>          </div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* foo3.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">int</span> x = <span class="hljs-number">15213</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    f();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/* bar3.c */</span><br><span class="hljs-built_in">int</span> x;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span>()</span><br>&#123;<br>    x = <span class="hljs-number">15212</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​示例程序中，文件<code>bar3.c</code>中的函数<code>f</code>是强符号，文件<code>foo3.c</code>中的函数<code>f</code>是弱符号，因此主函数的输出<code>x</code>的值为 15212。</p><p>​上文提到，未初始化的全局变量保存在 COMMON 中，而未初始化的静态变量，以及初始化为 0 的全局变量和静态变量保存在 .bss 中。这是因为前者是弱符号，编译器无法知晓其他文件中是否定义了相同名称的变量，必须将其分配到 COMMON 中并随后由链接器处理。已初始化为 0 的全局变量是强符号，根据第二条解析规则，该变量一定是唯一的，因此编译器可以安心地把它放到 .bss 中。静态变量无法被其他文件引用，自然也无需担心名称重复的问题。</p><h2 id="6-2-与静态库相链接">6.2 与静态库相链接</h2><p>​<strong>编译系统将一些相关的目标模块打包到一个文件中，该文件被称为<em>静态库（Static Library</em>）</strong>。在构建可执行目标文件时，链接器<strong>仅复制</strong>静态库中被应用程序引用的<strong>目标模块</strong>，从而减小了磁盘和内存中可执行文件的大小。静态库为我们提供了 I/O、字符串操作和数学运算等标准函数。</p><p>​在 Linux 系统中，静态库以特定的文件格式（后缀为<code>.a</code>）存储在磁盘上。应用程序可以在命令行中指定文件名来使用静态库中定义的任何函数（实际上，C 编译器驱动总是将<code>libc.a</code>传递给链接器），如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">linux&gt; gcc main.c /usr/lib/libm.a /usr/lib/libc.a<br></code></pre></td></tr></table></figure><p>​在Unix系统中，静态库以一种称为存档(archive)的特殊文件格式存放在磁盘中。存档文件是一组连接起来的可重定位目标文件的集合，有一个头部用来描述每个成员目标文件的大小和位置。存档文件名由后缀.a标识。为了使我们对库的讨论更加形象具体，假设我们想在一个叫做 1ibvector.a的静态库中提供下图中的向量例程。</p><p><img src="7fc9b0388a3eb5f45da37c592fd4f439.png" alt=""></p><p>我们使用 AR 命令将下列程序打包为静态库文件<code>libvector.a</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">linux&gt; gcc -c addvec<span class="hljs-selector-class">.c</span> multvec<span class="hljs-selector-class">.c</span><br>linux&gt; ar rcs libvector<span class="hljs-selector-class">.a</span> addvec<span class="hljs-selector-class">.o</span> multvec.o<br></code></pre></td></tr></table></figure><p>接下来再编写一个程序<code>main2.c</code>调用该静态库，头文件<code>vector.h</code>定义了库文件中的函数原型：</p><p><img src="5fa82c697df7838df12800b6d2b7ba3e.png" alt=""></p><p>最后使用如下命令编译并链接main2.o和libvector.a：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">linux&gt; gcc -c main2.c<br>linux&gt; gcc -<span class="hljs-type">static</span> -o p2 main2.o ./libvector.a<br></code></pre></td></tr></table></figure><p><strong><code>-static</code>参数表示链接器应当构建一个完全链接的可执行目标文件</strong>，该文件可以被加载到内存中运行而无需进一步地链接。完整的链接流程如下图所示：</p><p><img src="baa40568b0803a179e778c83047e5c7d.png" alt=""></p><h2 id="6-3-静态库的符号解析">6.3 静态库的符号解析</h2><p>​符号解析时，链接器会按照从左到右的顺序依次扫描命令行中的目标文件和静态库。在这个过程中，E 为可重定位目标文件的集合，U 为被引用但还未找到定义的符号，D 为已扫描过的文件定义的符号，开始时三者均为空。</p><ul><li>若命令行中的输入文件为可重定位目标文件，则链接器将其添加到 E 中并更新 U 和 D 中的符号；</li><li>若命令行中的输入文件为静态库，则链接器会将 U 中的符号与该静态库中定义的符号相匹配。匹配成功的模块会被添加到 E 中，随后链接器更新 U 和 D 中的符号。当 U 和 D 中的符号不再改变时，匹配结束，任何不在 E 中的静态库模块都将被直接丢弃；</li><li>若扫描全部完成时 U 为空，则链接器合并并重定位 E 中所有的目标文件以构建可执行文件。否则，链接器将报错并终止。</li></ul><p>链接器的这种行为限制了命令行中的文件顺序。如果定义符号的静态库出现在引用该符号的目标文件之前，链接就会失败。</p><h1>7.重定位</h1><p>符号解析完成后，链接器会将代码中的每个符号引用与一个符号定义相关联。接下来，链接器开始对目标文件重定位：</p><ul><li>重定位 Section 和符号定义：链接器将所有输入模块中相同类型的 Section 合并为一个新的聚合 Section，然后将运行时地址分配给每个 Section 和符号；</li><li>在 Section 内重定位符号引用：链接器修改代码和数据段中的每个符号引用，使其指向正确的运行时地址。为了执行这一步，它依赖于**重定位条目（Relocation Entry）**这种数据结构。</li></ul><h2 id="7-1重定位条目">7.1重定位条目</h2><p>​汇编器在生成目标文件时，并不知晓代码、数据和引用的外部符号在内存中的最终位置。它只会为每个引用生成一个重定位条目（Relocation Entry），指导链接器如何修改它们。上文提到，代码的重定位条目放在 .rel.text 中，数据的重定位条目则放在 .rel.data 中。</p><p>ELF 重定位条目的数据结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">long</span> offset;    <span class="hljs-comment">/* Offset of the reference to relocate */</span><br>    <span class="hljs-type">long</span> type:<span class="hljs-number">32</span>,   <span class="hljs-comment">/* Relocation type */</span><br>         symbol:<span class="hljs-number">32</span>; <span class="hljs-comment">/* Symbol table index */</span><br>    <span class="hljs-type">long</span> addend;    <span class="hljs-comment">/* Constant part of relocation expression */</span><br>&#125; Elf64_Rela;<br></code></pre></td></tr></table></figure><p><code>offset</code>是被修改的引用在其 Section 中的偏移量；<code>symbol</code>是引用指向的符号在符号表中的索引；<code>type</code>告知链接器如何修改引用；<code>addend</code>是一个有符号常量，某些类型的重定位使用它来偏置被修改的引用值。</p><p>最基本的两种重定位类型为：</p><ul><li>R_X86_64_PC32：使用 32 位 PC 相对地址重定位引用。当 CPU 执行一条使用 PC 相对地址的指令时，它会将指令中的目标地址与 PC 当前值（即下一条指令在内存中的地址）相加得到有效地址（在 <a href="https://koktlzz.github.io/posts/machine-level-representation-of-programs-note/#%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4">跳转指令</a> 一节中我们讨论过这一问题）；</li><li>R_X86_64_32：使用 32 位绝对地址重定位引用。CPU 直接使用指令中的目标地址作为有效地址，无需进一步地修改。</li></ul><h2 id="7-2-重定位符号引用">7.2 重定位符号引用</h2><p>链接器的重定位算法的伪代码如图所示：</p><p><img src="d447b5578bb67aa0b5fe84c54ea52858.png" alt=""></p><p>​</p><p>​链接器遍历每个 Section（<code>s</code>）中的每个重定位条目（<code>r</code>）。为了使描述具体化，假设每个节(Section)s是一个字节数组，每个重定位条目r是一个类型为Elf32_Rela的结构体。另外，还设当算法运行时，链接器已经为每个节(用ADDR(S)表示)和每个符号都选择了运行时地址(用ADDR(r.symbol)表示)。第3行计算的是需要被重定位的4字节引用的数组s中的地址（<code>*refptr</code>是指令中的目标地址）。如果这个引用使用的是PC相对寻址，那么它就用第5~9行来重定位。如果该引用使用的是绝对寻址，它就通过第 11~ 13 行来重定位。</p><p>我们使用命令<code>objdump -dx main.o</code>得到汇编器为 <a href="#1.%E7%BC%96%E8%AF%91%E5%99%A8%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F">main.c</a> 生成的机器码和重定位条目：</p><p><img src="64d46db6560dbda755c64d50acaea0d1.png" alt=""></p><h3 id="7-2-1-PC相对地址重定位">7.2.1 PC相对地址重定位</h3><p><img src="004701c6a73489a46cb86d6e2e9b5982.png" alt=""></p><p>​从这个列表中，我们看到ca11指令开始于节偏移0x6处，由1个字节的操作码0xe8和随后的 32位引用0xfffffffc(十进制-4)组成，它是以小端法字节顺序存储的。我们还看到下一行显示的是这个引用的重定位条目。(回想一下，重定位条目和指令实际上是存放在目标文件的不同节中的。OBJDUMP工具为了方便将它们显示在一起。)重定位条目r由3个字段组成:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">r.offset</span> = <span class="hljs-number">0</span>x7<br><span class="hljs-attr">r.symbol</span> = swap<br><span class="hljs-attr">r.type</span>   = R_X<span class="hljs-number">86_64_</span>PC32<br><span class="hljs-attr">r.addend</span> = -<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>​</p><p>​这些字段告诉链接器修改开始于偏移量0x7.处的32位PC相对引用，使得在运行时它指向swap()。现在，假设链接器已经确定:  ADDR(s)=ADDR(.text)=0x80483b4  和   ADDR(r.symbol)=ADDR(swap)=0x80483c8。那么首先我们可以计算得到该引用的运行时地址为：（第七行）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">refaddr = ADDR(s)  + r<span class="hljs-number">.</span>offset<br>= <span class="hljs-number">0x80483b4</span> + <span class="hljs-number">0x7</span><br>        = <span class="hljs-number">0x80483bb</span><br></code></pre></td></tr></table></figure><p>然后，它将引用从当前值(-4)修改为0x9，使得它在运行时指向swap()(第8行):</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">*refptr = (<span class="hljs-name">unsigned</span>) (<span class="hljs-name">ADDR</span>(<span class="hljs-name">r</span>.symbol) + r.addend - refaddr)<br>        = (<span class="hljs-name">unsigned</span>) (<span class="hljs-number">0</span>x80483c8       + (<span class="hljs-name">-4</span>)     - <span class="hljs-number">0</span>x80483bb)<br>        = (<span class="hljs-name">unsigned</span>) (<span class="hljs-number">0</span>x9)<br></code></pre></td></tr></table></figure><p>在得到的可执行目标文件中，ca11指令有如下的重定位的形式:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">80483ba</span>:  e8 <span class="hljs-number">09</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>         ca11  <span class="hljs-number">80483</span>c8 &lt;swap&gt;swap();<br></code></pre></td></tr></table></figure><p>在运行时，ca11指令将存放在地址0x80483ba处。当CPU执行ca11指令时，PC的值为0x80483bf，即紧随在ca11指令之后的指令的地址。为了执行这条指令，CPU执行以下的步骤:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.push PC onto stack<br><span class="hljs-attribute">2</span>.PC&lt;-PC+<span class="hljs-number">0</span>x9=<span class="hljs-number">0</span>x80483bf+<span class="hljs-number">0</span>x9=<span class="hljs-number">0</span>x80483c8<br></code></pre></td></tr></table></figure><p>因此，要执行的下一条指令就是 swap 程序的第一条指令.</p><div class="note note-secondary">            <p>你可能想知道为什么汇编器会将ca11指令中的引用的初始值设置为-4。汇编器用这个值作为偏移量，是因为PC总是指向当前指令的<strong>下一条指令</strong>。在有不同指令大小和编码方式的不同的机器上，该机器的汇编器会使用不同的偏移量。这是一个很有用的技巧，它允许链接器透明地重定位引用，很幸运地不用知道某一台机器的指令编码。</p>          </div><h3 id="7-2-2-重定位绝对引用">7.2.2 重定位绝对引用</h3><p>回想图7-1中我们的示例程序，swap.o模块将全局指针bufp0初始化为指向全局数组buf的第一个元素的地址:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int *bufpO <span class="hljs-punctuation">=</span><span class="hljs-meta">&amp;buf[0];</span><br></code></pre></td></tr></table></figure><p>该引用的重定位条目是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">r.offset = <span class="hljs-number">0x0</span><br>r.symbol = buf<br>r.type   = R_X86_64_32<br>r.addend = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>因为bufp0是一个已初始化的数据目标，那么它将被存放在可重定位目标模块swap.o的.data节中。因为它被初始化为一个全局数组的地址，所以它需要被重定位。下面是 swap.o中。data节的反汇编列表:</p><p><img src="fe0d062a26dbdf47994c1694f99f3d34.png" alt=""></p><p>我们看到.data节包含一个32位引用，bufp0指针的值为0x0。重定位条目告诉链接器这是一个 32位绝对引用，开始于偏移0处，必须重定位使得它指向符号buf。现在，假设链接器已经确定:</p><p>ADDR(r.symbol)=ADDR(buf)=0x8049454，那么首先我们可以计算得到该引用的运行时地址为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">*refptr = (<span class="hljs-type">unsigned</span>) (ADDR(r.symbol) + *refptr)<br>        = (<span class="hljs-type">unsigned</span>) (<span class="hljs-number">0x8049454</span>      + <span class="hljs-number">0</span>)<br>        = (<span class="hljs-type">unsigned</span>) (<span class="hljs-number">0x8049454</span>)<br></code></pre></td></tr></table></figure><p>在得到的可执行目标文件中，引用有下面的重定位形式:</p><p><img src="5f970249487f23287b62ef56bdb8ad2e.png" alt=""></p><p>总而言之，链接器决定在运行时变量bufp0将放置在存储器地址0x804945c处，并且被初始化为0x8049454，这个值就是buf数组的运行时地址。</p><h1>8.可执行目标文件</h1><p>ELF 可执行目标文件的结构如下：</p><p><img src="839cb440a8e32a0044485b652368eff6.png" alt=""></p><p>​ELF 头描述了文件的整体格式，并包含了程序在运行时执行的第一条指令的地址。.init 定义了一个名为<code>_init</code>的函数，它将被程序的初始化代码所调用。其余 Section 与可重定位目标文件类似，只不过它们已被重定位到运行时的内存地址。正因如此，该文件中没有 .rel.text 和 .rel.data。</p><p>​ELF可执行文件被设计得很容易加载到存储器，可执行文件的**连续的片(chunk)**被映射到连续的存储器段。**段头部表(segment header table)**描述了这种映射关系。下图 展示了可执行文件 p的段头部表，是由OBJDUMP 显示的。</p><p><img src="bc91362eb5f5fde40acfa2e586f8f7c6.png" alt=""></p><p>​从段头部表中，我们会看到根据可执行目标文件的内容初始化两个存储器段。</p><p>​第一个段(代码段)对齐到一个4KB(2”)的边界，有读/执行许可，开始于存储器地址 0x08048000处，总共的存储器大小是0x448字节，并且被初始化为可执行目标文件的头0x448 个字节，其中包括ELF头部、段头部表以及.init、.text和.rodata节。<br>​第二个段(数据段)被对齐到一个4KB的边界，有读/写许可开始于存储器地址 0x08049448处，总的存储器大小为0x104字节，并用从文件偏移 0x448处开始的 0xe8个字节初始化，在这种情况下，偏移0x448处正是.data节的开始。该段中剩下的字节对应于运行时将被初始化为零的.bss数据。</p><p>对于每个内存段，链接器必须选择一个起始地址 vaddr，使得：</p><p>​<em>vaddr</em> <em>mod</em> <em>align</em>= <em>off</em> <em>mod</em> <em>align</em></p><p>其中，off 是该内存段中第一个 Section 在目标文件中的偏移量，align 是程序头表中指定的对齐方式。这种对齐要求是一种优化，它可以使目标文件被更加有效地加载到内存中。</p><h1>9.加载可执行目标</h1><p>下图展示了 Linux 程序的运行时内存结构：</p><p><img src="f5b0f8944ad577db9c0399d5a96b7a27.png" alt=""></p><p>​加载器首先根据程序头表将可执行目标文件中的块复制到内存中的代码和数据段，然后跳转到<strong>程序入口</strong>，即<code>_start_</code>函数（在系统目标文件<code>crt1.o</code>中定义）的地址。该函数再调用<code>libc.so</code>中定义的系统启动函数<code>__libc_start_main</code>，由它初始化执行环境，之后在从.text和.init节中调用了初始化例程后，启动代码调用atexit例程，这个程序附加了一系列在应用程序正常中止时应该调用的程序。exit函数运行atexit注册的函数，然后通过调用_exit将控制返回给操作系统。接着，启动代码调用应用程序的 main 程序，它会开始执行我们的C代码。在应用程序返回之后，启动代码调用exit 程序，它将控制返回给操作系统调用用户级的主函数并处理其返回。</p><div class="note note-secondary">            <p>​加载器实际上是如何工作的?<br>​我们对于加载的描述从概念上来说是准确的，但也不完全准确。为了理解加载实际上是如何工作的，你必须理解进程、虚拟存储器和存储器映射的概念，这些我们还没有加以讨论。在后面的第8 章和第9章中遇到这些概念时，我们将重新回到加载的问题上，并逐渐向你揭开它的神秘面纱。<br>​对于不够有耐心的读者，下面是关于加载实际上是如何工作的一个概述:Unix 系统中的每个程序都运行在一个进程上下文中，有自己的虚拟地址空间。当外壳运行一个程序时，父外壳进程生成一个子进程，它是父进程的一个复制品。子进程通过 execve 系统调用启动加载器。加载器删除子进程现有的虚拟存储器段，并创建一组新的代码、数据、堆和栈段。新的栈和堆段被初始化为零。通过将虚拟地址空间中的页映射到可执行文件的页大小的片(chunk)，新的代码和数据段被初始化为可执行文件的内容。最后，加载器跳转到start地址，它最终会调用应用程序的main函数。除了一些头部信息，在加载过程中没有任何从磁盘到存储器的数据拷贝。直到 CPU引用一个被映射的虚拟页才会进行拷贝，此时，操作系统利用它的页面调度机制自动将页面从磁盘传送到存储器。</p>          </div><h1>10.动态链接共享库</h1><p>​静态库会被定期维护和更新，因此程序员需要知晓其变动并将重新链接程序。此外，几乎所有 C 程序都会使用一些标准 I/O 函数，例如<code>printf</code>。这些函数的代码将在运行时被复制到每个进程的代码段中，从而导致严重的内存浪费。</p><p>​<strong>共享库（Shared Libraries）<strong>可以解决上述静态库的缺点。它是一种可以在</strong>加载时或运行时于任意内存地址加载并与程序链接的目标模块</strong>，该过程被称为<strong>动态链接（Dynamic Linking）</strong>。共享库在 Linux 系统中以<code>.so</code>为后缀，而在 Windows 系统中则被称为 DLL（Dynamic Linking Libraries）。</p><p>​在任意文件系统中，每个共享库都只有一个<code>.so</code>文件。与静态库不同的是，该文件中的代码和数据可以被引用该库的所有可执行文件共享，而不需要复制到可执行文件中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* $begin main2 */</span><br><span class="hljs-comment">/* main2.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;vector.h&quot;</span></span><br><br><span class="hljs-type">int</span> x[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> y[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> z[<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">addvec</span>(x, y, z, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;z = [%d %d]\n&quot;</span>, z[<span class="hljs-number">0</span>], z[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* $end main2 */</span><br></code></pre></td></tr></table></figure><p>动态链接过程如下图所示：</p><p><img src="5b972378b0fdee43bd8cda4aa7b126b2.png" alt=""></p><p>我们使用如下指令将 addvec.c 和 multvec.c 构建为共享库文件<code>libvector.so</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">linux&gt; gcc -shared -fpic -o libvector.so addvec.c multvec.c<br></code></pre></td></tr></table></figure><p>其中，<code>-fpic</code>指示编译器生成 <strong>与位置无关代码（Position-Independent Code</strong>），而<code>-shared</code>则指示链接器创建共享目标文件。一旦共享库文件创建成功，就可以将其链接到示例程序中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">inux&gt; gcc -o prog2l main2.c ./libvector.so<br></code></pre></td></tr></table></figure><p>我们需要明确的是，<code>libvector.so</code>的任意代码和数据都没有被复制到可执行文件<code>prog2l</code>中。链接器只会复制一些重定位和符号表信息，它们将在加载时用于解析引用了共享库的符号。</p><p>加载器随后读取可执行文件中包含的动态链接器路径，加载并运行它。动态链接器也是一个共享库文件，如 Linux 系统的<code>ld-linux.so</code>。它通过执行以下重定位操作来完成链接：</p><ul><li>将<code>libc.so</code>的代码和数据重定位到某个内存段；</li><li>将<code>libvector.so</code>中的代码和数据重定位到另一个内存段；</li><li>将<code>prog2l</code>中所有引用了共享库的符号重定位。</li></ul><p>最终，动态链接器将控制权转移给应用程序，共享库的位置不会在程序执行期间改变。</p><h1>11.从应用程序中加载和链接共享库</h1><p>​应用程序还可以在运行时请求动态链接器加载和链接共享库，其应用场景包括：Windows 应用程序的开发人员使用共享库来分发软件更新；现代 Web 服务器使用<strong>动态链接有效地更新或添加功能</strong>。</p><p>Linux 系统为应用程序提供了一些简单接口以实现上述功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag)</span>;<br><span class="hljs-comment">// Returns: pointer to handle if OK, NULL on error</span><br></code></pre></td></tr></table></figure><p>函数<code>dlopen</code>加载并链接共享库文件<code>filename</code>，参数<code>flag</code>可以是<code>RTLD_GLOBAL</code>、<code>RTLD_NOW</code>和<code>RTLD_LAZY</code>中的一个或多个（详见 <a href="https://man7.org/linux/man-pages/man3/dlopen.3.html">dlopen</a>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlsym</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle, <span class="hljs-type">char</span> *symbol)</span>;<br><span class="hljs-comment">// Returns: pointer to symbol if OK, NULL on error</span><br></code></pre></td></tr></table></figure><p>类似的接口函数还有 <a href="https://man7.org/linux/man-pages/man3/dlsym.3.html">dlsym</a>、<a href="https://man7.org/linux/man-pages/man3/dlclose.3.html">dlclose</a> 和 <a href="https://man7.org/linux/man-pages/man3/dlerror.3.html">dlerror</a>。<a href="http://csapp.cs.cmu.edu/2e/ics2/code/link/dll.c">示例程序</a> 展示了应用程序是如何调用它们来动态链接共享库的。</p><div class="note note-secondary">            <p>​共享库和 Java 本地接口</p><p>​Java定义了一个标准调用规则，叫做Java本地接口(Java Native Interface，JNI)，它允许Java程序调用“本地的”C和C++函数。JNI的基本思想是将本地C函数，如foo，编译到共享库中，<a href="http://xn--foo-eo8e.so">如foo.so</a>。当一个正在运行的Java程序试图调用画数fo0时，Java解释程序利用dlopen 接口(或者与其类似的接口)动态链接和加载 <a href="http://foo.so">foo.so</a>，然后再调用 foo。</p>          </div><h1>12.与位置无关代码</h1><p>​现代系统在编译共享库时会生成一种无需重定位即可被加载到内存中任意位置的代码，即与位置无关代码（Position-Independent Code，PIC），这样共享库就能被多个正在运行的进程同时引用。</p><h2 id="7-12-1-PIC数据引用">7.12.1 PIC数据引用</h2><p>​编译器在 PIC 数据段的开头创建了一个全局偏移量表（Global Offset Table，GOT），其中的每个条目都对应一个被目标模块引用的全局符号。编译器还会为这些条目生成重定位记录。加载时，动态链接器重定位每个 GOT 条目，使其包含被引用符号的绝对地址。每个引用了全局符号的目标模块都有自己的 GOT。</p><p>下图展示了示例共享库<code>libvector.so</code>中的 GOT：</p><p><img src="20220331211838.png" alt=""></p><p>​无论我们在何处加载共享模块，其数据段与代码段之间的距离始终相同。因此，代码段中的<code>addl</code>与数据段中的 GOT[3] 之间的偏移量是一个运行时常量。当函数<code>addvec</code>引用全局变量<code>addcnt</code>时，先通过<code>0x2008b9(%rip)</code>计算得到 GOT[3] 的地址，然后从中读取加载时被动态链接器赋予的<code>addcnt</code>的绝对地址。</p><h2 id="7-12-2-PIC函数调用">7.12.2 PIC函数调用</h2><p>​PIC 函数调用的运行时地址是在该函数第一次被调用时确定的，这种技术被称为延迟绑定（Lazy Binding）。当应用程序导入了一个包含成百上千个函数的共享库（如<code>libc.so</code>），却只调用其中一小部分的函数时，这种技术可以大大减少加载时不必要的重定位操作。</p><p>​延迟绑定是通过 GOT 和过程链接表（Procedure Linkage Table，PLT）共同实现的。只要目标模块调用了共享库中定义的函数，那么它就有自己的 GOT 和 PLT。上文提到，GOT 是数据段的一部分，而 PLT 则是代码段的一部分。</p><p>GOT 和 PLT 在运行时协同工作解析函数地址的过程如下图所示：</p><p><img src="20220401173947.png" alt=""></p><p>​可执行文件中每个对共享库函数的调用都与 PLT 数组中的条目对应。其中，PLT[0] 是跳转到动态链接器的特殊条目，PLT[1] 对应系统启动函数<code>__libc_start_main</code>。从 PLT[2] 开始的条目对应用户代码调用的函数，如图中的<code>addvec</code>。</p><p>​当与 PLT 一起使用时，GOT [0] 和 GOT[1] 包含了动态连接器在解析函数地址时所需的信息，GOT[2] 是动态链接器的入口点。其余的每个条目均对应于一个在运行时需要被解析地址的调用函数，以及一个 PLT 条目。例如，GOT[4] 和 PLT[2] 与<code>addvec</code>对应。</p><p>程序第一次调用<code>addvec</code>并解析其地址的过程如上图（a）所示：</p><ol><li>PLT[2] 是该函数的入口，程序首先调用它；</li><li>PLT[2] 中的第一条指令间接跳转到 GOT[4]。由于最初每个 GOT 条目都指向对应 PLT 条目中的第二条指令，因此控制权将转移到 PLT[2] 中的第二条指令；</li><li>PLT[2] 中的第二条指令将<code>addvec</code>的 ID 0x1 压入栈中，第三条指令跳转到 PLT[0]；</li><li>PLT[0] 中的第一条指令将 *GOT[1] 压入栈中，第二条指令通过 GOT[2] 间接跳转到动态链接器。动态链接器根据被压入栈中的两个条目确定<code>addvec</code>的运行时地址并用它覆盖 GOT[4]，最终将控制权转移给<code>addvec</code>。</li></ol><p>程序再次调用<code>addvec</code>的过程如上图（b）所示：</p><ol><li>程序依然首先调用 PLT[2]；</li><li>此时 GOT[4] 指向了<code>addvec</code>，因此控制权将被直接转移到该函数。</li></ol><h1>13.库插入</h1><p>​<strong>库插入（Library Interpositioning</strong>）能够拦截程序对共享库函数的调用，并执行用户自定义的代码。基于这项技术，我们可以计算库函数的调用次数，验证并跟踪其输入和输出的值，甚至将其替换为完全不同的函数。</p><p>库插入的基本思想是创建一个与库函数原型相同的包装函数，然后“欺骗”系统调用包装函数而非库函数。通常，包装函数会执行自己的逻辑，调用库函数并将其返回值传递给调用者。</p><p>库插入可以在编译时、链接时以及运行时使用。</p><h1>14.处理目标文件的工具</h1><p>​在 Linux 系统中有大量可用的工具可以帮助你理解和处理目标文件。特别地，GNU bimutils<br>包尤其有帮助，而且可以运行在每个 Linux 平台上。</p><ul><li>AR:创建静态库，插入、删除、列出和提取成员。</li><li>STRINGS:列出一个目标文件中所有可打印的字符串。</li><li>STRIP:从目标文件中删除符号表信息。</li><li>NM:列出一个目标文件的符号表中定义的符号，</li><li>SIZE:列出目标文件中节的名字和大小。</li><li>READELF:显示一个目标文件的完整结构，包括ELF头中编码的所有信息。包含SIZE 和</li><li>NM 的功能。</li><li>OBJDUMP:所有二进制工具之母。能够显示一个目标文件中所有的信息。它最大的作用</li><li>是反汇编.text节中的二进制指令。</li></ul><p>Unix 系统为操作共享库还提供了LDD程序:</p><ul><li>LDD:列出一个可执行文件在运行时所需要的共享库</li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_6_存储器层次结构</title>
    <link href="/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/"/>
    <url>/2024/08/27/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-6-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>​<strong>存储器系统(memory system)</strong> 是一个具有不同容量、成本和访问时间的存储设备的层次结构。CPU寄存器保存着最常用的数据。靠近CPU的小的、快速的 <strong>高速缓存存储器(cache memory)</strong> 作为一部分存储在相对慢速的 <strong>主存储器(main memory，简称主存)</strong> 中的数据和指令的缓冲区域。主存暂时存放存储在容量较大的、慢速磁盘上的数据，而这些磁盘常常又作为存储在通过网络连接的其他机器的磁盘或磁带上的数据的缓冲区域。</p><p>​这里就是计算机系统中一个基本而持久的思想:如果你理解了系统是如何将数据在存储器层次结构中上上下下移动的，那么你就可以编写你的应用程序，使得它们的数据项存储在层次结构中较高的地方，在那里CPU能更快地访问到它们。</p><p>​这个思想围绕着计算机程序的一个称为 <strong>局部性(locality)</strong> 的基本属性。具有良好局部性的程序倾向于一次又一次地访问相同的数据项集合，或是倾向于访问邻近的数据项集合。具有良好局部性的程序比局部性差的程序更多地倾向于从存储器层次结构中较高层次处访问数据项，因此运行得更快。例如，不同的矩阵乘法核心程序执行相同数量的算术操作，但是有不同程度的局部性，它们的运行时间可以相差20倍!。我们向你展示如何分析C程序的局部性，而且我们还介绍改进你的程序中局部性的技术。你还会学到一种描绘某台机器上存储器层次结构的性能的有趣方法，称为 <strong>“存储器山”(memory mountain)</strong> ，它给出的读访问时间是局部性的一个数。</p><p>执行指令时访问数据所需的周期数：</p><ol><li>CPU寄存器：0个周期</li><li>L1L3高速缓存：475个周期</li><li>主存：上百个周期</li><li>磁盘：几千万个周期</li></ol><h1>1.存储技术</h1><p><strong>几种基本的存储技术</strong></p><ol><li><strong>随机访问存储器</strong>，分为两类：</li><li><ol><li><strong>RAM</strong>，同时也是<strong>易失性存储器</strong>，也分为两类：</li><li><ol><li><strong>SRAM</strong>：静态随机访问存储器，速度快，价格高。多用来作为高速缓存存储器。</li><li><strong>DRAM</strong>：动态随机访问存储器，速度慢，价格低。多用来作为主存和图形系统的帧缓冲器</li></ol></li><li><strong>ROM</strong>，同时也是<strong>非易失性存储器</strong>。<strong>闪存</strong>属于 ROM，<strong>固态硬盘</strong>就是基于闪存开发而来。</li></ol></li><li>机械硬盘</li><li>固态硬盘（SSD）</li></ol><h2 id="1-1-随机访问存储器">1.1 随机访问存储器</h2><p>​随机访问存储器(Random-Access Memory，RAM)分为两类:静态的和动态的。静态RAM(SRAM)比动态RAM(DRAM)更快，但也贵得多。SRAM用来作为高速缓存存储器，既可以在CPU芯片上，也可以在片下。DRAM用来作为主存以及图形系统的帧缓冲区。典型地，一个桌面系统的SRAM不会超过几兆字节，但是DRAM却有几百或几千兆字节。</p><h3 id="1-静态-RAM（SRAM）">1.静态 RAM（SRAM）</h3><p>SRAM 将每个位存储在一个双稳态的存储器单元内。每个单元由六个晶体管组成。</p><p>双稳态即该电路无限期地稳定保持在两个不同的电压状态。</p><p>对于 SRAM，只要有电，就永远地保持它的值。即使有干扰，当干扰消除，电路也会恢复到稳定</p><h3 id="2-动态-RAM（DRAM）">2.动态 RAM（<strong>DRAM</strong>）</h3><p>DRAM 将每个位存储为对一个电容的充电。每个 DRAM 单元由一个电容和一个访问晶体管组成。</p><p>DRAM 对干扰非常敏感。当电容的电压被扰乱后，就永远不会恢复了</p><h3 id="3-SRAM和DRAM的区别"><strong>3.SRAM和DRAM的区别</strong></h3><p>只要有电源，SRAM是持续的。与DRAM不同，不需要刷新。SRAM的存取比DRAM快。SRAM对诸如光和电噪声之类的干扰不敏感。其代价是SRAM电池比DRAM电池使用更多的晶体管，因此密度更低，价格更贵，消耗更多电力。</p><p><img src="f0bdbfd58ae7b34da811ae7aac5560ef.png" alt=""></p><h3 id="4-传统的DRAM">4.传统的DRAM</h3><p>​DRAM芯片中的单元(位)被分成d个<strong>超单元(supercell)</strong>，每个超单元都由w个DRAM单元组成，w 一般为 8。一个<em>dw</em>的 DRAM 总共存储了<em>dw</em>位信息。当从 DRAM 中读取数据时，一次可以读取一个超单元的数据（可以近似的将超单元理解为一个字节）。信息通过称为**引脚(pin)**的外部连接器流入和流出芯片。每个引脚携带一个1位的信号。</p><p>DRAM 中的超单元按行列组织，DRAM 中还包含一个行缓冲区。</p><p><strong>内存控制器</strong> <strong>依次</strong> 将行地址和列地址发送给 DRAM，DRAM 将对应的超单元的内容发回给内存控制器以实现读取数据。行地址和列地址共享相同的 DRAM 芯片地址引脚<br><img src="q4HjUwednvJBWAK.png" alt=""></p><p><strong>从 DRAM 中读取超单元的步骤：</strong></p><ol><li>内存控制器发来行地址 i，DRAM 将整个第 i 行复制到内部的行缓冲区。称为<strong>RAS(Row Access Strobe，行访问选通脉冲)请求</strong>。</li><li>内存控制器发来列地址 j，DRAM 从行缓冲区中复制出超单元 (i,j) 并发送给内存控制器。<strong>称为CAS(Column<br>Access Strobe，列访问选通脉冲)请求</strong>。</li></ol><ul><li>注意：RAS和CAS请求共享相同的 DRAM 地址引脚。</li></ul><p><img src="byWis1uH8FIBPkR.png" alt=""></p><h3 id="5-内存模块">5.内存模块</h3><p>​许多 DRAM 芯片封装在<strong>内存模块</strong>中，插到主板的扩展槽上。常用的是<strong>双列直插内存模块 (DIMM)，以 64 位为块与内存控制器交换数据</strong>。</p><p>​比如一个内存模块包含 8 个 DRAM 芯片，每个 DRAM 包含 8M 个超单元，每个超单元存储一个字节（8bit）。<strong>使用 8 个 DRAM 芯片上相同地址处的超单元来表示一个 64 位字</strong>，DRAM 0 存储第一个字节，DRAM 1 存储第 2 个字节，依此类推。</p><p>​要取出内存地址 A 处的一个字，内存控制器先将 A 转换为一个超单元地址 (i,j)，然后内存模块将 i,j 广播到每个 DRAM。作为响应，每个 DRAM 输出它的 (i,j) 超单元的 8 位内容，合并成一个 64 位字，再返回给内存控制器。</p><p><strong>主存由多个内存模块连接到内存控制器聚合成。</strong></p><p><img src="iGR7WzclrCwB1Dv.png" alt=""></p><p>接下来，设r表示一个DRAM阵列中的行数，c表示列数，b.r表示行寻址所需的位数,b.c表示列寻址所需的位数。对于下面每个DRAM，确定2的幂数的阵列维数，使得max(b.r，b.c)最小，max(b.r，b.c)是对阵列的行或列寻址所需的位数中较大的值。</p><p><img src="4AKBRfjX6mgVU2H.png" alt=""></p><h3 id="6-增强的DRAM">6.增强的DRAM</h3><p>有一些经过优化的 DRAM：</p><ol><li><strong>快页模式 DRAM (FPM DRAM)</strong>：当连续访问位于同一行的超单元时，第二次以后，FPM DRAM 可以直接从行缓冲区获取数据。</li><li><strong>扩展数据输出 DRAM (EDO DRAM)</strong>：FPM DRAM 的一个增强的形式，更快一些。</li><li><strong>同步 DRAM (*<em>**SDRAM**</em>*)</strong>：常规的、FPM 和 EDO 都是异步的。从效果而言，SDRAM 可以比异步存储器更快地输出它的超单元的内容。</li><li><strong>双倍数据速率同步 DRAM(DDR SDRAM)</strong>：对 SDRAM 的一种增强，使速度翻倍。不同的 DDR SDRAM 以提高有效带宽的很小的预留缓冲区的大小来划分：DDR(2位)、DDR2(4位)、DDR3(8位)。位越多速度越快，近乎翻倍。</li><li><strong>视频 RAM (VRAM)</strong>：用在图形系统的帧缓冲区中，其思想与 FPM DRAM 类似。VRAM 允许对内存进行并行地读和写。因此系统可以在写下一次更新的新值时（写），用帧缓冲区的像素刷屏幕（读）。</li></ol><h3 id="7-非易失性存储器"><strong>7.非易失性存储器</strong></h3><p>​DRAM 和 SRAM 会在断电后丢失信息，因此是易失性存储器。<strong>ROM</strong> 是非易失性存储器，在断电后仍保存着信息。</p><p>ROM 是只读存储器，但是实际上有些 ROM 既可以读也可以写。</p><p><strong>几种常见的非易失性存储器：</strong></p><ol><li><strong>可编程 ROM (PROM)</strong>：只能被编程一次。</li><li><strong>可擦写可编程 ROM (EPROM)</strong>：可以被擦除和重编程上千次。</li><li><strong>电子可擦除 PROM (EEPROM)</strong>：类似于 EPROM，但是可以被重编程十万次。</li><li><strong>闪存</strong>：基于 EEPROM 的一种存储技术。闪存无处不在，<strong>固态硬盘就是一种基于闪存的磁盘驱动器</strong>。</li></ol><p>存储在 ROM 设备中的程序通常称为<strong>固件(frmware)</strong>。当一个计算机系统通电以后，它会运行存储在 ROM 中的固件。一些系统在固件中提供了少量基本的输入和输出函数–例如，PC的 **BIOS(基本输人/输出系统)**例程。复杂的设备，像图形卡和磁盘驱动控制器，也依赖固件翻译来自CPU的IO(输入/输出)请求。</p><h3 id="8-访问主存">8.访问主存</h3><p>​数据流通过称为<strong>总线(bus)<strong>的共享电子电路在处理器和DRAM主存之间来来回回。每次 CPU和主存之间的数据传送都是通过一系列步骤来完成的，这些步骤称为</strong>总线事务(bustransaction)</strong>。</p><ul><li><p>**读事务(read transaction)**从主存传送数据到CPU。</p></li><li><p>**写事务(write transaction)**从CPU 传送数据到主存。</p></li></ul><p>总线是一组并行的导线，能携带地址、数据和控制信号。</p><p><strong>系统总线</strong>连接 CPU 和 IO 桥接器，<strong>内存总线</strong>连接 IO 桥接器和主存。IO 桥同时也连接着 <strong>I/O 总线</strong>。</p><p><img src="a3dcf3bc826d53044f98037023c53acb.png" alt=""></p><p><strong>读事务</strong>的三个步骤：</p><ol><li>CPU 将地址 A 放到内存总线上。</li><li>主存从总线读出 A，取出字 x，然后将 x 放到总线上。</li><li>CPU 从总线读出字 x，并将它复制到相应寄存器中</li></ol><p><img src="339f2d400708f6d104959422ba43df8b.png" alt=""></p><p><strong>写事务</strong>的三个步骤：</p><ol><li>CPU 将地址 A 放到内存总线。主存读出这个地址，并等待数据字。</li><li>CPU 将数据字 y 放到总线上。</li><li>主存从总线读数据字 y，并将它存储在地址 A。</li></ol><p><img src="3ac92a496f20898fcec5902f146c054c.png" alt=""></p><h2 id="1-2-磁盘存储">1.2 磁盘存储</h2><h3 id="1-磁盘构造"><strong>1. 磁盘构造</strong></h3><p>略</p><h3 id="2-磁盘容量"><strong>2. 磁盘容量</strong></h3><p>略</p><h3 id="3-磁盘操作"><strong>3. 磁盘操作</strong></h3><p>略</p><h3 id="4-逻辑磁盘块">4.<strong>逻辑磁盘块</strong></h3><p>略</p><h3 id="5-连接I-O设备">5. 连接I/O设备</h3><p>系统总线与内存总线都是与 CPU 相关的，而 IO 总线与 CPU 无关。</p><p>Intel 的**外部设备互连总线（PCI）**就是一种 IO 总线（广播总线）。</p><p>IO 总线速度相比于系统总线和内存总线慢，但是可以容纳种类繁多的第三方 IO 设备。</p><p>连接到 IO 总线的<strong>三种设备</strong>：</p><ol><li><strong>通用串行总线（USB）</strong>：USB 总线是一个广泛使用的<strong>标准</strong>，连接各种 IO 设备，包括键盘、鼠标等。</li><li>**显卡/显示适配器：**负责代表 CPU 在显示器上画像素。</li><li>**主机总线适配器：**连接磁盘。常总的磁盘接口是 <strong>SCSI 和 SATA</strong>。其中 SCSI 比 SATA 更快也更贵。</li></ol><p><img src="200afce0c40dc9a454550bfbddf9a422.png" alt=""></p><h3 id="6-访问磁盘"><strong>6.访问磁盘</strong></h3><p>​CPU 使用**内存映射 I/O (memory-mapped I/O)**来向 I/O 设备发射命令。在使用内存映射 IO 的系统中，地址空间中有一块地址是专为与 IO 设备通信保留的，每个这样的地址称为一个 IO 端口。当一个设备连接到总线时，它与一个或多个端口相关联。</p><p>假设磁盘控制器映射到端口 0xa0，<strong>读一个磁盘扇区的步骤如下：</strong></p><ol><li>CPU 依次发送命令字、逻辑块号、目的内存地址三条指令到 地址 0xa0，发起一个磁盘读。因为磁盘读的时间很长，所以此后 CPU 会转去执行其他工作。</li></ol><p><img src="4ed158cbd6bc3b547461648ceb26ecb1.png" alt=""></p><ol start="2"><li>磁盘收到读命令后，将逻辑块号翻译成一个扇区地址，读取该扇区的内容，并将内容直接传送到主存，不需要经过 CPU (这称为直接内存访问(DMA))。</li></ol><p><img src="488d9c3f16fa663d4c66dea5efee22ff.png" alt=""></p><ol start="3"><li>DMA 传送完成后，即磁盘扇区的内容安全地存储在主存中后，磁盘控制器给 CPU 发送一个中断信号(Interrupt)来通知 CPU。</li></ol><p><img src="80aaa6c0f95d1b6f78b66f070350437e.png" alt=""></p><h2 id="1-3-固态硬盘">1.3 <strong>固态硬盘</strong></h2><p><strong>固态硬盘 (SSD)</strong> 是一种基于闪存的存储技术。</p><p>一个固态硬盘中封装了一个<strong>闪存翻译层</strong>和多个闪存芯片。闪存翻译层是一个硬件/固件设备，功能类似磁盘控制器，将对逻辑块的请求翻译成对底层物理设备的访问。</p><p>一个闪存由 B 个块的序列组成，每个块由 P 页组成，页的大小为 512byte~4kb。数据以页为单位进行读写。</p><p><img src="458f772f9bb9c637418d692c7c532c57.png" alt=""></p><p>对于 SSD 来说，<strong>读比写快</strong>。因为只有在一页所属的块整个被擦除后，才能写这一页。重复写十万次后，块就会磨损，因此固态硬盘寿命较低。</p><p><strong>随机写 SSD 很慢的两个原因：</strong></p><ol><li>擦除块需要相对较长的时间。</li><li>如果写操作试图修改一个已经有数据的页，那么这个块中所有带有用数据的页都必须复制到一个新的块，然后才能向该页写数据。</li></ol><p>**SSD 相比于旋转磁盘的优点：**由半导体存储器构成，没有移动部件，所以更结实，随机访问也更快，能耗更低。</p><p><strong>缺点</strong>：更容易磨损，不过现在的 SSD 已经可以用很多年了。</p><p>基于闪存（flash memory）的存储技术</p><h2 id="1-4-存储技术趋势">1.4 存储技术趋势</h2><p>**性能上：**SRAM &gt; DRAM &gt; SSD &gt; 旋转磁盘</p><p><strong>发展速度上</strong>：增加密度(降低成本) &gt; 降低访问时间</p><p>DRAM 和 磁盘的性能滞后于 CPU 的性能提升速度，两者之间的差距越来越大。</p><p><img src="7719fde4c6dafec46ee9c426c508f0a2.png" alt=""></p><h1>2.局部性</h1><p>​实际上弥补CPU和内存之间差距的关键，是程序的局部性。一个编写良好的计算机程序常常具有良好的<strong>局部性(locality)</strong>。也就是说，它们倾向于引用邻近于其他最近引用过的数据项的数据项，或者最近引用过的数据项本身。这种倾向性，被称为<strong>局部性原理(principle of locality)</strong>，是一个持久的概念，对硬件和软件系统的设计和性能都有着极大的影响。</p><p>​局部性是程序的一个基本属性。具有良好局部性的程序倾向于<strong>重复地访问相同的数据 (时间局部性 temporal locality)</strong>，或倾向于<strong>访问邻近的数据 (空间局部性 spatial locality)</strong>，因此运行更快。</p><p><strong>局部性有两种形式</strong>：时间局部性和空间局部性。</p><p>现代计算机系统的各个层次，从硬件到操作系统到应用程序都利用了局部性。</p><h2 id="2-1-对程序数据引用的局部性"><strong>2.1 对程序数据引用的局部性</strong></h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">N</span>; ++i) &#123;<br><span class="hljs-built_in">sum</span> += v[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>上例中，sum 具有好的时间局部性，向量 v 具有好的空间局部性。</p><p>这里对向量 v 中元素的访问是顺序访问的，称为<strong>步长为 1 的引用模式</strong>。在空间局部性上，步长为 1 的引用模式是最好的。</p><h2 id="2-2-取指令的局部性"><strong>2.2 取指令的局部性</strong></h2><p>​程序指令存放在内存中，CPU 需要读这些指令，因此取指令也有局部性。比如 for 循环中的指令具有好的时间局部性和空间局部性。</p><h2 id="2-3-局部性小结"><strong>2.3 局部性小结</strong></h2><p><strong>评价局部性的简单原则：</strong></p><ol><li>重复引用相同变量的程序有好的时间局部性。</li><li>对于步长为 k 的引用模式的程序，k 越小，空间局部性越好。</li><li>对于取指令来说，循环有好的时间和空间局部性。循环体越小，循环迭代次数越多，局部性越好。</li></ol><h1>3.存储器层次结构</h1><p><img src="9a5f7056a064b85cd13ef10cd7b59960.png" alt=""></p><h2 id="3-1-在存储器层次结构中的缓存">3.1 在存储器层次结构中的缓存</h2><p>一般而言，高速缓存(cache)是一个小而快速的存储设备。使用高速缓存的过程称为缓存(caching)。</p><p><strong>存储器层次结构的中心思想</strong>：对于每个 k，位于 k 层的更快更小的存储设备作为位于 k+1 层的更大更慢的存储设备的缓存。换句话说，层次结构中的每一次都缓存来自较低一层的数据对象。</p><p>**缓存的具体实现：<strong>数据总是以</strong>块(block)**大小为传送单元(transfer unit)在第 k 层和第 k+1 层之间来回拷贝的。虽然在层次结构中任何一对相邻的层次之间块大小是固定的，但是其他的层次对之间可以用不同的块大小。</p><p>一般而言，层次结构较低的层(离 CPU 较远)的设备访问时间较长，因此为了补偿这些较长的访问时间，倾向于使用较大的块</p><p><img src="968eef5426637935d231b7a7d020e33b.png" alt=""></p><p><strong>1. 缓存命中</strong></p><p>当需要 k+1 层的某个数据对象 d 时，如果 d 恰好缓存在 k 层中，就称为缓存命中</p><p><strong>2. 缓存不命中</strong></p><p>缓存不命中时，第 k 层的缓存从 第 k+1 层缓存中取出包含 d 的块。</p><p>如果第 k 层缓存已经满了，需要根据<strong>替换策略</strong>选择一个块进行覆盖 (替换)，未满的话需要根据放置策略来选择一个块放置。</p><p><strong>3. 缓存不命中的种类</strong></p><ol><li><strong>冷不命中</strong>：一个空的缓存称为<strong>冷缓存</strong>，冷缓存必然不命中，称为冷不命中。</li><li>**冲突不命中：**常用的放置策略是将 k+1 层的某个块限制放置在 k 层块的一个小的子集中。比如 k+1 层的块 1,5,9,13 映射到 k 层的块 0。这会带来冲突不命中。</li><li><strong>容量不命中</strong>：当访问的工作集的大小超过缓存的大小时，会发生容量不命中。即缓存太小了，不能缓存整个工作集。</li></ol><p><strong>4. 缓存管理</strong></p><p>寄存器文件的缓存由编译器管理，L1,L2,L3 的缓存由内置在缓存中的硬件逻辑管理，DRAM 主存作为缓存由操作系统和 CPU 上的地址翻译硬件共同管理。</p><p><img src="fe4b962f01599eefb4a138a7d24ad91f.png" alt=""></p><h2 id="3-2-存储器层次结构概念小结">3.2 存储器层次结构概念小结</h2><p>存储器层次结构行之有效，因为较慢的设备比较快的设备更便宜，还因为程序偏向于展示局部性：</p><ul><li>利用时间局部性，同一数据对象可能会被多次使用</li><li>利用空间局部性，块通常包含有多个数据对象</li></ul><h1>4.高速缓存存储器</h1><p>L1 高速缓存的访问速度约为 4 个时钟周期，L2 约 10 个周期，L3 约 50 个周期。</p><p>当 CPU 执行一条读内存字 w 的指令，它首先向 L1 高速缓存请求这个字，如果 L1 没有就向 L2，依此而下。</p><h2 id="4-1-通用的高速缓存存储结构">4.1 通用的高速缓存存储结构</h2><p>假设一个计算机系统中的存储器地址有 m 位，形成 M =2^m 个不同的地址。m 个地址为划分为 <strong>t 个标记位</strong>，<strong>s 个组索引位</strong>，<strong>b 个块偏移位</strong>。</p><p>高速缓存被组织成 S=2^s 个<strong>高速缓存组</strong>，每个组包含 E 个<strong>高速缓存行</strong>，<strong>每个行为一个数据块</strong>，包含一个<strong>有效位</strong>，t=m-(b+s) 个<strong>标记位</strong>，和 B=2^b 字节的<strong>数据块</strong>。高速缓存的容量 = S * E * B。</p><p><strong>高速缓存可以通过简单地检查地址位来找到所请求的字。</strong></p><p>当 CPU 要从地址 A(由m个地址位组成) 处读一个字时：</p><ol><li>A 中的 s 个组索引位告诉我们在哪个组中</li><li>A 中的 t 个标记位告诉我们在这个组中的哪一行：当且仅当这一行设置了有效位并且标记位与 A 中的标记位匹配时，才说明这一行包含这个字。</li><li>A 中的 b 个块偏移位告诉我们在 B 个字节的数据块中的字偏移。</li></ol><p><img src="c8140e57b956abeabe18f8c94a2d68df.png" alt=""><br><img src="6bee7795fe8f9ea08c72151e3e46aece.png" alt=""></p><p><img src="B4KzO5S7sC8hNeg.png" alt=""></p><p><strong>理解</strong></p><p>使用高位做标记位，可以避免连续的块被映射到同一高速缓存组中。</p><p><strong>通过高速缓存从内存读字</strong></p><p>假设一个系统中只有 CPU、L1 高速缓存和主存。</p><p>当 CPU 执行一条从内存读字 w 的指令，如果 L1 有 w 的副本，就得到 L1 高速缓存命中；如果 L1 没有，就是缓存不命中。</p><p>当缓存不命中，L1 会向主存请求包含 w 的块(L1 中的块就是它的高速缓存行)的一个副本。当块从内存到达 L1，L1 将这个块存在它的一个高速缓存行里，然后从中抽取出字 w，并返回给 CPU。</p><p>高速缓存确定一个请求是否命中，然后抽取出被请求的字的过程分为三步:</p><ol><li><strong>组选择</strong></li><li><strong>行匹配</strong></li><li><strong>字抽取</strong></li></ol><p><img src="mUPZ8qux5VJODks.png" alt=""></p><p><strong>高速缓存有以下几类：</strong></p><ol><li><strong>直接映射高速缓存</strong>：每个组只有一行，即 E=1。</li><li><strong>组相联高速缓存</strong>：每个组有多行，1</li><li><strong>全相联高速缓存</strong>：只有一个组，E=C/B。</li></ol><h2 id="4-2-直接映射高速缓存">4.2 直接映射高速缓存</h2><p>每个组只有一行（E=1）的高速缓存被称为直接映射高速缓存</p><h3 id="1-直接映射高速缓存中的组选择"><strong>1. 直接映射高速缓存中的组选择</strong></h3><p>在这一步中，高速缓存从<strong>w的地址中间抽取出s个组索引位</strong>。这些位被解释成一个对应于个组号的无符号整数。换句话来说，如果我们把高速缓存看成是一个关于<strong>组的一维数组</strong>，那么这些组索引位就是一个到这个数组的索引。图6-30展示了直接映射高速缓存的组选择是如何工作的。在这个例子中，组索引位00001,被解释为一个选择组1的整数索引。</p><p><img src="0a1561d9733806ede8ffd1198bd7e4a1.png" alt=""></p><h3 id="2-直接映射高速缓存中的行匹配"><strong>2. 直接映射高速缓存中的行匹配</strong></h3><p>因为直接映射高速缓存每个组只有一行，只要这一行设置了有效位且标记位相匹配，就说明想要的字的副本确实存储在这一行中。</p><h3 id="3-直接映射高速缓存中的字抽取"><strong>3. 直接映射高速缓存中的字抽取</strong></h3><p>从 w 的地址中抽取出 b 个块偏移位，块偏移位提供了所需的字的第一个字节的偏移。</p><h3 id="4-直接映射高速缓存不命中时的行替换"><strong>4. 直接映射高速缓存不命中时的行替换</strong></h3><p>缓存不命中时需要从下一层取出被请求的块，然后将其存储在组索引位指示的组中的高速缓存行中。</p><p>因为直接映射高速缓存每个组只有一行，所以替换策略很简单：用新取出的行替换当前行。</p><h3 id="5-运行中的直接映射高速缓存"><strong>5. 运行中的直接映射高速缓存</strong></h3><p>标记位和索引位连接起来标识了整个内存中的所有块，而高速缓存中的高速缓存组（块）是少于内存中的块数的。因此位于不同标记位，相同组索引位的块会映射到高速缓存中的同一个高速缓存组。</p><p>在一个高速缓存组中存储了哪个块，可以由标记位唯一地标识。</p><p>理解：对于主存中的整个地址空间，根据标记位不同将其分为了若干个部分，每个部分可以单独且完整地映射到高速缓存中，且刚好占满整个直接映射高速缓存。</p><h3 id="6-直接映射高速缓存中的冲突不命中"><strong>6. 直接映射高速缓存中的冲突不命中</strong></h3><p>冲突不命中在直接映射高速缓存中很常见。因为每个组只有一行，不同标记位的块会映射到同一行，发生冲突不命中。</p><h3 id="7-综合-运行中的直接映射高速缓存">7.综合:运行中的直接映射高速缓存</h3><p>​高速缓存用来选择组和标识行的机制极其简单。必须要这样，因为硬件必须在几个纳秒的时间内完成这些工作。不过，用这种方式来处理位对我们人来说是很令人困惑的。一个具体的例子能帮助我们解释清楚这个过程。假设我们有一个直接映射高速缓存，描述如下:<br>​(S，E，B，m)=(4，1，2，4)<br>​换句话说，高速缓存有四个组，每个组一行，每个块2个字节，而地址是4位的。我们还假设每个字都是单字节的。当然，这样一些假设完全是不现实的，但是它们能使示例保持简单。</p><p>当你初学高速缓存时，列举出整个地址空间并划分好位是很有帮助的，就像我们在图6-32<br>中对4位的示例所做的那样。关于这个列举出的空间，有一些有趣的事情值得注意:</p><ul><li>**标记位和索引位连起来唯一地标识了存储器中的每个块。**例如，块0是由地址0和1组成的，块1是由地址2和3组成的，块2是由地址4和5组成的，依此类推。</li><li>因为有8个存储器块，但是只有4个高速缓存组，多个块映射到同一个高速缓存组<br>(即它们有相同的组索引)。例如，块0和4都映射到组0，块1和5都映射到组1<br>等等。</li><li>映射到同一个高速缓存组的块由标记位唯一地标识。例如，块0的标记位为0，而块4的<br>标记位为 1，块1的标记位为 0，而块5的标记位为1，以此类推。</li></ul><h2 id="4-3-组相联高速缓存">4.3 组相联高速缓存</h2><p>​直接映射高速缓存中冲突不命中造成的问题是源于每一个组只有一行，组相联高速缓存（set associative cache）放松了这条限制，所以每个组都保存了有多于一行的高速缓存</p><p><img src="195812beb411de0249eadb687b64ebb7.png" alt=""></p><h3 id="1-组相联高速缓存中的组选择"><strong>1. 组相联高速缓存中的组选择</strong></h3><p>与直接映射高速缓存一样，组索引位标识组。</p><p><img src="d645d63a307ce00384cfdd794fd18e96.png" alt=""></p><h3 id="2-组相联高速缓存中的行匹配"><strong>2. 组相联高速缓存中的行匹配</strong></h3><p>组相联高速缓存中的行匹配更复杂，因为要<strong>检查多个行的标记位和有效位</strong>，以确定其中是否有所请求的字。</p><p>注意：组中的任意一行都可能包含映射到这个组的内存块，因此<strong>必须搜索组中的每一行</strong>，寻找一个<strong>有效</strong>且<strong>标记位</strong>相匹配的行。</p><h3 id="3-组相联高速缓存中的字抽取"><strong>3. 组相联高速缓存中的字抽取</strong></h3><p>与直接映射高速缓存一样，块偏移位标识所请求的字的第一个字节。</p><p><img src="5f816eb8b4fb94ceae68b929622752bd.png" alt=""></p><h3 id="4-组相联高速缓存中不命中时的行替换"><strong>4. 组相联高速缓存中不命中时的行替换</strong></h3><p><strong>几种替换策略</strong></p><ol><li>**随机替换策略：**随机选择要替换的行</li><li>**最不常使用策略：**替换在过去某个时间窗口内引用次数最少的一行。</li><li>**最近最少使用策略：**替换最后一次访问时间最久远的那一行。</li></ol><p>因为存储器层次结构中越靠下，不命中开销越大，好的替换策略越重要。</p><h2 id="4-4-全相联高速缓存">4.4 全相联高速缓存</h2><p>全相联高速缓存由一个包含所有高速缓存行 (E=C/B) 的组组成。</p><p>因为高速缓存电路必须并行地搜索不同组已找到相匹配的标记，所以全相联高速缓存只适合做小的高速缓存。</p><p>DRAM 主存采用了全相联高速缓存，但是因为它采用了虚拟内存系统，所以在进行类似行匹配的页查找时不需要对一个个页进行遍历。</p><p><img src="5db3034bf836fa8a8811fdc7c33a4c1f.png" alt=""></p><h3 id="1-全相联高速缓存中的组选择"><strong>1. 全相联高速缓存中的组选择</strong></h3><p>全相联高速缓存中只有一个组，所以地址中没有组索引位，只有标记位和块偏移位。</p><p><img src="310594023e2966d1704b4d3e079f5fd6.png" alt=""></p><h3 id="2-全相联高速缓存中的行匹配和字抽取"><strong>2. 全相联高速缓存中的行匹配和字抽取</strong></h3><p>与组相联高速缓存一样。与组相联高速缓存的区别在于规模大小</p><p><img src="bb212df182d4beaec000f0e0781f37e0.png" alt=""></p><h2 id="4-5-有关写的问题">4.5 有关写的问题</h2><p>写相比读要复杂一些。</p><p>写命中（写一个已经缓存了的字 w）的情况下，高速缓存更新了本层的 w 的副本后，如何处理低一层的副本有两种方法：</p><ol><li><strong>直写</strong>：立即将 w 的高速缓存块写回到低一层中。<ul><li>优点：简单</li><li>缺点：每次写都会占据总线流量</li></ul></li><li><strong>写回</strong>：尽可能地推迟更新，只有当替换算法要驱逐这个更新过的块时，才把它写到低一层中。<ul><li><strong>优点：利用了局部性，可以显著地减少总线流量。</strong></li><li>缺点：增加了复杂性。必须为每个高速缓存行维护一个额外的修改位，表明此行是否被修改过</li></ul></li></ol><p><strong>写不命中</strong>情况下的两种方法：</p><ol><li><p><strong>写分配</strong>：加载相应的低一层的块到本层中，然后更新这个高速缓存块。</p><ul><li><p>优点：利用写的空间局部性</p></li><li><p>缺点：每次不命中都会导致一个块从低一层传送到高速缓存</p></li></ul></li><li><p><strong>非写分配</strong>：避开高速缓存，直接把这个字写到低一层中</p></li></ol><p>直写一般与非写分配搭配，两者都更适用于存储器层次结构中的较高层。</p><p><strong>写回一般与写分配搭配，两者都更适用于存储器层次结构中的较低层，因为较低层的传送时间太长。</strong></p><p>因为硬件上复杂电路的实现越来越容易，所以现在使用写回和写分配越来越多。</p><h2 id="4-6-指令高速缓存和统一高速缓存">4.6 指令高速缓存和统一高速缓存</h2><p><strong>三种高速缓存：</strong></p><ol><li>**i-cache：**只保存指令的高速缓存。i-cache 通常是只读的，因此比较简单。</li><li>**d-cache：**只保存程序数据的高速缓存。</li><li>**统一的高速缓存：**既保存指令又保存程序数据.</li></ol><p>现代处理器一般包括独立的 i-cache 和 d-cache，其中两个原因如下：</p><ol><li>使用两个独立的高速缓存，CPU 可以同时读一个指令字和一个数据字。</li><li>可以确保数据访问不会与指令访问形成冲突不命中（不过可能会使容量不命中增加）。</li></ol><h2 id="4-7-高速缓存参数的性能影响">4.7 高速缓存参数的性能影响</h2><p><strong>高速缓存的性能指标</strong></p><ol><li>**命中率：**命中的内存引用比率。</li><li><strong>命中时间</strong>：从高速缓存传送一个字到 CPU 的时间，包括组选择、行确认和字抽取的实践。</li><li>**不命中处罚：**不命中产生的额外时间消耗。</li></ol><p><strong>几个影响因素</strong></p><ol><li>高速缓存大小：较大的高速缓存可以提高命中率，但是会运行得更慢，即增加命中时间。</li><li>块大小：较大的块更能利用空间局部性以提高命中率。但是对于给定的总容量，块越大高速缓存行就越少，不利用利用时间局部性。较大的块因为传送时间更长，所以也会增加不命中处罚。现代处理系统的高速缓存块一般为 64 字节。</li><li>相联度：参数E的选择的影响（每个组中高速缓存行数）。E越高优点是：降低了高速缓存由于冲突不命中出现抖动的可能性。缺点：实现起来昂贵；增加命中时间；增加不命中处罚。</li><li>写策略：高速缓存越往下层，越可能使用写会而不是直写策略。</li></ol><h1>5.编写高速缓存友好的代码</h1><ol><li>让最常见的情况运行得快</li><li>在每个循环内部使缓存不命中数量小</li></ol><h1>6.综合：高速缓存对程序性能的影响</h1><p><strong>存储器山（memory mountain)</strong></p><p><img src="2018_1_28_1517112396218.jpg" alt=""></p><h1>6.7 小结</h1><p>程序员可以通过编写有良好空间和时间局部性的程序来显著地改进程序的运行时间。利用基于 SRAM 的高速缓存存储器特别重要。</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP_阅读笔记_5_优化</title>
    <link href="/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/"/>
    <url>/2024/08/26/CSAPP-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-5-%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div class="note note-secondary">            <p>Don’t design bridges in ignorance of materials, and don’t design low-level software in ignorance of the underlying hardware.</p>          </div><p>​写程序最主要的目标就是使它在所有可能的情况下都正确工作.一个运行得很快但是给出错误结果的程序没有任何用处.程序员必须写出清晰简洁的代码，这样做不仅是为了程序员能够看懂代码，也是为了在检查代码和今后需要修改代码时，其他人能够读和理解代码.</p><p>编写高效程序一般需要以下理解几类活动：</p><ul><li>选择合适的算法和数据结构</li><li>编写出编译器能够有效优化以转换程高效可执行代码的源代码。（需要我们理解优化编译器的能力和局限性）</li><li>对于大型任务，将一个任务分成多份，这些部分可以在多核和多处理器的某种组合上并行地进行计算。（利用并行性）</li></ul><p>本章主要介绍第二项。具体而言:</p><ul><li>消除不必要的工作，例如: 不必要的函数调用、<strong>内存引用</strong>、条件测试。这些工作通常不依赖于执行环境的操作，有些也可以被编译器优化。</li><li>利用处理器提供的指令级并行能力，同时执行多条指令。</li><li>使用profiler，确定程序中的关键路径并加以优化</li></ul><h1>1.优化编译器的能力和局限性</h1><div class="note note-secondary">            <p>gcc -O3 -o output_filename source_file.c</p>          </div><hr><p>编译器的优化行为需要满足一条基本的约束: “优化后的代码的行为和优化前的代码的行为相同”。</p><ul><li>大多数编译器分析局限在单个函数内<ul><li>基于整个程序的分析开销过于昂贵</li><li>新的GCC能够进行单个文件内部的过程间的分析</li></ul></li><li>大多数分析基于静态信息</li></ul><p>​编译器必须很小心地对程序只使用安全的优化，也就是说对于程序可能遇到的所有可能的情况，在C语言标准提供的保证之下，优化后得到的程序和未优化的版本有一样的行为。限制编译器只进行安全的优化，消除了一些造成不希望的运行时行为的可能原因，但是这也意味着程序员必须花费更大的力气写出程序使编译器能够将之转换成有效机器代码。为了理解决定一种程序转换是否安全的难度，让我们来看看下面这两个过程:</p><p>​<img src="5-1.png" alt=""><br>​</p><p>​乍一看，这两个过程似乎有相同的行为。它们都是将存储在由指针yp指示的位置处的值两次加到指针 xp指示的位置处的值。另一方面，函数twiddle2效率更高一些。它只要求3次存储器引用(读<em>xp，读</em>yp，写<em>xp)，而twiddle1需要6次(2次读</em>xp，2次读<em>yp，2次写</em>xp)。因此，如果要编译器编译过程 twiddle1，我们会认为基于 twiddle2 执行的计算能产生更有效的代码。</p><p>不过，考虑 xp 等于 yp 的情况。此时，函数twiddle1 会执行下面的计算:<br>*Xp += <em>XP;<br>/</em>[)puble value at xp */<br>*Xp += *XP;<br>/*Double value at xp */<br>结果是 xp的值会增加4倍。另一方面，函数 twiddle2 会执行下面的计算:<br><em>xp+=2**xp;/</em> Triple value at xp */<br>结果是 xp的值会增加3倍。</p><p>​编译器不知道twiddle1会如何被调用，因此它必须假设参数 xp和 yp 可能会相等。因此，它不能产生 twiddle2 风格的代码作为 twiddle1的优化版本。这种两个指针可能指向同一个存储器位置的情况称为 **存储器别名使用(memory aliasing) **。在只执行安全的优化中，编译器必须假设不同的指针可能会指向存储器中同一个位置。</p><p><strong>解决</strong></p><ul><li>在内循环中使用本地变量进行accumulate以消除aliasing</li><li>通过声明为<code>double *restrict a</code>，告知编译器指针参数无法重叠</li></ul><hr><p>​第二个妨碍优化的因素是函数调用。作为一个示例，考虑下面这两个过程：</p><p><img src="5-2-2.png" alt=""></p><p>最初看上去两个过程计算的都是相同的结果，但是func2只调用f1次，而func1调用f4次。以func1作为源时，会很想产生func2风格的代码。不过，考虑一下代码：</p><p>​<img src="e64c886d1ac1301ff44d50b03f32c702.png" alt=""></p><p>这个函数有个副作用—它修改了全局程序状态的一部分。改变调用它的次数会改变程序的行为。特别地，假设开始时全局变量counter都设置为0，对func1的调用会返回0+1+2+3=6，而对func2的调用会返回4·0-0。大多数编译器不会试图判断一个函数是否没有副作用，因此任意函数都可能是优化的候选者，例如 func2中的做法。相反，编译器会假设最糟的情况，并保持所有的函数调用不变。</p><p><strong>解决</strong></p><ul><li>使用内联函数</li><li>编程者自己进行代码移动(code motion)</li></ul><hr><h1>2.表示程序性能参数: Cycles per Element, CPE</h1><p>​我们引人度量标准<strong>每元素的周期数(CyclesPerElement，CPE)</strong>，作为一种表示程序性能并指导我们改进代码的方法。CPE这种度量标准帮助我们在更详细的级别上理解迭代程序的循环性能。这样的度量标准对执行重复计算的程序来说是很适当的，例如处理图像中的像素，或是计算矩阵乘积中的元素。</p><p>​<strong>CPE</strong>: <strong>计算/处理单个元素所需要的时钟周期，CPE值越小越好</strong>。当过程在一组元素上迭代时，该过程执行的时钟周期数和被处理的元素个数能够用一个线性函数来描述，这个线性函数的斜率就是CPE。</p><p>​以下通过最小2乘估计所得到的线性函数，如图所示：</p><p><img src="5-2.png" alt=""></p><h1>3.基础优化</h1><p>我们对以下函数进行分析：</p><p><img src="fac86485822c416f2e817bd923adb0b8.png" alt=""></p><p>这些是初始的CPE：<br><img src="b53c6237d9908d60d15b8a371f763134.png" alt=""></p><h2 id="3-1代码移动">3.1代码移动</h2><ul><li>code motion: 避免执行多次但是计算结果不变的操作，改用局部变量保存计算结果。</li><li>注意: 某些code motion优化是编译器能够发现的。</li></ul><p>具体而言，在循环判断语句中要避免每次都重复计算数组长度（消除循环的低效率）</p><p>​<img src="27197b6ea0d639415ced3655d8df2b17.png" alt=""><br>我们可以改成这样，接下来的CPE如图所示：</p><p><img src="5-5.png" alt=""></p><p>这个优化是一类常见的优化的一个例子，称为代码移动(code motion)。这类优化包括识别要执行多次(例如在循环里)但是计算结果不会改变的计算。因而可以将计算移动到代码前面不会被多次求值的部分。在本例中，我们将对veclength的调用从循环内部移动到循环的前面。<br>优化编译器会试着进行代码移动。不幸的是，就像前面讨论过的那样，对于会改变在哪里调用函数或调用多少次的变换，编译器通常会非常小心。它们不能可靠地发现一个函数是否会有副<br>作用，因而假设函数会有副作用。例如，如果veclength有某种副作用，那么combine1和combine2可能就会有不同的行为。为了改进代码，程序员必须经常帮助编译器显式地完成代码的移动。</p><h2 id="3-2减少过程调用">3.2减少过程调用</h2><p>注意到循环体内每次获取向量元素都要调用get_vex_element函数，考虑打破抽象，直接通过数组指针遍历：</p><p><img src="b99719a50a081c6a41f7c1065d3b9d98.png" alt=""></p><p>然而结果性能没有显著增加，整数加法反而有所减小</p><p><img src="cbdbefe26e79e7c381ca77aa09959342.png" alt=""></p><p>这说明过程调用的开销并非性能瓶颈。</p><h2 id="3-3消除不必要的内存引用">3.3消除不必要的内存引用</h2><p><img src="5f8a09af7ce887442c14120767bde793.png" alt=""></p><p>通过分析上述汇编代码注意到循环体内每次从dest处读取值，同时也要写入dest处。考虑使用局部变量保存中间结果能够简化为:</p><p><img src="ad21d529498631fa5e96635ea820ce07.png" alt=""></p><p>对应的c代码为：</p><p><img src="e0546036f2ddb6f5d80187327a54987c.png" alt=""></p><p>时间拥有显著的提升，如下：<br><img src="5-9.png" alt=""></p><h2 id="3-4其他优化">3.4其他优化</h2><h3 id="3-4-1-reduction-in-strength">3.4.1. reduction in strength</h3><p>使用开销较小的操作替代开销较大的操作。</p><p>例如，使用x &lt;&lt; 4替代16 * x</p><ul><li>Intel Nehalem: 整数乘法操作需要消耗3个CPU时钟周期，加法操作需要消耗1个CPU时钟周期</li></ul><h3 id="3-4-2-share-common-subexpressions">3.4.2. share common subexpressions</h3><p>重用部分表达式，避免重复计算。例如下面通过单个局部变量的计算，减少了3次冗余计算</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs excel">// version <span class="hljs-number">1</span><br>up = val[(i-<span class="hljs-number">1</span>)*<span class="hljs-built_in">n</span> + j];<br>down = val[(i+<span class="hljs-number">1</span>)*<span class="hljs-built_in">n</span> + j];<br><span class="hljs-built_in">left</span> = val[i*<span class="hljs-built_in">n</span> + j-<span class="hljs-number">1</span>];<br><span class="hljs-built_in">right</span> = val[i*<span class="hljs-built_in">n</span> + j+<span class="hljs-number">1</span>];<br>// version <span class="hljs-number">2</span><br>long inj = i*<span class="hljs-built_in">n</span> + j;<br>up = val [inj - <span class="hljs-built_in">n</span>];<br>down = val[inj + <span class="hljs-built_in">n</span>];<br><span class="hljs-built_in">left</span> = val[inj - <span class="hljs-number">1</span>];<br><span class="hljs-built_in">right</span> = val[inj + <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><ul><li>GCC的<strong>O1</strong>优化会优化这一点</li></ul><h1>4.理解现代处理器</h1><p>​到目前为止，我们运用的优化都不依赖于目标机器的任何特性。这些优化只是简单地降低了过程调用的开销，以及消除了一些重大的“妨碍优化的因素”，这些因素会给优化编译器造成困难。随着试图进一步提高性能，我们必须考虑利用处理器微体系结构的优化，也就是处理器用来执行指令的底层系统设计。<br>​为了理解改进性能的方法，我们需要理解现代处理器的微体系结构。在实际的处理器中，是同时对多条指令求值，这个现象称为<strong>指令级并行</strong>。在某些设计中，可以有100条或更多条指令在处理中。采用一些精细的机制来确保这种并行执行的行为，正好能获得机器级程序要求的顺序语义模型的效果。</p><p>我们会发现两种 <strong>以CPE为单位（周期每元素）</strong> 的延迟界限描述了程序的最大性能。</p><ul><li>当一系列操作必须按照严格顺序执行时，就会遇到<strong>延迟界限(latencybound)</strong>，因为在下一条指令开始之前，这条指令必须结束。当代码中的数据相关限制了处理器利用指令级并行的能力时，延迟界限能够限定程序性能。</li><li>**吞吐量界限(throughput bound)**刻画了处理器功能单元的原始计算能力。这个界限是程序性能的终极限制</li></ul><h2 id="4-1-整体操作-乱序-超标量">4.1 整体操作: 乱序 + 超标量</h2><p>现代处理器一般是<strong>乱序</strong>且是<strong>超标量</strong>的。</p><ul><li><strong>超标量</strong>: 通过实现多个硬件单元，可以在每个时钟周期执行多个操作</li><li><strong>乱序</strong>: 指令执行的顺序和二进制代码中的顺序不一定相同</li></ul><p>架构如下图所示<br><img src="e7832780740216a0dfbdcfea8e17c3ec.png" alt="中文版"></p><p>​</p><p><img src="5-12.png" alt="英文版"></p><p>注意到，这种架构包含了两个单元</p><ul><li><p>指令控制单元</p><p>(ICU, Instruction Control Unit):</p><ul><li><p><strong>Fetch control</strong>: 包含分支预测的功能</p></li><li><p><strong>Instruction decode</strong>: 从icache中读取指令，然后翻译为一组微操作(x86)。例如，<code>addq %rax, %rdx</code>转换为单个微操作；<code>addq%rax, 8(%rdx)</code>转换为内存读取、加法和内存写入三个微操作。</p></li><li><p>Retirement Unit</p><p>: 退役单元控制寄存器文件，记录正在进行的处理并确保遵守顺序语义。指令译码时，和指令相关的信息入队，并一直保存在队列中，直到</p><ol><li>一条指令操作完成，且引起该指令运行的分支点也被认为预测正确，则该指令退役，对应的执行结果会更新寄存器</li><li>若某个分支点预测错误，则该指令会被flush，执行结果被丢弃</li></ol></li></ul></li><li><p>执行单元</p><p>(EU, Execution Unit): 接收来自ICU的微操作，分发到各个功能单元执行，每个时钟周期一般有多个操作。</p><ul><li><strong>Load和Store单元</strong>: 包含一个加法器计算地址，和dcache交互</li><li><strong>Branch单元</strong>: 预测会执行的指令执行结果会保存在EU内的队列中，若Branch单元计算发现预测错误，则会丢弃保存的执行结果，并通知<strong>Fetch Control</strong>单元，之后才能获取正确的指令</li><li><strong>其它各种功能单元</strong>: 通常一个算术运算单元能够执行多种运算，例如: 整数运算、浮点乘、整数乘、分支等等</li></ul></li></ul><p>注意: 为了避免分支预测错误，任何对程序寄存器的更新都只会在指令退役时发生。</p><p>为了加快传送某个单元操作结果到另一个单元的速度，执行单元之间也可以进行数据交换。一个常用技术被称为<strong>寄存器重命名</strong>。</p><ul><li>当条更新寄存器r的指令译码时，产生标记，得到一个指向该操作结果的唯一标识符。条目(r，t)被加入到一张表中，该表维护着每个程序寄存器r与会更新该寄存器的操作的标记t之间的关联。</li><li>当随后以寄存器r作为操作数的指令译码时，发送到执行单元的操作会包含t作为操作数源的值。当某个执行单元完成第一个操作时，会生成一个结果(v，t)，指明标记为t的操作产生值v。</li><li>所有等待t作为源的操作都能使用v作为源值，这就是一种形式的数据转发。</li></ul><p>通过这种机制，值可以直接从一个操作直接转发到另一个操作，就不需要先写入寄存器文件（<strong>隐含着需要分支判断正确，指令退役</strong>），之后再读出来。只要操作执行完成，无论预测失败与否，操作结果都可以转发并继续后续操作。注意: 该表只需维护写操作对应的寄存器，对于读操作，可以直接从寄存器文件获取这个操作数。</p><h2 id="4-2-功能单元的性能">4.2. 功能单元的性能</h2><p>Intel Core i7 Haswell CPU有下面8个功能单元:</p><ul><li>整数运算，浮点乘法，整数和浮点除法，分支</li><li>整数运算，浮点加法，整数乘，浮点乘</li><li>load，地址计算</li><li>load，地址计算</li><li>store</li><li>整数运算</li><li>整数运算，分支</li><li>store、store地址计算</li></ul><p>它们的性能参数分别如下</p><p><img src="5-13.png" alt=""></p><ul><li><strong>latency</strong>: 完成运算需要的总时间</li><li><strong>issue</strong>: 两个连续同类型的运算的最小发射间隔时钟周期数</li><li><strong>capacity</strong>: 能够执行该功能单元的数量</li></ul><p>从以上性能参数我们能够分析得到下面这些结论</p><ul><li>乘法和加法的issue时间均为1，然而单个乘法操作以及浮点加法操作的latency均大于1，这是利用了流水线技术。issue时间为1的功能单元被称为<strong>完全流水线化（fully pipelined）</strong>。例如，浮点浮点加法的三个流水线级分别为<strong>处理指数</strong>，<strong>小数相加</strong>，<strong>结果舍入</strong>。</li><li>除法的latency和issue时间相同。这意味着每开始一次除法操作都需要首先完成上一次的除法操作。</li></ul><p><strong>功能单元的最大吞吐量</strong>: 对一个容量为C，发射时间为I的功能单元，它的最大吞吐量为C/IC/I。</p><p>对于不同的功能单元而言，它们的两个<strong>CPE界限（即单位是周期每元素）</strong>: 延迟界限（必须顺序执行时的CPE值）和吞吐量界限分别为:<br><img src="5-14.png" alt=""></p><h2 id="4-2处理器操作的抽象模型">4.2处理器操作的抽象模型</h2><p>​我们会使用程序的<strong>数据流(data-fow)<strong>表示，作为分析在现代处理器上执行的机器级程序性能的一个工具，这是一种图形化的表示方法，展现了不同操作之间的数据相关是如何限制它们的执行顺序的。这种限制形成了图中的</strong>关键路径(critical path)</strong>，这是执行一组机器指令所需时钟周期数的一个下界。</p><p>​在继续技术细节之前，检査一下对函数combine4所获得的 CPE测量值是很有帮助的，到目前为止 combine4是最快的代码:</p><p><img src="5-15.png" alt=""></p><p>注意到除了整数加法操作，其它操作的CPE值和延迟界限相同。事实上，此时整数加法中的<strong>数据相关</strong>构成了程序的关键路径。</p><p>可以通过数据流图研究这种相关性。对于内循环的汇编代码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">.L25:<br> vmulsd (<span class="hljs-variable">%rdx</span>), <span class="hljs-variable">%xmm0</span>, <span class="hljs-variable">%xmm0</span>   <span class="hljs-comment"># multiply acc by data[i]</span><br> addq   <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdx</span>               <span class="hljs-comment"># increment data+i</span><br> cmpq   <span class="hljs-variable">%rax</span>, <span class="hljs-variable">%rdx</span>             <span class="hljs-comment"># %rdx - %rax</span><br> jne    .L25<br></code></pre></td></tr></table></figure><p>可以画出如下的数据流图</p><p><img src="5-16.png" alt=""></p><p>注意到<code>vmulsd</code>指令被翻译成两个操作: load和mul。</p><p>循环中使用的寄存器能够被分成四类:</p><ul><li>只读:这些寄存器只用作源值，可以作为数据，也可以用来计算存储器地址，但是在循环中它们是不会被修改的。循环combine4的只读寄存器是rax和rbp。</li><li>只写:这些寄存器作为数据传送操作的目的。在本循环中没有这样的寄存器。</li><li>局部:这些寄存器在循环内部被修改和使用，迭代与迭代之间不相关。在这个循环中，条件码寄存器就是例子:cmp操作会修改它们，然后jg操作会使用它们，不过这种相关是在单次迭代之内的。</li><li>循环:对于循环来说，这些寄存器既作为源值，又作为目的，一次选代中产生的值会在另一次迭代中用到。可以看到，%rdx和xmm0是combine4的循环寄存器，对应于程序值i和acc。</li></ul><p>接下来可以看到，<strong>循环寄存器</strong>之间的操作链决定了限制性能的数据相关。</p><p>进一步对数据流图进行优化，消除不直接影响数据流的操作（即cmp和jne）以及循环寄存器后有：<br><img src="5-17.png" alt=""><br>上图右侧的数据流表示的是单次迭代中进行的操作。当绘制多次迭代可以注意到<br><img src="5-18.png" alt=""></p><p>注意到程序存在两条数据相关链:</p><ul><li>mul操作对%xmm0的修改</li><li>add操作对%rdx的修改</li></ul><p>在单精度浮点乘法条件下，由于mul操作的执行需要5个时钟周期，而数据依赖的情况下迭代n次就需要5n个时钟周期。加法操作需要1个时钟周期，因此n次迭代整体仅需要n个时钟周期。所以<strong>关键路径为mul操作的数据依赖</strong>。</p><p><strong>接下来我们希望提高重新调整操作的结构，增强指令级并行。具体而言，我们需要对程序做变换，使得唯一的限制因素是吞吐量界限</strong>。</p><h1>5.程序变换：循环展开</h1><p><strong>循环展开</strong>: 通过增加一次迭代内的处理元素数，减少迭代次数。</p><ul><li><strong>减少循环开销</strong>: 减少不直接有助于得到程序结果的操作的数量，如条件判断</li><li><strong>缩短关键路径</strong>: 提供了减少关键路径上操作数量的方法</li></ul><p>修改后k=2后的代码（每次进行操作k次）：2x1循环</p><p><img src="98f982bce14c452f71c571fcf601884b.png" alt=""></p><p>对应获得的性能为：<br><img src="5-20.png" alt=""></p><p><strong>注意到仍没有超过延迟界限，这是因为关键路径上仍有n个mul操作，仅是将循环开销减少了一半。</strong></p><h1>6. 提高并行性</h1><p>注意到，虽然程序性能受到运算单元的延迟限制，但是加法和乘法运算单元能够完全流水线化，然而循环展开并不能利用这种能力。<strong>本质原因在于我们使用单个累计变量，仅在该变量上一个值计算完成后，才能累积计算下一个值。</strong></p><h2 id="6-1-程序变换：提高并行性">6.1 程序变换：提高并行性</h2><p>对于一个可交换且可结合的合并运算，我们可以将一组合并运算分割成两个或多个部分，并在最后合并结果以提高性能。</p><p>例如使用2x2循环展开的代码如下：<br><img src="b15da5717ca38d4c29177d86ad88585a.png" alt=""></p><p>此时可以做到两路并行乘法操作。对应的性能结果为：<br><img src="5-23.png" alt=""></p><p>注意到几乎所有操作都改进了大约一倍。</p><p><img src="5-24.png" alt=""></p><p>由于每个关键路径只包括1/2个mul操作，因此CPE值减小为原来的1/2。</p><p>考虑上述累计变量变换的一般形式，将循环展开为k次，同时并行使用k个循环变量。注意到当k=10时，几乎能达到吞吐量界限。这是因为<strong>为了达到吞吐量界限，通常需要所有流水线都是满的，对延迟为L，容量为C的操作而言，就需要循环展开因子k &gt;= L*C</strong>。</p><p>例如，浮点乘的L=5，C=2，则k需要大于等于10。而浮点加有L=3，C=1，因此k大于等于3就可以达到最大吞吐量。</p><h2 id="6-2-程序变换-重新结合变换">6.2. 程序变换: 重新结合变换</h2><p>重新结合变换: 变换累积变量和向量元素的合并顺序。</p><p><img src="bafa7e71320a3cdec1d53bb736ebca0e.png" alt=""><br>上面的变换被称为2x1a unrolling。步长为2，单个累积变量。</p><p>通过变换合并顺序，关键路径也减小了一半。</p><p>5-28说明了 combine7内循环的代码(对于单精度乘积的情况)是如何被译码成操作，以及得到的数据相关。我们看到，来自于movss和第一个mulss 指令的 load 操作从存储器中加载向量元素i和 i+1，第一个 mul操作把它们乘起来。然后，第二个mul操作把这个结果乘以累积值 acc。图 5-29 给出了我们如何对图 5-28的操作进行重新排列、优化和抽象，得到表示一次迭代中数据相关的模板(见图5-29b)。对于combine5和combine7的模板，有两个 1oad和两个 mu1 操作，但是只有一个mu1 操作形成了循环寄存器间的数据相关链。然后，把这个模板复制 n/2次，给出了n个向量元素相乘所执行的计算(图5-30)，我们可以看到关键路径上只有n/2 个操作。每次迭代内的第一个乘法都不需要等待前一次迭代的累积值就可以执行。因此,最小可能的 CPE减少了2倍。当我们增加k值时，每次迭代中关键路径上一直只有一个操作。</p><p><img src="cb7603e5b8919c268d2a3f89713f78d4.png" alt=""><br>得到的性能如表所示：<br><img src="5-28.png" alt=""></p><p>注意到和2x2 loop unrolling相比，2x1a计算的CPE大致相同，但是2x2 loop unrolling能够并行利用两个load单元。</p><p>注: <strong>由于浮点计算的不可结合性，编译器通常不会使用这些方式对浮点运算进行优化。</strong></p><h2 id="6-3-使用SIMD指令">6.3. 使用SIMD指令</h2><p>通过使用AVX指令，可以进一步提高并行性。</p><p><img src="5-30.png" alt=""></p><h2 id="6-3-小结">6.3. 小结</h2><p>注意到，功能单元的吞吐量界限是一个极限下界。假设程序要执行n个操作，而硬件共有c个功能单元，且每个单元的发射时间为i，则程序至少需要（n/c）∗i个时钟周期。</p><h1>7. 性能优化的限制因素</h1><ol><li><p>寄存器溢出</p><ul><li>循环并行性受汇编代码（通用寄存器资源）描述计算能力的限制。因此循环展开无法做到无限扩展，事实上之前的例子当从10x10扩展到20x20时，由于寄存器溢出，程序变量值会被存储在栈中，因而导致性能下降。</li></ul></li><li><p>分支预测与预测惩罚</p><ul><li><p>原则1:</p><p>不要过分关心可预测的分支。</p><ul><li>之前的示例中将每次迭代的元素获取从<code>get_vec_element()</code>中拿出来，然而性能基本没有变化，这说明<strong>分支在高度可预测的情况下，边界检查几乎不会影响性能</strong>。</li><li>注意: 这里说的是<strong>可预测的分支</strong>！！！对于难以预测的分支，性能还是会有大的变化。</li><li>分支预测失败，有大约20个周期的惩罚。</li></ul></li><li><p>原则2:</p><p>书写适合用条件传送实现的代码。</p><ul><li>使用条件传送替换传统的基于分支跳转的实现: 计算分支两个方向上的值，然后根据条件使用某一个方向上的值。</li></ul></li></ul></li></ol><p>GCC倾向于将如下<strong>函数式</strong>风格的代码转化为使用条件传送指令，该风格倾向于用条件操作来计算值，然后用值更新程序状态。相反，<strong>命令式</strong>风格倾向于根据条件语句有选择地更新程序状态。一个例子如下:</p><p><strong>命令式</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*Rearrange two vectors so that for each i, bli]&gt;= a[i] */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">minmax1</span><span class="hljs-params">(<span class="hljs-type">long</span> all, <span class="hljs-type">long</span> b[], <span class="hljs-type">long</span> n)</span></span>&#123;<br><span class="hljs-type">long</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br><span class="hljs-keyword">if</span>(a[i]&gt; b[i])&#123;<br><span class="hljs-type">long</span> t= ali];<br>a[i]= b[i];<br>b[i] = t;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>函数式</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*Rearrange two vectors so that for each i, bli]&gt;= a[i] */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">minmax1</span><span class="hljs-params">(<span class="hljs-type">long</span> all, <span class="hljs-type">long</span> b[], <span class="hljs-type">long</span> n)</span></span>&#123;<br><span class="hljs-type">long</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br><span class="hljs-type">long</span> min = ali]&lt; b[i]? a[i] : b[i];<br><span class="hljs-type">long</span> max = ali]&lt; b[i] ? b[i] : a[i];<br>a[i]= min;<br>b[i]= max;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
